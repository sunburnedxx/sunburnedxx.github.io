<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>动态规划刷题总结</title>
      <link href="/2022/10/01/dong-tai-gui-hua-shua-ti-zong-jie/"/>
      <url>/2022/10/01/dong-tai-gui-hua-shua-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是动态规划？"><a href="#什么是动态规划？" class="headerlink" title="什么是动态规划？"></a>什么是动态规划？</h3><p>​动态规划的本质是枚举，一般问题形式是求最值，求出所有可能解，在其中找最值解决问题。很多问题都不能直接用动态规划解决，需要稍微转换一下，但核心还是动态规划求最值，需要好好辨析。</p><h3 id="动规怎么用？"><a href="#动规怎么用？" class="headerlink" title="动规怎么用？"></a>动规怎么用？</h3><p>以0-1背包问题为例：</p><p>给你一个可装载重量为 <code>W</code> 的背包和 <code>N</code> 个物品，每个物品有重量和价值两个属性。其中第 <code>i</code> 个物品的重量为 <code>wt[i]</code>，价值为 <code>val[i]</code>，现在让你用这个背包装物品，最多能装的价值是多少？</p><h4 id="第一步：明确状态和选择"><a href="#第一步：明确状态和选择" class="headerlink" title="第一步：明确状态和选择"></a>第一步：明确<strong>状态</strong>和<strong>选择</strong></h4><p><strong>状态</strong>就是解决问题需要的变量，<strong>选择</strong>就是对状态的修改策略</p><p>解决0-1背包问题需要两个变量：背包的容量 和 可选择的物品，修改背包容量有两钟策略：将可选的物品装进背包 或 不装进背包 ，所以状态为 背包的容量 w[j] 和 可选择的物品 n[i]，选择为 将可选的物品装进背包 或 不装进背包。</p><h4 id="第二步：明确状态转移方程（递推公式）"><a href="#第二步：明确状态转移方程（递推公式）" class="headerlink" title="第二步：明确状态转移方程（递推公式）"></a>第二步：明确状态转移方程（递推公式）</h4><p>状态转移方程描述了解决问题的过程，将原问题的解决分解成有次序的若干步，后一步依赖于前一步，状态转移方程描述了如何根据第 i-1 步推出第 i 步， 进而解决整个问题。我们要根据 <strong>选择</strong> 推出状态转移方程。</p><p>如何解决背包问题？背包问题要求 当背包容量为W时，在N个物品中选择，能装下的最大价值，我们要解决当背包容量为j时，在i个物品中选择，能装下的最大价值（j&lt;&#x3D;W,i&lt;&#x3D;N)，那么当j&#x3D;W,i&#x3D;N时，问题得以解决。那么如何根据前一步的状态 f(i-1,j-1) 推出后一步 f(i,j) ？两种情况：①将可选物品装进背包：f(i,j)&#x3D; f(i,j-1) +val[i] ②不装进背包 f(i,j)&#x3D; f(i-1,j-1) , 要求最大价值即 f(i，j) &#x3D; max{f(i,j-1)，f(i-1,j-1)}。</p><h5 id="①确认base-case-f-0"><a href="#①确认base-case-f-0" class="headerlink" title="①确认base case: f(0)"></a>①确认base case: f(0)</h5><p>背包问题中，当 i&#x3D;0 或 j&#x3D;0 时 f(0,…)&#x3D;f(…,0)&#x3D;0</p><h5 id="②推出通用状态转移方程-f-i-x3D-g-f-i-1"><a href="#②推出通用状态转移方程-f-i-x3D-g-f-i-1" class="headerlink" title="②推出通用状态转移方程: f(i)&#x3D;g(f(i-1))"></a>②推出通用状态转移方程: f(i)&#x3D;g(f(i-1))</h5><p>根据上文解释，背包问题 f(i，j) &#x3D; max{f(i,j)&#x3D; f(i,j-1) +val[i]，f(i-1,j-1)}</p><h4 id="第三步：枚举所有状态得到最值"><a href="#第三步：枚举所有状态得到最值" class="headerlink" title="第三步：枚举所有状态得到最值"></a>第三步：枚举所有状态得到最值</h4><p>最后，根据 <strong>状态转移方程</strong> 枚举出所有 状态 下的解，得到最值，解决问题。</p><h4 id="第四步：优化"><a href="#第四步：优化" class="headerlink" title="第四步：优化"></a>第四步：优化</h4><p>​考虑是否有重复解决的子问题，是否需要设置备忘录进行记录；考虑是否只需记录有限个状态但实际记录了所有状态造成空间的浪费，是否可以进行空间压缩。具体解法具体分析。</p><h3 id="动规的具体解法"><a href="#动规的具体解法" class="headerlink" title="动规的具体解法"></a>动规的具体解法</h3><p>​动态规划解题由于第三步：枚举 的方式不同，分成了递归、迭代两种解法。递归自顶向下通过递归方法 f 来描述状态转移方程解决问题，迭代自底向上通过数组 dp 描述状态转移方程，记录所有解，在所有解中找最值，进而解决问题。关键是 f 和 dp 的定义如何确定，上文 明确动态转移方程 已经讲到，f 和 dp描述的就是动态转移方程。递归可以改迭代，迭代可以改递归，它们只是枚举方式不同，其他并无两样。</p><h4 id="迭代解法"><a href="#迭代解法" class="headerlink" title="迭代解法"></a>迭代解法</h4><p>​对于迭代枚举所有解，将其存放在dp数组，当 <strong>状态</strong> 有多个时，需要dp为多维数组（顶多二维数组）；当dp数组过于复杂不能很好地解决问题时，要重新思考dp的定义；dp数组的最后一个值不一定是问题的最终解，也有可能是dp数组中的最大&#x2F;小值，看dp数组的定义如何。</p><p>解法框架：</p><pre><code>//给用来存储的数据结构和dp数组分配空间//base casefor 状态1 in 状态1的所有取值：    for 状态2 in 状态2的所有取值：        for ...            dp[状态1][状态2][...] = 择优(选择1，选择2...)         return dp[最终状态1][最终状态2][...] or 选最值(dp)</code></pre><p>背包问题迭代解法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">knapsack</span><span class="token punctuation">(</span><span class="token keyword">int</span> W<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wt<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//dp[i][w] 表示：对于前 i 个物品（从 1 开始计数），当前背包的容量为 w 时，这种情况下可以装下的最大价值是 dp[i][w]</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>W <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// base case</span>    <span class="token comment" spellcheck="true">//重量或物品为0时，背包无法存放物品</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>W<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> w <span class="token operator">&lt;=</span> W<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">-</span> wt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 物品重量超过背包剩余可装重量，不装入背包</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 装入或者不装入背包，择优</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>                    dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w <span class="token operator">-</span> wt<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>W<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于数组索引从 0 开始，而我们定义中的 <code>i</code> 是从 1 开始计数的，所以 <code>val[i-1]</code> 和 <code>wt[i-1]</code> 表示第 <code>i</code> 个物品的价值和重量,如果选择将第 <code>i</code> 个物品装进背包，那么第 <code>i</code> 个物品的价值 <code>val[i-1]</code> 肯定就到手了，接下来就要在剩余容量 <code>w - wt[i-1]</code> 的限制下，在前 <code>i - 1</code> 个物品中挑选，求最大价值，即 <code>dp[i-1][w - wt[i-1]]</code></p></blockquote><h4 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h4><p>​递归比较好理解，它是自上而下的，描述了如何解决问题，只要明确定义，根据定义写逻辑就能得到解，递归方法 f 的返回值就是不同状态下解的值。</p><p>解法框架：</p><pre><code>//备忘录memo//递归函数结果resmain(...)&#123;    //初始化备忘录    return dp() or dp()&#125;dp(状态1,状态2,...)&#123;    //base case        //查备忘录，有就return    res=择优(选择1，选择2...);    //添加备忘录        //return&#125;</code></pre><p>背包问题递归解法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//备忘录memo[i][w]:对于前 i 个物品（从 1 开始计数），当前背包的容量为 w 时，这种情况下可以装下的最大价值</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memo<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">knapsack</span><span class="token punctuation">(</span><span class="token keyword">int</span> W<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wt<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化备忘录</span>    memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>W <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token function">dp</span><span class="token punctuation">(</span>W<span class="token punctuation">,</span>N<span class="token punctuation">,</span>wt<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dp(W,N,wt,wal)返回装载重量为 `W` 的背包和 `N` 个物品可装载的最大价值</span><span class="token keyword">int</span> res<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> W<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wt<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//base case</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>W<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查备忘录</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>W<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> memo<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>W<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//物品重量超过背包剩余可装重量，不装入背包</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">-</span> wt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        res<span class="token operator">=</span><span class="token function">dp</span><span class="token punctuation">(</span>W<span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>wt<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//物品装入或者不装入背包，择优</span>        res<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span>W<span class="token operator">-</span>wt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">+</span>val<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>wt<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       memo<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>W<span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>综上，动规解法如下：</strong></p><ol><li><strong>根据问题，明确状态和选择</strong></li><li><strong>根据选择，明确状态转移方程</strong><ol><li><strong>确定base case</strong></li><li><strong>写出通用的状态转移方程</strong></li></ol></li><li><strong>通过状态转移方程，枚举所有状态下的解，求最值</strong><ul><li><strong>通过递归枚举</strong></li><li><strong>通过迭代枚举</strong></li></ul></li><li><strong>时空优化</strong><ul><li><strong>递归解法设备忘录</strong></li><li><strong>迭代解法压缩空间</strong></li></ul></li></ol><h3 id="一个小栗子：最小编辑距离"><a href="#一个小栗子：最小编辑距离" class="headerlink" title="一个小栗子：最小编辑距离"></a>一个小栗子：最小编辑距离</h3><p><a href="https://leetcode.cn/problems/edit-distance/">力扣72题：编辑距离</a></p><p>给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数  。</p><p>你可以对一个单词进行如下三种操作：</p><p>插入一个字符<br>删除一个字符<br>替换一个字符</p><p><strong>思路</strong></p><p><strong>解决两个字符串的动态规划问题，一般都是用两个指针<code>i,j</code>分别指向两个字符串，然后一步步往后走，缩小问题的规模</strong>。</p><p>对于每对字符<code>s1[i]</code>和<code>s2[j]</code>，可以有四种操作：</p><pre><code>if s1[i] == s2[j]:       跳过（skip）    i, j 同时向前移动else:    三选一：        插入（insert）        删除（delete）        替换（replace）</code></pre><p>迭代解法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>String word1<span class="token punctuation">,</span> String word2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储 s1[0..i] 和 s2[0..j] 的最小编辑距离</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//base case</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//三选一</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="再来一个栗子：最长公共子序列"><a href="#再来一个栗子：最长公共子序列" class="headerlink" title="再来一个栗子：最长公共子序列"></a>再来一个栗子：最长公共子序列</h3><p><a href="">力扣1143题 计算LCS</a></p><p>输入两个字符串<code>s1</code>和<code>s2</code>，请你找出他们俩的最长公共子序列，返回这个子序列的长度。</p><p><strong>思路</strong></p><p>对于每对字符<code>s1[i]</code>和<code>s2[j]</code>，可以有四种情况：</p><ol><li>如果s1[i]&#x3D;&#x3D;s2[j],这个字符一定在lcs中</li><li>如果s1[i]！&#x3D;s2[j]，s1[i]和s2[j]至少有一个字符不在lcs中<ol><li>s1[i]不在lcs中</li><li>s2[j]不在lcs中</li><li>都不在lcs中</li></ol></li></ol><p>2中情况3可以直接忽略，因为我们在求最大值，情况三在计算<code>s1[i+1..]</code>和<code>s2[j+1..]</code>的<code>lcs</code>长度，这个长度肯定是小于等于情况二<code>s1[i..]</code>和<code>s2[j+1..]</code>中的<code>lcs</code>长度的，因为<code>s1[i+1..]</code>比<code>s1[i..]</code>短，那从这里面算出的<code>lcs</code>当然也不可能更长，同理，情况三的结果肯定也小于等于情况一。</p><p>迭代解法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义：s1[0..i-1] 和 s2[0..j-1] 的 lcs 长度为 dp[i][j]</span>    <span class="token comment" spellcheck="true">// 目标：s1[0..m-1] 和 s2[0..n-1] 的 lcs 长度，即 dp[m][n]</span>    <span class="token comment" spellcheck="true">// base case: dp[0][..] = dp[..][0] = 0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 现在 i 和 j 从 1 开始，所以要减一</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// s1[i-1] 和 s2[j-1] 必然在 lcs 中</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// s1[i-1] 和 s2[j-1] 至少有一个不在 lcs 中</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 力扣刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot简述</title>
      <link href="/2022/06/30/springboot-jian-xi/"/>
      <url>/2022/06/30/springboot-jian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JavaConfig"><a href="#1-JavaConfig" class="headerlink" title="1. JavaConfig"></a>1. JavaConfig</h1><ol><li><p>为什么要使用 Spring Boot</p><p>因为Spring， SpringMVC 需要使用的大量的配置文件 （xml文件）</p><p>还需要配置各种对象，把使用的对象放入到spring容器中才能使用对象</p><p>需要了解其他框架配置规则。</p></li><li><p>SpringBoot 就相当于 不需要配置文件的Spring+SpringMVC。 常用的框架和第三方库都已经配置好了。</p><p>拿来就可以使用了。</p></li><li><p>SpringBoot开发效率高，使用方便多了</p></li></ol><h2 id="1-1-JavaConfig"><a href="#1-1-JavaConfig" class="headerlink" title="1.1 JavaConfig"></a>1.1 JavaConfig</h2><p>JavaConfig: 使用java类作为xml配置文件的替代， 是配置spring容器的纯java的方式。 在这个java类这可以创建java对象，把对象放入spring容器中（注入到容器）， </p><p>使用两个注解：</p><p>1）@Configuration ： 放在一个类的上面，表示这个类是作为配置文件使用的。</p><p>2）@Bean：声明对象，把对象注入到容器中。</p><pre class="line-numbers language-java"><code class="language-java">例子：<span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Configuration:表示当前类是作为配置文件使用的。 就是用来配置容器的 *       位置：在类的上面 * *  SpringConfig这个类就相当于beans.xml */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建方法，方法的返回值是对象。 在方法的上面加入@Bean     * 方法的返回值对象就注入到容器中。     *     * @Bean: 把对象注入到spring容器中。 作用相当于&lt;bean>     *     *     位置：方法的上面     *     *     说明：@Bean,不指定对象的名称，默认是方法名是 id     *     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Student <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Student s1  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/***     * 指定对象在容器中的名称（指定&lt;bean>的id属性）     * @Bean的name属性，指定对象的名称（id）     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"lisiStudent"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Student <span class="token function">makeStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Student s2  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s2<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-ImporResource"><a href="#1-2-ImporResource" class="headerlink" title="1.2 @ImporResource"></a>1.2 @ImporResource</h2><p>@ImportResource 作用导入其他的xml配置文件， 等于 在xml </p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resources</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>其他配置文件<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">,</span><span class="token string">"classpath:beans.xml"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-PropertyResource"><a href="#1-3-PropertyResource" class="headerlink" title="1.3 @PropertyResource"></a>1.3 @PropertyResource</h2><p>@PropertyResource: 读取properties属性配置文件。 使用属性配置文件可以实现外部化配置 ，</p><p>在程序代码之外提供数据。</p><p>步骤：</p><ol><li>在resources目录下，创建properties文件， 使用k&#x3D;v的格式提供数据</li><li>在PropertyResource 指定properties文件的位置</li><li>使用@Value（value&#x3D;”${key}”）</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">,</span><span class="token string">"classpath:beans.xml"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:config.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.bjpowernode.vo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-Spring-Boot"><a href="#2-Spring-Boot" class="headerlink" title="2. Spring Boot"></a>2. Spring Boot</h1><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h2><p>SpringBoot是Spring中的一个成员， 可以简化Spring，SpringMVC的使用。 他的核心还是IOC容器。</p><p>特点：</p><ul><li><p>Create stand-alone Spring applications</p><p> 创建spring应用</p></li><li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p><p>内嵌的tomcat， jetty ， Undertow </p></li><li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p><p>提供了starter起步依赖，简化应用的配置。   </p><p>比如使用MyBatis框架 ， 需要在Spring项目中，配置MyBatis的对象 SqlSessionFactory ， Dao的代理对象</p><p>在SpringBoot项目中，在pom.xml里面, 加入一个 mybatis-spring-boot-starter依赖</p></li><li><p>Automatically configure Spring and 3rd party libraries whenever possible</p><p>尽可能去配置spring和第三方库。叫做自动配置（就是把spring中的，第三方库中的对象都创建好，放到容器中， 开发人员可以直接使用）</p></li><li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p><p> 提供了健康检查， 统计，外部化配置</p></li><li><p>Absolutely no code generation and no requirement for XML configuration</p><p>不用生成代码， 不用使用xml，做配置</p></li></ul><h2 id="2-2-创建Spring-Boot项目"><a href="#2-2-创建Spring-Boot项目" class="headerlink" title="2.2 创建Spring Boot项目"></a>2.2 创建Spring Boot项目</h2><h3 id="2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用"><a href="#2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用" class="headerlink" title="2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用"></a>2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用</h3><p>使用的地址： <a href="https://start.spring.io/">https://start.spring.io</a></p><h3 id="2-2-1-使用国内的地址"><a href="#2-2-1-使用国内的地址" class="headerlink" title="2.2.1  使用国内的地址"></a>2.2.1  使用国内的地址</h3><p><a href="https://start.springboot.io/">https://start.springboot.io</a></p><h2 id="2-3-注解的使用"><a href="#2-3-注解的使用" class="headerlink" title="2.3  注解的使用"></a>2.3  注解的使用</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>符合注解：由<span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span>        <span class="token number">1</span><span class="token punctuation">.</span>@SpringBootConfiguration    <span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> Configuration<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    <span class="token keyword">boolean</span> <span class="token function">proxyBeanMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>说明：使用了<span class="token annotation punctuation">@SpringBootConfiguration</span>注解标注的类，可以作为配置文件使用的，    可以使用Bean声明对象，注入到容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.@EnableAutoConfiguration</p><p>启用自动配置， 把java对象配置好，注入到spring容器中。例如可以把mybatis的对象创建好，放入到容器中</p><p>3.@ComponentScan</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span> 扫描器，找到注解，根据注解的功能创建对象，给属性赋值等等。默认扫描的包： <span class="token annotation punctuation">@ComponentScan</span>所在的类所在的包和子包。    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-4-SpringBoot的配置文件"><a href="#2-4-SpringBoot的配置文件" class="headerlink" title="2.4 SpringBoot的配置文件"></a>2.4 SpringBoot的配置文件</h2><p>配置文件名称： application</p><p>扩展名有： properties( k&#x3D;v) ;  yml ( k: v)</p><p>使用application.properties,   application.yml</p><p>例1：application.properties设置 端口和上下文</p><pre class="line-numbers language-xml"><code class="language-xml">#设置端口号server.port=8082#设置访问应用上下文路径， contextpathserver.servlet.context-path=/myboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例2： application.yml</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /myboot2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-多环境配置"><a href="#2-5-多环境配置" class="headerlink" title="2.5 多环境配置"></a>2.5 多环境配置</h2><p>有开发环境， 测试环境， 上线的环境。</p><p>每个环境有不同的配置信息， 例如端口， 上下文件， 数据库url，用户名，密码等等</p><p>使用多环境配置文件，可以方便的切换不同的配置。</p><p>使用方式： 创建多个配置文件， 名称规则： application-环境名称.properties(yml)</p><p>创建开发环境的配置文件： application-dev.properties(  application-dev.yml )</p><p>创建测试者使用的配置： application-test.properties</p><h2 id="2-6-ConfigurationProperties"><a href="#2-6-ConfigurationProperties" class="headerlink" title="2.6 @ConfigurationProperties"></a>2.6 @ConfigurationProperties</h2><p>@ConfigurationProperties: 把配置文件的数据映射为java对象。</p><p>属性：prefix 配置文件中的某些key的开头的内容。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"school"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchoolInfo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String website<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getWebsite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> website<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWebsite</span><span class="token punctuation">(</span>String website<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>website <span class="token operator">=</span> website<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"SchoolInfo&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", website='"</span> <span class="token operator">+</span> website <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.properties</p><pre class="line-numbers language-pro"><code class="language-pro">#配置端口号server.port=8082#context-pathserver.servlet.context-path=/myboot#自定义key=valueschool.name=动力节点school.website=www.bjpowernode.comschool.address=北京的大兴区site=www.bjpowernode.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-7-使用jsp"><a href="#2-7-使用jsp" class="headerlink" title="2.7  使用jsp"></a>2.7  使用jsp</h2><p>SpringBoot不推荐使用jsp ，而是使用模板技术代替jsp</p><p>使用jsp需要配置：</p><p>1） 加入一个处理jsp的依赖。 负责编译jsp文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>如果需要使用servlet， jsp，jstl的功能</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet.jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建一个存放jsp的目录，一般叫做webapp</li></ol><p>​    index.jsp</p><ol start="4"><li>需要在pom.xml指定jsp文件编译后的存放目录。</li></ol><p>  META-INF&#x2F;resources</p><p>5）创建Controller， 访问jsp</p><p>6）在application.propertis文件中配置视图解析器</p><h2 id="2-8-使用容器"><a href="#2-8-使用容器" class="headerlink" title="2.8 使用容器"></a>2.8 使用容器</h2><p>你想通过代码，从容器中获取对象。</p><p>通过SpringApplication.run(Application.class, args); 返回值获取容器。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> primarySource<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>primarySource<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>ConfigurableApplicationContext <span class="token operator">:</span> 接口，是ApplicationContext的子接口<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationContext</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-9-ComnandLineRunner-接口-，-ApplcationRunner接口"><a href="#2-9-ComnandLineRunner-接口-，-ApplcationRunner接口" class="headerlink" title="2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口"></a>2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口</h2><p>这两个接口都 有一个run方法。 执行时间在容器对象创建好后， 自动执行run（）方法。</p><p>可以完成自定义的在容器对象创建好的一些操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommandLineRunner</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationRunner</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>ApplicationArguments args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-Web组件"><a href="#3-Web组件" class="headerlink" title="3. Web组件"></a>3. Web组件</h1><p>讲三个内容： 拦截器， Servlet ，Filter</p><h2 id="3-1-拦截器"><a href="#3-1-拦截器" class="headerlink" title="3.1 拦截器"></a>3.1 拦截器</h2><p>拦截器是SpringMVC中一种对象，能拦截器对Controller的请求。</p><p>拦截器框架中有系统的拦截器， 还可以自定义拦截器。  实现对请求预先处理。</p><p>实现自定义拦截器：</p><ol><li><p>创建类实现SpringMVC框架的HandlerInterceptor接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerInterceptor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>2.需在SpringMVC的配置文件中，声明拦截器</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        &lt;mvc:path="url" />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>拦截器类全限定名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SpringBoot中注册拦截器：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加拦截器对象， 注入到容器中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建拦截器对象</span>        HandlerInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定拦截的请求uri地址</span>        String path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"/user/**"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定不拦截的地址</span>        String excludePath  <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"/user/login"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>excludePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-Servlet"><a href="#3-2-Servlet" class="headerlink" title="3.2  Servlet"></a>3.2  Servlet</h2><p>在SpringBoot框架中使用Servlet对象。</p><p>使用步骤：</p><ol><li>创建Servlet类。 创建类继承HttpServlet</li><li>注册Servlet ，让框架能找到Servlet</li></ol><p> 例子：</p><p>1.创建自定义Servlet</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建Servlet类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//使用HttpServletResponse输出数据，应答结果</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter out  <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===执行的是Servlet=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>注册Servlet</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplictionConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义方法， 注册Servlet对象</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public ServletRegistrationBean(T servlet, String... urlMappings)</span>        <span class="token comment" spellcheck="true">//第一个参数是 Servlet对象， 第二个是url地址</span>        <span class="token comment" spellcheck="true">//ServletRegistrationBean bean =</span>                <span class="token comment" spellcheck="true">//new ServletRegistrationBean( new MyServlet(),"/myservlet");</span>        ServletRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;url-pattern></span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-过滤器Filter"><a href="#3-3-过滤器Filter" class="headerlink" title="3.3 过滤器Filter"></a>3.3 过滤器Filter</h2><p>Filter是Servlet规范中的过滤器，可以处理请求， 对请求的参数， 属性进行调整。 常常在过滤器中处理字符编码</p><p>在框架中使用过滤器：</p><ol><li>创建自定义过滤器类</li><li>注册Filter过滤器对象</li></ol><p>例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 自定义过滤器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了MyFilter，doFilter "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册Filter</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplicationConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FilterRegistrationBean bean  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-字符集过滤器"><a href="#3-4-字符集过滤器" class="headerlink" title="3.4 字符集过滤器"></a>3.4 字符集过滤器</h2><p>CharacterEncodingFilter : 解决post请求中乱码的问题</p><p>在SpringMVC框架， 在web.xml 注册过滤器。 配置他的属性。 </p><p>第一种方式：</p><p>使用步骤：</p><ol><li><p>配置字符集过滤器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSystemConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注册Servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyServlet myServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletRegistrationBean reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>myServlet<span class="token punctuation">,</span><span class="token string">"/myservlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注册Filter</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FilterRegistrationBean reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用框架中的过滤器类</span>        CharacterEncodingFilter filter  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定使用的编码方式</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定request ， response都使用encoding的值</span>        filter<span class="token punctuation">.</span><span class="token function">setForceEncoding</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reg<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定 过滤的url地址</span>        reg<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改application.properties文件， 让自定义的过滤器起作用</p></li></ol><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#SpringBoot中默认已经配置了CharacterEncodingFilter。 编码默认ISO-8859-1</span><span class="token comment" spellcheck="true">#设置enabled=false 作用是关闭系统中配置好的过滤器， 使用自定义的CharacterEncodingFilter</span><span class="token attr-name">server.servlet.encoding.enabled</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二种方式</p><p>修改application.properties文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9001</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/myboot</span><span class="token comment" spellcheck="true">#让系统的CharacterEncdoingFilter生效</span><span class="token attr-name">server.servlet.encoding.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#指定使用的编码方式</span><span class="token attr-name">server.servlet.encoding.charset</span><span class="token punctuation">=</span><span class="token attr-value">utf-8</span><span class="token comment" spellcheck="true">#强制request，response都使用charset属性的值</span><span class="token attr-name">server.servlet.encoding.force</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-ORM-操作-MySQL"><a href="#4-ORM-操作-MySQL" class="headerlink" title="4. ORM 操作 MySQL"></a>4. ORM 操作 MySQL</h1><p>使用MyBatis框架操作数据，  在SpringBoot框架集成MyBatis</p><p>使用步骤：</p><ol><li><p>mybatis起步依赖 ： 完成mybatis对象自动配置， 对象放在容器中</p></li><li><p>pom.xml 指定把src&#x2F;main&#x2F;java目录中的xml文件包含到classpath中</p></li><li><p>创建实体类Student</p></li><li><p>创建Dao接口 StudentDao , 创建一个查询学生的方法 </p></li><li><p>创建Dao接口对应的Mapper文件， xml文件， 写sql语句</p></li><li><p>创建Service层对象， 创建StudentService接口和他的实现类。 去dao对象的方法。完成数据库的操作</p></li><li><p>创建Controller对象，访问Service。</p></li><li><p>写application.properties文件</p><p>配置数据库的连接信息。</p></li></ol><h3 id="第一种方式-：-Mapper"><a href="#第一种方式-：-Mapper" class="headerlink" title="第一种方式 ： @Mapper"></a>第一种方式 ： @Mapper</h3><p>@Mapper：放在dao接口的上面， 每个接口都需要使用这个注解。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Mapper：告诉MyBatis这是dao接口，创建此接口的代理对象。 *     位置：在类的上面 */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Student <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"stuId"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二种方式-MapperScan"><a href="#第二种方式-MapperScan" class="headerlink" title="第二种方式  @MapperScan"></a>第二种方式  @MapperScan</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @MapperScan: 找到Dao接口和Mapper文件 *     basePackages：Dao接口所在的包名 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"com.bjpowernode.dao"</span><span class="token punctuation">,</span><span class="token string">"com.bjpowernode.mapper"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三种方式：-Mapper文件和Dao接口分开管理"><a href="#第三种方式：-Mapper文件和Dao接口分开管理" class="headerlink" title="第三种方式： Mapper文件和Dao接口分开管理"></a>第三种方式： Mapper文件和Dao接口分开管理</h3><p> 现在把Mapper文件放在resources目录下</p><p>1）在resources目录中创建子目录 （自定义的） ， 例如mapper</p><p>2）把mapper文件放到 mapper目录中</p><p>3）在application.properties文件中，指定mapper文件的目录</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#指定mapper文件的位置</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mapper/*.xml</span><span class="token comment" spellcheck="true">#指定mybatis的日志</span><span class="token attr-name">mybatis.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>在pom.xml中指定 把resources目录中的文件 ， 编译到目标目录中</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--resources插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四个-事务"><a href="#第四个-事务" class="headerlink" title="第四个  事务"></a>第四个  事务</h3><p>Spring框架中的事务：</p><p>1） 管理事务的对象： 事务管理器（接口， 接口有很多的实现类）</p><p>​      例如：使用Jdbc或mybatis访问数据库，使用的事务管理器：DataSourceTransactionManager</p><p>2 ) 声明式事务：  在xml配置文件或者使用注解说明事务控制的内容</p><p>​     控制事务： 隔离级别，传播行为， 超时时间</p><p>3）事务处理方式：</p><p>​      1） Spring框架中的@Transactional</p><p>​      2)    aspectj框架可以在xml配置文件中，声明事务控制的内容</p><p>​    </p><p>SpringBoot中使用事务： 上面的两种方式都可以。</p><p>1）在业务方法的上面加入@Transactional ,  加入注解后，方法有事务功能了。</p><p>2）明确的在 主启动类的上面 ，加入@EnableTransactionManager</p><p>例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Transactional: 表示方法的有事务支持 *       默认：使用库的隔离级别， REQUIRED 传播行为； 超时时间  -1 *       抛出运行时异常，回滚事务 */</span><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addStudent</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务方法addStudent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rows  <span class="token operator">=</span>  studentDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行sql语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//抛出一个运行时异常， 目的是回滚事务</span>    <span class="token comment" spellcheck="true">//int m   = 10 / 0 ;</span>    <span class="token keyword">return</span> rows<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-接口架构风格-—RESTful"><a href="#5-接口架构风格-—RESTful" class="headerlink" title="5. 接口架构风格 —RESTful"></a>5. 接口架构风格 —RESTful</h1><p>接口： API（Application Programming Interface，应用程序接口）是一些预先定义的接口（如函数、HTTP接口），或指<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F/224122">软件系统</a>不同组成部分衔接的约定。 用来提供<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">应用程序</a>与开发人员基于某<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6">软件</a>或硬件得以访问的一组<a href="https://baike.baidu.com/item/%E4%BE%8B%E7%A8%8B/2390628">例程</a>，而又无需访问源码，或理解内部<a href="https://baike.baidu.com/item/%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/9905789">工作机制</a>的细节。</p><p>接口（API）： 可以指访问servlet， controller的url，   调用其他程序的 函数</p><p>架构风格： api组织方式（样子）</p><p>   就是一个传统的：    <a href="http://localhost:9002/mytrans/addStudent?name=lisi&age=26">http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26</a> </p><p>​                                      在地址上提供了 访问的资源名称addStudent, 在其后使用了get方式传递参数。</p><h3 id="5-1-REST"><a href="#5-1-REST" class="headerlink" title="5.1  REST"></a>5.1  REST</h3><p>RESTful架构风格</p><p>1)REST :  （英文： Representational State Transfer , 中文： 表现层状态转移)。</p><p>   REST：是一种接口的架构风格和设计的理念，不是标准。</p><p>   优点： 更简洁，更有层次</p><p>   表现层状态转移: </p><p>​         表现层就是视图层， 显示资源的， 通过视图页面，jsp等等显示操作资源的结果。</p><p>​          状态： 资源变化</p><p>​         转移： 资源可以变化的。 资源能创建，new状态，  资源创建后可以查询资源， 能看到资源的内容，</p><p>这个资源内容 ，可以被修改， 修改后资源 和之前的不一样。  </p><p>2）REST中的要素：</p><p>   用REST表示资源和对资源的操作。  在互联网中，表示一个资源或者一个操作。 </p><p>   资源使用url表示的， 在互联网， 使用的图片，视频， 文本，网页等等都是资源。</p><p>   资源是用名词表示。</p><p>  对资源： </p><p>​        查询资源： 看，通过url找到资源。 </p><p>​        创建资源： 添加资源</p><p>​        更新资源：更新资源 ，编辑</p><p>​        删除资源： 去除</p><p>​       </p><p> 资源使用url表示，通过名词表示资源。</p><p>​     在url中，使用名词表示资源， 以及访问资源的信息,  在url中，使用“ &#x2F; “ 分隔对资源的信息</p><p>​     <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p> 使用http中的动作（请求方式）， 表示对资源的操作（CURD）</p><p>   GET:  查询资源  –  sql select</p><p>​                 处理单个资源： 用他的单数方式</p><p>​                  <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p>​                 <a href="http://localhost:8080/myboot/student/1001/1">http://localhost:8080/myboot/student/1001/1</a></p><p>​                处理多个资源：使用复数形式</p><p>​                  <a href="http://localhost:8080/myboot/students/1001/1002">http://localhost:8080/myboot/students/1001/1002</a></p><p>​                </p><p>   POST: 创建资源  – sql insert</p><p>​                <a href="http://localhost:8080/myboot/student">http://localhost:8080/myboot/student</a></p><p>​                在post请求中传递数据</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>   PUT： 更新资源  –  sql  update</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student/1<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   DELETE: 删除资源  – sql delete</p><pre><code>```xml</code></pre><p><a href="http://localhost:8080/myboot/student/1">删除1的数据</a></p><pre><code>``````</code></pre><p> 需要的分页，  排序等参数，依然放在  url的后面， 例如 </p><p> <a href="http://localhost:8080/myboot/students?page=1&pageSize=20">http://localhost:8080/myboot/students?page=1&amp;pageSize=20</a></p><p>   &#96;</p><p>3） 一句话说明REST： </p><p>​    使用url表示资源 ，使用http动作操作资源。</p><ol start="4"><li>注解</li></ol><p>  @PathVariable :  从url中获取数据</p><p>  @GetMapping:    支持的get请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.GET)</p><p>  @PostMapping:  支持post请求方式 ，等同于 @RequestMapping( method&#x3D;RequestMethod.POST)</p><p>  @PutMapping:  支持put请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.PUT)</p><p>   @DeleteMapping: 支持delete请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.DELETE)</p><p>  @RestController:  符合注解， 是@Controller 和@ResponseBody组合。</p><p>​               在类的上面使用@RestController ， 表示当前类者的所有方法都加入了 @ResponseBody</p><ol start="5"><li><p>Postman : 测试工具</p><p>使用Postman : 可以测试 get ，post ， put ，delete 等请求</p></li></ol><h3 id="5-2-在页面中或者ajax中，支持put，delete请求"><a href="#5-2-在页面中或者ajax中，支持put，delete请求" class="headerlink" title="5.2  在页面中或者ajax中，支持put，delete请求"></a>5.2  在页面中或者ajax中，支持put，delete请求</h3><p>在SpringMVC中 有一个过滤器， 支持post请求转为put ,delete</p><p>过滤器： org.springframework.web.filter.HiddenHttpMethodFilter</p><p>作用： 把请求中的post请求转为 put ， delete</p><p>实现步骤：</p><ol><li>application.properties(yml) : 开启使用 HiddenHttpMethodFilter 过滤器</li><li>在请求页面中，包含 _method参数， 他的值是 put， delete  ，  发起这个请求使用的post方式</li></ol><h1 id="6-Redis"><a href="#6-Redis" class="headerlink" title="6. Redis"></a>6. Redis</h1><p>Redis ： 一个NoSQL数据库，  常用作 缓存使用 （cache）</p><p>Redis的数据类型： string  ,  hash  ,set  ,zset , list</p><p>Redis是一个中间件： 是一个独立的服务器。</p><p>java中著名的客户端： Jedis ，  lettuce ， Redisson</p><p>Spring,SpringBoot中有 一个RedisTemplate（StringRedisTemplate） ，处理和redis交互  </p><h2 id="6-1-配置Windows版本的redis"><a href="#6-1-配置Windows版本的redis" class="headerlink" title="6.1  配置Windows版本的redis"></a>6.1  配置Windows版本的redis</h2><p>Redis-x64-3.2.100.rar 解压缩到一个 非中文 的目录</p><p>redis-server.exe：服务端， 启动后，不要关闭</p><p>redis-cli.exe：客户端， 访问redis中的数据</p><p>redisclient-win32.x86_64.2.0.jar : Redis图形界面客户端</p><p>执行方式： 在这个文件所在的目录，  执行 java -jar redisclient-win32.x86_64.2.0.jar</p><p>RedisTemplate 使用的  lettuce 客户端库</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--redis起步依赖： 直接在项目中使用RedisTemplate(StringRedisTemplate)--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>data-redis使用的   lettuce 客户端库在程序中使用RedisTemplate类的方法 操作redis数据， 实际就是调用的lettuce 客户端的中的方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-2-对比-StringRedisTemplate-和-RedisTemplate"><a href="#6-2-对比-StringRedisTemplate-和-RedisTemplate" class="headerlink" title="6.2 对比 StringRedisTemplate 和 RedisTemplate"></a>6.2 对比 StringRedisTemplate 和 RedisTemplate</h2><p>StringRedisTemplate ： 把k，v 都是作为String处理， 使用的是String的序列化 ， 可读性好</p><p>RedisTemplate ： 把k，v 经过了序列化存到redis。 k，v 是序列化的内容， 不能直接识别.</p><p>​                                 默认使用的jdk序列化， 可以修改为前提的序列化</p><p> 序列化：把对象转化为可传输的字节序列过程称为序列化。</p><p>反序列化：把字节序列还原为对象的过程称为反序列化。</p><p>为什么需要序列化</p><p>序列化最终的目的是为了对象可以跨平台存储，和进行网络传输。而我们进行跨平台存储和网络传输的方式就是IO，而我们的IO支持的数据格式就是字节数组。我们必须在把对象转成字节数组的时候就制定一种规则（序列化），那么我们从IO流里面读出数据的时候再以这种规则把对象还原回来（反序列化）。</p><p>什么情况下需要序列化</p><p>通过上面我想你已经知道了凡是需要进行“跨平台存储”和”网络传输”的数据，都需要进行序列化。</p><p>本质上存储和网络传输 都需要经过 把一个对象状态保存成一种跨平台识别的字节格式，然后其他的平台才可以通过字节信息解析还原对象信息。</p><p>序列化的方式</p><p>序列化只是一种拆装组装对象的规则，那么这种规则肯定也可能有多种多样，比如现在常见的序列化方式有：</p><p>JDK（不支持跨语言）、JSON、XML、Hessian、Kryo（不支持跨语言）、Thrift、Protofbuff、</p><p>Student( name&#x3D;zs, age&#x3D;20)   —-  { “name”:”zs”, “age”:20 }</p><p>java的序列化： 把java对象转为byte[], 二进制数据</p><p>json序列化：json序列化功能将对象转换为 JSON 格式或从 JSON 格式转换对象。例如把一个Student对象转换为JSON字符串{“name”:”李四”, “age”:29} )，反序列化(将JSON字符串 {“name”:”李四”, “age”:29} 转换为Student对象)</p><p>设置key或者value的序列化方式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用RedisTemplate ，在存取值之前，设置序列化</span><span class="token comment" spellcheck="true">// 设置 key 使用String的序列化</span>redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置 value 的序列化</span>redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-SpringBoot集成Dubbo"><a href="#7-SpringBoot集成Dubbo" class="headerlink" title="7. SpringBoot集成Dubbo"></a>7. SpringBoot集成Dubbo</h1><h2 id="7-1-看-SpringBoot继承Dubbo的文档"><a href="#7-1-看-SpringBoot继承Dubbo的文档" class="headerlink" title="7.1  看 SpringBoot继承Dubbo的文档"></a>7.1  看 SpringBoot继承Dubbo的文档</h2><p> <a href="https://github.com/apache/dubbo-spring-boot-project/blob/master/README_CN.md">https://github.com/apache/dubbo-spring-boot-project/blob/master/README_CN.md</a></p><h2 id="7-2-公共项目"><a href="#7-2-公共项目" class="headerlink" title="7.2  公共项目"></a>7.2  公共项目</h2><p>独立的maven项目： 定义了接口和数据类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1901229007746699151L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Student <span class="token function">queryStudent</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-3-提供者"><a href="#7-3-提供者" class="headerlink" title="7.3  提供者"></a>7.3  提供者</h2><p>创建SpringBoot项目</p><p>1） pom.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--加入公共项目的gav--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjpowernode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>022-interface-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--dubbo依赖--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--zookeeper依赖--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 排除log4j依赖 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）实现接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用dubbo中的注解暴露服务 * @Component 可以不用加 */</span><span class="token annotation punctuation">@DubboService</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> StudentService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>version <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Student <span class="token function">queryStudent</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Student student  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token number">1001</span> <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"------1001-张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1002</span>  <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"#######1002-李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）application.properties</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#配置服务名称 dubbo:application name="名称"</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">studentservice-provider</span><span class="token comment" spellcheck="true">#配置扫描的包， 扫描的@DubboService</span><span class="token attr-name">dubbo.scan.base-packages</span><span class="token punctuation">=</span><span class="token attr-value">com.bjpowernode.service</span><span class="token comment" spellcheck="true">#配置dubbo协议</span><span class="token comment" spellcheck="true">#dubbo.protocol.name=dubbo</span><span class="token comment" spellcheck="true">#dubbo.protocol.port=20881</span><span class="token comment" spellcheck="true">#注册中心</span><span class="token attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://localhost:2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4)在启动类的上面</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDubbo</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProviderApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-4消费者"><a href="#7-4消费者" class="headerlink" title="7.4消费者"></a>7.4消费者</h2><p>创建SpringBoot项目</p><p>1） pom.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--加入公共项目的gav--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjpowernode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>022-interface-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--dubbo依赖--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--zookeeper依赖--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 排除log4j依赖 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建了Controller 或者 Service都可以</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 引用远程服务， 把创建好的代理对象，注入给studentService     */</span>    <span class="token comment" spellcheck="true">//@DubboReference(interfaceClass = StudentService.class,version = "1.0")</span>    <span class="token comment" spellcheck="true">/**     * 没有使用interfaceClass，默认的就是 引用类型的 数据类型      */</span>    <span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> StudentService studentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/query"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">queryStudent</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Student student   <span class="token operator">=</span> studentService<span class="token punctuation">.</span><span class="token function">queryStudent</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"调用远程接口，获取对象："</span><span class="token operator">+</span>student<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）application.properties</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#指定服务名称</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">consumer-application</span><span class="token comment" spellcheck="true">#指定注册中心</span><span class="token attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://localhost:2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-5-练习"><a href="#7-5-练习" class="headerlink" title="7.5 练习"></a>7.5 练习</h2><p>使用的技术： SpringBoot ,Dubbo, Redis, MyBatis</p><p>Student表：</p><p>CREATE TABLE <code>student</code> (<br>  <code>id</code> int(11) NOT NULL AUTO_INCREMENT,<br>  <code>name</code> varchar(255) COLLATE utf8_bin DEFAULT NULL,<br>  <code>phone</code> varchar(11) COLLATE utf8_bin DEFAULT NULL,<br>  <code>age</code> int(11) DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;6 DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_bin;</p><ol><li>注册学生</li></ol><p>​     phone必须唯一， 如果已经存在了手机号， 注册失败的。 </p><p>​                 int addStudent(Student student);</p><p>​                返回值：int</p><p>​                 1： 注册成功</p><p>​                 2 ： 手机号已经存在  </p><p>​                                    </p><p>​      name至少两个字符，</p><p>​      age 必须 大于 0 </p><ol start="2"><li>查询学生，根据id查询，此学生。</li></ol><p>​        先到redis查询学生， 如果redis没有此学生，从数据库查询， 把查询到的学生放入到redis。</p><p>​      后面再次查询这个学生应该从redis就能获取到。</p><p>​        Student  queryStudent(Integer id);</p><ol start="3"><li>使用Dubbo框架，    addStudent, queryStudent 是有服务提供者实现的。</li></ol><p>​    消费者可以是一个Controller ， 调用提供者的两个方法。  实现注册和查询。</p><ol start="4"><li>页面使用html和ajax，jquery。</li></ol><p>​       在html页面中提供 form 注册学生， 提供文本框输入id，进行查询。</p><p>​      注册和查询都使用ajax技术。</p><p>​    html，jquery.js都放到resources&#x2F;static目录中</p><h1 id="8-打包"><a href="#8-打包" class="headerlink" title="8.  打包"></a>8.  打包</h1><h2 id="8-1-打包war"><a href="#8-1-打包war" class="headerlink" title="8.1 打包war"></a>8.1 打包war</h2><p>1.创建了一个jsp应用</p><p>2.修改pom.xml</p><p> 1)指定打包后的文件名称</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--打包后的文件名称--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>myboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2)指定jsp编译目录</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--resources插件， 把jsp编译到指定的目录--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>META-INF/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--使用了mybatis ，而且mapper文件放在src/main/java目录--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--把src/main/resources下面的所有文件，都包含到classes目录--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）执行打包是war</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--打包类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4）主启动类继承SpringBootServletInitializer</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * SpringBootServletInitializer: 继承这个类， 才能使用独立tomcat服务器 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JspApplication</span>  <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>JspApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> SpringApplicationBuilder <span class="token function">configure</span><span class="token punctuation">(</span>SpringApplicationBuilder builder<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span>JspApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）部署war</p><p> 把war放到tomcat等服务器的发布目录中。  tomcat为例， myboot.war放到tomcat&#x2F;webapps目录。</p><h2 id="8-2-打包为jar"><a href="#8-2-打包为jar" class="headerlink" title="8.2 打包为jar"></a>8.2 打包为jar</h2><p>1.创建了一个包含了jsp的项目</p><p>2.修改pom.xml</p><p>​     1) 指定打包后的文件名称</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--打包后的文件名称--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>myboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>指定springboot-maven-plugin版本</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--打包jar， 有jsp文件时，必须指定maven-plugin插件的版本是 1.4.2.RELEASE--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）最后执行 maven clean package</p><p>​       在target目录中，生成jar 文件， 例子是myboot.jar</p><p>​       执行独立的springboot项目  在cmd中 java  -jar  myboot.jar</p><h1 id="9-Thymeleaf-模板引擎"><a href="#9-Thymeleaf-模板引擎" class="headerlink" title="9. Thymeleaf 模板引擎"></a>9. Thymeleaf 模板引擎</h1><p>Thymeleaf： 是使用java开发的模板技术， 在服务器端运行。 把处理后的数据发送给浏览器。</p><p>​         模板是作视图层工作的。  显示数据的。  Thymeleaf是基于Html语言。 Thymleaf语法是应用在</p><p>​        html标签中 。 SpringBoot框架集成Thymealeaf,  使用Thymeleaf代替jsp。</p><p>Thymeleaf 的官方网站：<a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a><br>Thymeleaf 官方手册：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p><p>Thymeleaf学习推荐网址：<a href="http://heavy_code_industry.gitee.io/code_heavy_industry/pro001-javaweb/lecture/chapter08/">http://heavy_code_industry.gitee.io/code_heavy_industry/pro001-javaweb/lecture/chapter08/</a></p><h2 id="9-1-表达式"><a href="#9-1-表达式" class="headerlink" title="9.1 表达式"></a>9.1 表达式</h2><ol><li><p>标准变量表达式 </p><p>语法：  ${key} </p><p>作用： 获取key对于的文本数据，  key 是request作用域中的key ， 使用request.setAttribute(), model.addAttribute()</p><p>在页面中的 html标签中， 使用 th:text&#x3D;”${key}”</p></li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>标准变量表达式:  $<span class="token entity" title="&#123;">&amp;#123;</span>key<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;site&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>key不存在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>获取SysUser对象 属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser.id&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser.name&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser.sex&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名：m男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser.age&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser.getName()&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取姓名使用getXXX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>选择变量表达式（ 星号变量表达式）</p><p>语法：  *{key}</p><p>作用： 获取这个key对应的数据，   *{key}需要和th:object 这个属性一起使用。</p><p>目的是简单获取对象的属性值。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>使用 *<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span> 获取SysUser的属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*&amp;#123;id&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*&amp;#123;name&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*&amp;#123;sex&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*&amp;#123;age&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>使用*<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span>完成的表示 对象的属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*&amp;#123;myuser.name&amp;#125;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>链接表达式</p><p>语法： @{url}</p><p>作用： 表示链接， 可以</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> , <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>..<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="9-2-Thymeleaf属性"><a href="#9-2-Thymeleaf属性" class="headerlink" title="9.2  Thymeleaf属性"></a>9.2  Thymeleaf属性</h2><p>属性是放在html元素中的，就是html元素的属性，加入了th前缀。  属性的作用不变。    加入上th， 属性的值由模板引擎处理了。  在属性可以使用变量表达式</p><p>例如：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/loginServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/loginServlet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;methodAttr&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="9-3-each"><a href="#9-3-each" class="headerlink" title="9.3 each"></a>9.3 each</h2><p>each循环， 可以循环List，Array</p><p>语法：</p><p>在一个html标签中，使用th:each</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合循环成员,循环的状态变量:$&amp;#123;key&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;集合循环成员&amp;#125;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>集合循环成员,循环的状态变量:两个名称都是自定义的。 “循环的状态变量”这个名称可以不定义，默认是"集合循环成员Stat"“循环的状态变量”可以获得循环体的信息：index、count、size、current...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>each循环Map</p><p>在一个html标签中，使用th:each</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合循环成员,循环的状态变量:$&amp;#123;key&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;集合循环成员.key&amp;#125;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;集合循环成员.value&amp;#125;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>集合循环成员,循环的状态变量:两个名称都是自定义的。<br>“循环的状态变量”这个名称可以不定义，默认是”集合循环成员Stat”<br>“循环的状态变量”可以获得循环体的信息：index、count、size、current…<br>key:map集合中的key<br>value：map集合key对应的value值</p></blockquote><h2 id="9-4-th-if"><a href="#9-4-th-if" class="headerlink" title="9.4 th:if"></a>9.4 th:if</h2><p>“th:if”  : 判断语句， 当条件为true， 显示html标签体内， 反之不显示 没有else语句</p><pre class="line-numbers language-xml"><code class="language-xml">语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 10 <span class="token punctuation">></span> 0 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 显示文本内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还有一个 th:unless  和 th:if相反的行为</p><pre class="line-numbers language-xml"><code class="language-xml">语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 10 &lt; 0 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 当条件为false显示标签体内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例子：if</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span> if 使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;sex<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>m<span class="token punctuation">'</span>&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别是男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isLogin&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>已经登录系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;age <span class="token punctuation">></span> 20&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄大于20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--""空字符是true--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;name&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>name是“”<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--null是false--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isOld&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> isOld是null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子： unless</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>unless: 判断条件为false，显示标签体内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;sex<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>f<span class="token punctuation">'</span>&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别是男的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isLogin&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isOld&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> isOld是null <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-5-th-switch"><a href="#9-5-th-switch" class="headerlink" title="9.5  th:switch"></a>9.5  th:switch</h2><p>th:switch 和 java中的swith一样的</p><pre class="line-numbers language-html"><code class="language-html">语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>要比对的值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>值1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        结果1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>值2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        结果2    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        默认结果    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    以上的case只有一个语句执行    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-6-th-inline"><a href="#9-6-th-inline" class="headerlink" title="9.6 th:inline"></a>9.6 th:inline</h2><ol><li><p>内联text：  在html标签外，获取表达式的值</p><p>语法： </p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>显示姓名是：[[$<span class="token entity" title="&#123;">&amp;#123;</span>key<span class="token entity" title="&#125;">&amp;#125;</span>]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>内联 text, 使用内联表达式显示变量的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是[[$<span class="token entity" title="&#123;">&amp;#123;</span>name<span class="token entity" title="&#125;">&amp;#125;</span>]]，年龄是[[$<span class="token entity" title="&#123;">&amp;#123;</span>age<span class="token entity" title="&#125;">&amp;#125;</span>]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;name&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>,年龄是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;age&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>使用内联text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是[[$<span class="token entity" title="&#123;">&amp;#123;</span>name<span class="token entity" title="&#125;">&amp;#125;</span>]],性别是[[$<span class="token entity" title="&#123;">&amp;#123;</span>sex<span class="token entity" title="&#125;">&amp;#125;</span>]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内联javascript</p></li></ol><pre class="line-numbers language-html"><code class="language-html">例子： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">         <span class="token keyword">var</span> myname <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> myage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//alert("获取的模板中数据 "+ myname + ","+myage)</span>        <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"单击事件，获取数据 "</span><span class="token operator">+</span> myname <span class="token operator">+</span> <span class="token string">","</span><span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>sex<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-7-字面量"><a href="#9-7-字面量" class="headerlink" title="9.7  字面量"></a>9.7  字面量</h2><p>例子：</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>文本字面量: 使用单引号括起来的字符串<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>我是<span class="token punctuation">'</span>+$&amp;#123;name&amp;#125;+<span class="token punctuation">'</span>,我所在的城市<span class="token punctuation">'</span>+$&amp;#123;city&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>数字字面量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;20<span class="token punctuation">></span>5&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 20大于 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>boolean字面量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isLogin <span class="token punctuation">=</span><span class="token punctuation">=</span> true&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户已经登录系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>null字面量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser !<span class="token punctuation">=</span> null&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>有myuser数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-8-字符串连接"><a href="#9-8-字符串连接" class="headerlink" title="9.8  字符串连接"></a>9.8  字符串连接</h2><p>连接字符串有两种语法</p><p>1） 语法使用 单引号括起来字符串  ， 使用 + 连接其他的 字符串或者表达式</p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>我是<span class="token punctuation">'</span>+$&amp;#123;name&amp;#125;+<span class="token punctuation">'</span>,我所在的城市<span class="token punctuation">'</span>+$&amp;#123;city&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）语法：使用双竖线， |字符串和表达式|</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>|我是$&amp;#123;name&amp;#125;,我所在城市$&amp;#123;city|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    显示数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>字符串连接方式1：使用单引号括起来的字符串<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>我是<span class="token punctuation">'</span>+$&amp;#123;name&amp;#125;+<span class="token punctuation">'</span>,我所在的城市<span class="token punctuation">'</span>+$&amp;#123;city&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>字符串连接方式2：|字符串和表达式|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>|我是$&amp;#123;name&amp;#125;,所在城市$&amp;#123;city&amp;#125;,其他人$&amp;#123;myuser.name&amp;#125;|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-9-运算符"><a href="#9-9-运算符" class="headerlink" title="9.9 运算符"></a>9.9 运算符</h2><pre class="line-numbers language-xml"><code class="language-xml">算术运 算： + , - - , * , / , %关系比较 : > , &lt; , >= , &lt;= ( gt , lt , ge , le )相等判断： == , != ( eq , ne )<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>使用运算符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;age <span class="token punctuation">></span> 10&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄大于 10 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123; 20 + 30 &amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示运算结果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser <span class="token punctuation">=</span><span class="token punctuation">=</span> null&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>myuser是null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser eq null&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>myuser是null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser ne null&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>myuser不是null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isLogin <span class="token punctuation">=</span><span class="token punctuation">=</span> true ? <span class="token punctuation">'</span>用户已经登录<span class="token punctuation">'</span> : <span class="token punctuation">'</span>用户需要登录<span class="token punctuation">'</span>&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isLogin <span class="token punctuation">=</span><span class="token punctuation">=</span> true ? ( age <span class="token punctuation">></span> 10 ? <span class="token punctuation">'</span>用户是大于10的<span class="token punctuation">'</span> : <span class="token punctuation">'</span>用户年龄比较小<span class="token punctuation">'</span>) : <span class="token punctuation">'</span>用户需要登录<span class="token punctuation">'</span>&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>三元运算符： 表达式  ？ true的结果 : false的结果三元运算符可以嵌套<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-10-内置对象"><a href="#9-10-内置对象" class="headerlink" title="9.10 内置对象"></a>9.10 内置对象</h2><p>文档地址：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#web-context-namespaces-for-requestsession-attributes-etc">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#web-context-namespaces-for-requestsession-attributes-etc</a>.</p><p>#request 表示 HttpServletRequest</p><p>#session 表示 HttpSession对象</p><p>session 表示Map对象的， 是#session的简单表示方式， 用来获取session中指定的key的值</p><p>​               #session.getAttribute(“loginname”) &#x3D;&#x3D; session.loginname</p><p>这些是内置对象，可以在模板文件中直接使用。</p><pre class="line-numbers language-html"><code class="language-html">例子： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">350</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>内置对象#request,#session，session的使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>获取作用域中的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        &lt;p th:text="$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRM项目SSM框架构建（三）</title>
      <link href="/2022/06/24/crm-xiang-mu-ssm-kuang-jia-gou-jian-san/"/>
      <url>/2022/06/24/crm-xiang-mu-ssm-kuang-jia-gou-jian-san/</url>
      
        <content type="html"><![CDATA[<p>完成业务：</p><ul><li>市场活动主页的显示</li><li>创建市场活动</li><li>查询市场活动</li><li>修改市场活动</li><li>删除市场活动</li><li>批量导出市场活动</li><li>批量导入市场活动</li></ul><h3 id="市场活动主页的显示"><a href="#市场活动主页的显示" class="headerlink" title="市场活动主页的显示"></a>市场活动主页的显示</h3><h4 id="Mapper层"><a href="#Mapper层" class="headerlink" title="Mapper层"></a>Mapper层</h4><p>UserMapper.java</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>UserMapper.xml</p><p>在Mybatis逆向工程的基础上加方法（后面的mapper方法都是在Mybatis逆向工程的基础上加）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectAllUsers"</span> resultMap<span class="token operator">=</span><span class="token string">"BaseResultMap"</span><span class="token operator">></span>  select <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span><span class="token operator">/</span><span class="token operator">></span>  from tbl_user  where lock_state<span class="token operator">=</span><span class="token string">'1'</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h4><p>UserService.java</p><pre class="line-numbers language-java"><code class="language-java">    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>UserServiceImpl.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h4><p>ActivityController.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> ActivityService activityService<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> ActivityRemarkService activityRemarkService<span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/workbench/activity/index.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询所有用户</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把数据保存在request中</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"userList"</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//请求转发到市场活动主页面</span>    <span class="token keyword">return</span> <span class="token string">"workbench/activity/index"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前台页面"><a href="#前台页面" class="headerlink" title="前台页面"></a>前台页面</h4><p><strong>workbench&#x2F;index.jsp</strong></p><pre class="line-numbers language-jsp"><code class="language-jsp"><!-- 导航 -->......<li class="liClass"><a href="workbench/activity/index.do" target="workareaFrame"><span class="glyphicon glyphicon-play-circle"></span> 市场活动</a></li>.....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建市场活动并保存"><a href="#创建市场活动并保存" class="headerlink" title="创建市场活动并保存"></a>创建市场活动并保存</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><ol><li><p>用户在市场活动主页面,点击”创建”按钮,弹出创建市场活动的模态窗口;</p></li><li><p>用户在创建市场活动的模态窗口填写表单,点击”保存”按钮,完成创建市场活动的功能.</p><ul><li><p>所有者是动态的(&#x2F;&#x2F;在现实市场活动主页面时，就从数据库中查询出所有用户并且显示在创建的模态窗口中)</p></li><li><p>所有者和名称不能为空</p><ul><li>如果开始日期和结束日期都不为空,则结束日期不能比开始日期小</li></ul></li><li><p>成本只能为非负整数</p></li><li><p>创建成功之后,关闭模态窗口,刷新市场活动列，显示第一页数据，保持每页显示条数不变</p><ul><li>创建失败,提示信息创建失败,模态窗口不关闭,市场活动列表也不刷新</li></ul></li></ul></li></ol><h5 id="最终效果："><a href="#最终效果：" class="headerlink" title="最终效果："></a><strong>最终效果</strong>：</h5><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/QQ%E5%BD%95%E5%B1%8F.2jrs1mynp8sg.gif"></p><h4 id="时序-amp-流程"><a href="#时序-amp-流程" class="headerlink" title="时序&amp;流程"></a>时序&amp;流程</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/%E5%88%9B%E5%BB%BA%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8.4qs3wwy2nl34.webp"></p><h4 id="前台页面-1"><a href="#前台页面-1" class="headerlink" title="前台页面"></a>前台页面</h4><p><strong>workbench&#x2F;activity&#x2F;index.jsp</strong></p><ol><li><p>给“创建”按钮一个id选择器createActivityBtn</p><pre class="line-numbers language-jsp"><code class="language-jsp"><button type="button" class="btn btn-primary" id="createActivityBtn"><span class="glyphicon glyphicon-plus"></span> 创建</button><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在入口函数给“createActivityBtn”按钮添加点击事件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//给"创建"按钮添加单击事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#createActivityBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化工作</span>    <span class="token comment" spellcheck="true">//重置表单</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#createActivityForm"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//弹出创建市场活动的模态窗口</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#createActivityModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>效果：</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1kohhon243uo.webp"></p><h4 id="Mapper层-1"><a href="#Mapper层-1" class="headerlink" title="Mapper层"></a>Mapper层</h4><p><strong>UserMapper.java</strong></p><p>创建查询用户方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 查询所有用户* @return*/</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>UserMapper.xml</strong></p><p>编写查询语句,查询tbl_user表中用户状态正常的所有用户的值</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAllUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    from tbl_user    where lock_state = '1'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ActivityMapper.java</strong></p><p>修改插入方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 保存创建的市场活动*/</span><span class="token keyword">int</span> <span class="token function">insertActivity</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ActivityMapper.xml</strong></p><p>修改插入sql语句</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertActivity<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yyp.crm.workbench.domain.Activity<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    insert into tbl_activity (id, owner, name, start_date,    end_date, cost, description,    create_time, create_by)    values (#<span class="token entity" title="&#123;">&amp;#123;</span>id,jdbcType=CHAR<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>owner,jdbcType=CHAR<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>name,jdbcType=VARCHAR<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>startDate,jdbcType=CHAR<span class="token entity" title="&#125;">&amp;#125;</span>,    #<span class="token entity" title="&#123;">&amp;#123;</span>endDate,jdbcType=CHAR<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>cost,jdbcType=VARCHAR<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>description,jdbcType=VARCHAR<span class="token entity" title="&#125;">&amp;#125;</span>,    #<span class="token entity" title="&#123;">&amp;#123;</span>createTime,jdbcType=CHAR<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>createBy,jdbcType=VARCHAR<span class="token entity" title="&#125;">&amp;#125;</span>)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Service层-1"><a href="#Service层-1" class="headerlink" title="Service层"></a>Service层</h4><p><strong>UserService.java</strong></p><p>创建用户数据查询服务</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>UserServiceImpl.java</strong></p><p>调用userMapper中的selectAllUser方法实现UserService接口的queryAllUsers服务</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ActivityService.java</strong></p><p>创建插入数据服务</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">saveCreateActivity</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ActivityServiceImpl.java</strong></p><p>调用activityMapper中的insertActivity方法实现ActivityService接口的saveCreateActivity服务</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>ActivityMapper activityMapper<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">saveCreateActivity</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> activityMapper<span class="token punctuation">.</span><span class="token function">insertActivity</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Controller层-1"><a href="#Controller层-1" class="headerlink" title="Controller层"></a>Controller层</h4><p><strong>ActivityController.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/workbench/activity/index.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用service层方法，查询所有的用户</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把数据保存到request中</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"userList"</span><span class="token punctuation">,</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//请求转发到市场活动的主页面</span>    <span class="token keyword">return</span> <span class="token string">"workbench/activity/index"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/workbench/activity/saveCreateActivity.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> Object <span class="token function">saveCreateActivity</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>SESSION_USER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//封装参数</span>    activity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>UUIDUtils<span class="token punctuation">.</span><span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    activity<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>DateUtils<span class="token punctuation">.</span><span class="token function">formateDateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    activity<span class="token punctuation">.</span><span class="token function">setCreateBy</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ReturnObject returnObject<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReturnObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用service层方法，保存创建的市场活动</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> activityService<span class="token punctuation">.</span><span class="token function">saveCreateActivity</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据查询结果设置返回值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            returnObject<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>RETURN_OBJECT_CODE_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            returnObject<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>RETURN_OBJECT_CODE_FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>            returnObject<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"系统忙,请稍后重试...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        returnObject<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>RETURN_OBJECT_CODE_FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>        returnObject<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"系统忙,请稍后重试...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回查询结果</span>    <span class="token keyword">return</span> returnObject<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前台页面-2"><a href="#前台页面-2" class="headerlink" title="前台页面"></a>前台页面</h4><p><strong>workbench&#x2F;activity&#x2F;index.jsp</strong></p><p>将创建市场活动的模态窗口的所有者列表改为动态</p><pre class="line-numbers language-jsp"><code class="language-jsp"><c:forEach items="$&#123;userList&#125;" var="u">    <option value="$&#123;u.id&#125;">$&#123;u.name&#125;</option></c:forEach><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>给“保存”按钮一个id选择器saveCreateActivityBtn</p><pre class="line-numbers language-jsp"><code class="language-jsp"><button type="button" class="btn btn-primary" id="saveCreateActivityBtn">保存</button><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在入口函数给“saveCreateActivityBtn”按钮添加点击事件;提交表单前验证表单数据是否满足需求,根据需求对不同状态做出响应</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//给"保存"按钮添加单击事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#saveCreateActivityBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收集参数</span>    <span class="token keyword">var</span> owner<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#create-marketActivityOwner"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> name<span class="token operator">=</span>$<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#create-marketActivityName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> startDate<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#create-startDate"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> endDate<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#create-endDate"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cost<span class="token operator">=</span>$<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#create-cost"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> description<span class="token operator">=</span>$<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#create-description"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//表单验证</span>    <span class="token comment" spellcheck="true">//所有者和名称不能为空</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>owner<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"所有者不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"名称不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果开始日期和结束日期都不为空,则结束日期不能比开始日期小</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>startDate<span class="token operator">!=</span><span class="token string">""</span><span class="token operator">&amp;&amp;</span>endDate<span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用字符串的大小代替日期的大小</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>endDate<span class="token operator">&lt;</span>startDate<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"结束日期不能比开始日期小"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成本只能为非负整数</span>    <span class="token keyword">var</span> regExp<span class="token operator">=</span><span class="token regex">/^(([1-9]\d*)|0)$/</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>regExp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"成本只能为非负整数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送请求</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        url<span class="token punctuation">:</span><span class="token string">'workbench/activity/saveCreateActivity.do'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            owner<span class="token punctuation">:</span>owner<span class="token punctuation">,</span>            name<span class="token punctuation">:</span>name<span class="token punctuation">,</span>            startDate<span class="token punctuation">:</span>startDate<span class="token punctuation">,</span>            endDate<span class="token punctuation">:</span>endDate<span class="token punctuation">,</span>            cost<span class="token punctuation">:</span>cost<span class="token punctuation">,</span>            description<span class="token punctuation">:</span>description        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>        dataType<span class="token punctuation">:</span><span class="token string">'json'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//创建成功之后,关闭模态窗口,刷新市场活动列，显示第一页数据，保持每页显示条数不变</span>        success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>code<span class="token operator">==</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//关闭模态窗口</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#createActivityModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"hide"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//刷新市场活动列，显示第一页数据，保持每页显示条数不变(保留)</span>                <span class="token function">queryActivityByConditionForPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#demo_pag1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bs_pagination</span><span class="token punctuation">(</span><span class="token string">'getOption'</span><span class="token punctuation">,</span> <span class="token string">'rowsPerPage'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建失败,提示信息创建失败,模态窗口不关闭,市场活动列表也不刷新</span>                <span class="token comment" spellcheck="true">//提示信息</span>                <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//模态窗口不关闭</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#createActivityModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以不写。</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="给日期添加日历插件datetimepicker"><a href="#给日期添加日历插件datetimepicker" class="headerlink" title="给日期添加日历插件datetimepicker"></a>给日期添加日历插件datetimepicker</h5><p>利用前端日历插件bootstrap-datetimepicker将日期输入改为下拉选择</p><p>官方文档:<a href="https://www.bootcss.com/p/bootstrap-datetimepicker/">https://www.bootcss.com/p/bootstrap-datetimepicker/</a></p><p>前端引入日历插件</p><ol><li><p>引入jquery、bootscrap框架开发包：.js,.css</p></li><li><p>下载BOOTSTRAP_DATETIMEPICKER插件，拷贝到项目webapp目录下</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>JQUERY<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"jquery/jquery-1.11.1-min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>BOOTSTRAP框架<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"jquery/bootstrap_3.3.0/css/bootstrap.min.css"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"jquery/bootstrap_3.3.0/js/bootstrap.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>BOOTSTRAP_DATETIMEPICKER插件<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"jquery/bootstrap-datetimepicker-master/css/bootstrap-datetimepicker.min.css"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"jquery/bootstrap-datetimepicker-master/js/bootstrap-datetimepicker.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"jquery/bootstrap-datetimepicker-master/locale/bootstrap-datetimepicker.zh-CN.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建容器</p></li></ol><pre class="line-numbers language-jsp"><code class="language-jsp"><div class="form-group">                        <label for="create-startDate" class="col-sm-2 control-label">开始日期</label>                        <div class="col-sm-10" style="width: 300px;">                            <input type="text" class="form-control mydate" name="mydate" id="create-startDate" readonly>                        </div>                        <label for="create-endDate" class="col-sm-2 control-label">结束日期</label>                        <div class="col-sm-10" style="width: 300px;">                            <input type="text" class="form-control mydate" name="mydate" id="create-endDate" readonly>                        </div>                    </div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>入口函数对容器调用工具函数：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".mydate"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">datetimepicker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    language<span class="token punctuation">:</span><span class="token string">'zh-CN'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//语言</span>    format<span class="token punctuation">:</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//日期的格式</span>    minView<span class="token punctuation">:</span> <span class="token string">'month'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//可以选择的最小视图</span>    initialDate<span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//初始化显示的日期</span>    autoclose<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//设置选择完日期或者时间之后，日否自动关闭日历</span>    todayBtn<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//设置是否显示”今天"按钮，默认是false</span>    clearBtn<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token comment" spellcheck="true">//设置是否显示"清空"按钮，默认是false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="查询市场活动"><a href="#查询市场活动" class="headerlink" title="查询市场活动"></a>查询市场活动</h3><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><ol><li><p>当市场活动主页面加载完成之后,显示所有数据的第一页;</p></li><li><p>用户在市场活动主页面填写查询条件,点击”查询”按钮,显示所有符合条件的数据的第一页，保持每页显示条数不变</p></li><li><p>实现翻页功能.</p><ol><li>在市场活动主页面,显示市场活动列表和记录的总条数</li><li>默认每页显示条数:10</li></ol></li></ol><h5 id="最终效果：-1"><a href="#最终效果：-1" class="headerlink" title="最终效果："></a><strong>最终效果</strong>：</h5><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/QQ%E5%BD%95%E5%B1%8F_query.7b6tai0nx5z4.gif"></p><h4 id="时序-amp-流程-1"><a href="#时序-amp-流程-1" class="headerlink" title="时序&amp;流程"></a>时序&amp;流程</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8.27kmnxtddbnk.webp"></p><h4 id="Mapper层-2"><a href="#Mapper层-2" class="headerlink" title="Mapper层"></a>Mapper层</h4><p><strong>ActivityMapper.java</strong></p><p>数据库中需要查询到某页需要展示的数据和符合该条件市场活动的总条数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 根据条件分页查询市场活动的列表     * @param map     * @return     */</span>List<span class="token operator">&lt;</span>Activity<span class="token operator">></span> <span class="token function">selectActivityByConditionForPage</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**     * 根据条件查询市场活动的总条数     * @param map     * @return     */</span><span class="token keyword">int</span> <span class="token function">selectCountOfActivityByCondition</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ActivityMapper.xml</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectActivityByConditionForPage"</span> parameterType<span class="token operator">=</span><span class="token string">"map"</span> resultMap<span class="token operator">=</span><span class="token string">"BaseResultMap"</span><span class="token operator">></span>    select a<span class="token punctuation">.</span>id<span class="token punctuation">,</span>u1<span class="token punctuation">.</span>name as owner<span class="token punctuation">,</span>a<span class="token punctuation">.</span>name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>start_date<span class="token punctuation">,</span>a<span class="token punctuation">.</span>end_date<span class="token punctuation">,</span>a<span class="token punctuation">.</span>cost<span class="token punctuation">,</span>a<span class="token punctuation">.</span>description<span class="token punctuation">,</span>a<span class="token punctuation">.</span>create_time<span class="token punctuation">,</span>    u2<span class="token punctuation">.</span>name as create_by<span class="token punctuation">,</span>a<span class="token punctuation">.</span>edit_time<span class="token punctuation">,</span>u3<span class="token punctuation">.</span>name as edit_by    from tbl_activity a    join tbl_user u1 on a<span class="token punctuation">.</span>owner<span class="token operator">=</span>u1<span class="token punctuation">.</span>id    join tbl_user u2 on a<span class="token punctuation">.</span>create_by<span class="token operator">=</span>u2<span class="token punctuation">.</span>id    left join tbl_user u3 on a<span class="token punctuation">.</span>edit_by<span class="token operator">=</span>u3<span class="token punctuation">.</span>id    <span class="token operator">&lt;</span>where<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"name!=null and name!=''"</span><span class="token operator">></span>            and a<span class="token punctuation">.</span>name like <span class="token string">'%'</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token string">'%'</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"owner!=null and owner!=''"</span><span class="token operator">></span>            and u1<span class="token punctuation">.</span>name like <span class="token string">'%'</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>owner<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token string">'%'</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"startDate!=null and startDate!=''"</span><span class="token operator">></span>            and a<span class="token punctuation">.</span>start_date<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">=</span>#<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>startDate<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"endDate!=null and endDate!=''"</span><span class="token operator">></span>            and a<span class="token punctuation">.</span>end_date<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span>#<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>endDate<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span>    order by a<span class="token punctuation">.</span>create_time desc    limit #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>beginNo<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>#<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>pageSize<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectCountOfActivityByCondition"</span> parameterType<span class="token operator">=</span><span class="token string">"map"</span> resultType<span class="token operator">=</span><span class="token string">"int"</span><span class="token operator">></span>    select <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>    from tbl_activity a    join tbl_user u1 on a<span class="token punctuation">.</span>owner<span class="token operator">=</span>u1<span class="token punctuation">.</span>id    join tbl_user u2 on a<span class="token punctuation">.</span>create_by<span class="token operator">=</span>u2<span class="token punctuation">.</span>id    left join tbl_user u3 on a<span class="token punctuation">.</span>edit_by<span class="token operator">=</span>u3<span class="token punctuation">.</span>id    <span class="token operator">&lt;</span>where<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"name!=null and name!=''"</span><span class="token operator">></span>            and a<span class="token punctuation">.</span>name like <span class="token string">'%'</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token string">'%'</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"owner!=null and owner!=''"</span><span class="token operator">></span>            and u1<span class="token punctuation">.</span>name like <span class="token string">'%'</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>owner<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token string">'%'</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"startDate!=null and startDate!=''"</span><span class="token operator">></span>            and a<span class="token punctuation">.</span>start_date<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">=</span>#<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>startDate<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"endDate!=null and endDate!=''"</span><span class="token operator">></span>            and a<span class="token punctuation">.</span>end_date<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span>#<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>endDate<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Service层-2"><a href="#Service层-2" class="headerlink" title="Service层"></a>Service层</h4><p><strong>ActivityService.java</strong></p><p>创建两个业务,分别是查询活动数据和总数量</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Activity<span class="token operator">></span> <span class="token function">queryActivityByConditionForPage</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">queryCountOfActivityByCondition</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>ActivityServiceImpl.java</strong></p><p>​调用activityMapper中的selectActivityByConditionForPage和selectCountOfActivityByCondition方法实现ActivityService中的queryActivityByConditionForPage和queryCountOfActivityByCondition业务</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Activity<span class="token operator">></span> <span class="token function">queryActivityByConditionForPage</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> activityMapper<span class="token punctuation">.</span><span class="token function">selectActivityByConditionForPage</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">queryCountOfActivityByCondition</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> activityMapper<span class="token punctuation">.</span><span class="token function">selectCountOfActivityByCondition</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Controller层-2"><a href="#Controller层-2" class="headerlink" title="Controller层"></a>Controller层</h4><p><strong>ActivityController.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/workbench/activity/queryActivityByConditionForPage.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> Object <span class="token function">queryActivityByConditionForPage</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String owner<span class="token punctuation">,</span>String startDate<span class="token punctuation">,</span>String endDate<span class="token punctuation">,</span><span class="token keyword">int</span> pageNo<span class="token punctuation">,</span><span class="token keyword">int</span> pageSize<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//封装参数</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"owner"</span><span class="token punctuation">,</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"startDate"</span><span class="token punctuation">,</span>startDate<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"endDate"</span><span class="token punctuation">,</span>endDate<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"beginNo"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>pageNo<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用service层方法，查询数据</span>    List<span class="token operator">&lt;</span>Activity<span class="token operator">></span> activityList<span class="token operator">=</span>activityService<span class="token punctuation">.</span><span class="token function">queryActivityByConditionForPage</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> totalRows<span class="token operator">=</span>activityService<span class="token punctuation">.</span><span class="token function">queryCountOfActivityByCondition</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据查询结果结果，生成响应信息</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> retMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    retMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"activityList"</span><span class="token punctuation">,</span>activityList<span class="token punctuation">)</span><span class="token punctuation">;</span>    retMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"totalRows"</span><span class="token punctuation">,</span>totalRows<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> retMap<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前台页面-3"><a href="#前台页面-3" class="headerlink" title="前台页面"></a>前台页面</h4><p><strong>workbench&#x2F;activity&#x2F;index.jsp</strong></p><p>给“查询”按钮加上id选择器</p><pre class="line-numbers language-jsp"><code class="language-jsp"><button type="button" class="btn btn-default" id="queryActivityBtn">查询</button><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>入口函数中调用queryActivityByConditionForPage函数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//当市场活动主页面加载完成，查询所有数据的第一页以及所有数据的总条数,默认每页显示10条</span><span class="token function">queryActivityByConditionForPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给"查询"按钮添加单击事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#queryActivityBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询所有符合条件数据的第一页以及所有符合条件数据的总条数;</span>    <span class="token function">queryActivityByConditionForPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#demo_pag1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bs_pagination</span><span class="token punctuation">(</span><span class="token string">'getOption'</span><span class="token punctuation">,</span> <span class="token string">'rowsPerPage'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="添加分页插件bs-pagination"><a href="#添加分页插件bs-pagination" class="headerlink" title="添加分页插件bs_pagination"></a>添加分页插件bs_pagination</h5><p>插件描述页面:<a href="https://www.jq22.com/jquery-info1025">https://www.jq22.com/jquery-info1025</a></p><p>在入口写分页显示函数,传入参数翻到第几页pageNo,一页显示多少条内容pageSize，调用分页插件工具函数，显示翻页信息。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">queryActivityByConditionForPage</span><span class="token punctuation">(</span>pageNo<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收集参数</span>    <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#query-name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> owner<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#query-owner"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> startDate<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#query-startDate"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> endDate<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#query-endDate"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// var pageNo=1;</span>    <span class="token comment" spellcheck="true">// var pageSize=10;</span>    <span class="token comment" spellcheck="true">//发送请求</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        url<span class="token punctuation">:</span><span class="token string">'workbench/activity/queryActivityByConditionForPage.do'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span>name<span class="token punctuation">,</span>            owner<span class="token punctuation">:</span>owner<span class="token punctuation">,</span>            startDate<span class="token punctuation">:</span>startDate<span class="token punctuation">,</span>            endDate<span class="token punctuation">:</span>endDate<span class="token punctuation">,</span>            pageNo<span class="token punctuation">:</span>pageNo<span class="token punctuation">,</span>            pageSize<span class="token punctuation">:</span>pageSize        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>        dataType<span class="token punctuation">:</span><span class="token string">'json'</span><span class="token punctuation">,</span>        success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//显示总条数</span>            <span class="token comment" spellcheck="true">//$("#totalRowsB").text(data.totalRows);</span>            <span class="token comment" spellcheck="true">//显示市场活动的列表</span>            <span class="token comment" spellcheck="true">//遍历activityList，拼接所有行数据</span>            <span class="token keyword">var</span> htmlStr<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>            $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>activityList<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                htmlStr<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;tr class=\"active\">"</span><span class="token punctuation">;</span>                htmlStr<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;td>&lt;input type=\"checkbox\" value=\""</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>id<span class="token operator">+</span><span class="token string">"\"/>&lt;/td>"</span><span class="token punctuation">;</span>                htmlStr<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;td>&lt;a style=\"text-decoration: none; cursor: pointer;\" οnclick=\"window.location.href='detail.html';\">"</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"&lt;/a>&lt;/td>"</span><span class="token punctuation">;</span>                htmlStr<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;td>"</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>owner<span class="token operator">+</span><span class="token string">"&lt;/td>"</span><span class="token punctuation">;</span>                htmlStr<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;td>"</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>startDate<span class="token operator">+</span><span class="token string">"&lt;/td>"</span><span class="token punctuation">;</span>                htmlStr<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;td>"</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>endDate<span class="token operator">+</span><span class="token string">"&lt;/td>"</span><span class="token punctuation">;</span>                htmlStr<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;/tr>"</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tBody"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//计算总页数</span>            <span class="token keyword">var</span> totalPages<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>totalRows<span class="token operator">%</span>pageSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                totalPages<span class="token operator">=</span>data<span class="token punctuation">.</span>totalRows<span class="token operator">/</span>pageSize<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                totalPages<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>totalRows<span class="token operator">/</span>pageSize<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//对容器调用bs_pagination工具函数，显示翻页信息</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#demo_pag1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bs_pagination</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                currentPage<span class="token punctuation">:</span>pageNo<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//当前页号,相当于pageNo</span>                rowsPerPage<span class="token punctuation">:</span> pageSize<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//每页显示条数,相当于pageSize</span>                totalRows<span class="token punctuation">:</span>data<span class="token punctuation">.</span>totalRows<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//总条数</span>                totalPages<span class="token punctuation">:</span> totalPages<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//总页数,必填参数.</span>                visiblePageLinks<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//最多可以显示的卡片数</span>                showGoToPage<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否显示"跳转到"部分,默认true--显示</span>                showRowsPerPage<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否显示"每页显示条数"部分。默认true--显示</span>                showRowsInfo<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否显示记录的信息，默认true--显示</span>                <span class="token comment" spellcheck="true">//用户每次切换页号，都自动触发本函数;</span>                <span class="token comment" spellcheck="true">//每次返回切换页号之后的pageNo和pageSize</span>                onChangePage<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span>pageObj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// returns page_num and rows_per_page after a link has clicked</span>                    <span class="token comment" spellcheck="true">//js代码</span>                    <span class="token comment" spellcheck="true">//alert(pageObj.currentPage);</span>                    <span class="token comment" spellcheck="true">//alert(pageObj.rowsPerPage);</span>                    <span class="token function">queryActivityByConditionForPage</span><span class="token punctuation">(</span>pageObj<span class="token punctuation">.</span>currentPage<span class="token punctuation">,</span>pageObj<span class="token punctuation">.</span>rowsPerPage<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除市场活动"><a href="#删除市场活动" class="headerlink" title="删除市场活动"></a>删除市场活动</h3><h4 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h4><ol><li><p>用户在市场活动主页面,选择要删除的市场活动,点击”删除”按钮,弹出确认窗口;</p></li><li><p>用户点击”确定”按钮,完成删除市场活动的功能</p></li></ol><ul><li><p>每次至少删除一条市场活动</p></li><li><p>可以批量删除市场活动</p></li><li><p>删除成功之后,刷新市场活动列表,显示第一页数据,保持每页显示条数不变</p></li><li><p>删除失败,提示信息,列表不刷新</p></li></ul><h5 id="最终效果：-2"><a href="#最终效果：-2" class="headerlink" title="最终效果："></a>最终效果：</h5><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/QQ%E5%BD%95%E5%B1%8F_delete.6n12x47gzb0g.gif"></p><h4 id="时序-amp-流程-2"><a href="#时序-amp-流程-2" class="headerlink" title="时序&amp;流程"></a>时序&amp;流程</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/%E5%88%A0%E9%99%A4%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8.3klw4ctn71c0.webp"></p><h4 id="Mapper层-3"><a href="#Mapper层-3" class="headerlink" title="Mapper层"></a>Mapper层</h4><p><strong>ActivityMapper.java</strong></p><p>根据市场活动id删除对应数据</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 根据ids批量删除市场活动     * @param ids     * @return     */</span><span class="token keyword">int</span> <span class="token function">deleteActivityByIds</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ActivityMapper.xml</strong></p><p>删除可能不止一条数据,遍历传入的id列表,删除所有对应的数据</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>delete id<span class="token operator">=</span><span class="token string">"deleteActivityByIds"</span> parameterType<span class="token operator">=</span><span class="token string">"string"</span><span class="token operator">></span>    delete from tbl_activity where id in    <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"array"</span> item<span class="token operator">=</span><span class="token string">"id"</span> separator<span class="token operator">=</span><span class="token string">","</span> open<span class="token operator">=</span><span class="token string">"("</span> close<span class="token operator">=</span><span class="token string">")"</span><span class="token operator">></span>        #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>delete<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Service层-3"><a href="#Service层-3" class="headerlink" title="Service层"></a>Service层</h4><p><strong>ActivityService.java</strong></p><p>创建根据id删除市场活动数据的业务</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">deleteActivityByIds</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ActivityServiceImpl.java</strong></p><p>调用activityMapper中的deleteActivityByIds方法实现deleteActivityByIds中的deleteActivityByIds业务</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteActivityByIds</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> activityMapper<span class="token punctuation">.</span><span class="token function">deleteActivityByIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Controller层-3"><a href="#Controller层-3" class="headerlink" title="Controller层"></a>Controller层</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/workbench/activity/deleteActivityIds.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> Object <span class="token function">deleteActivityIds</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ReturnObject returnObject<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReturnObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用service层方法，删除市场活动</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> activityService<span class="token punctuation">.</span><span class="token function">deleteActivityByIds</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            returnObject<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>RETURN_OBJECT_CODE_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            returnObject<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>RETURN_OBJECT_CODE_FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>            returnObject<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"系统忙，请稍后重试...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        returnObject<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>RETURN_OBJECT_CODE_FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>        returnObject<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"系统忙，请稍后重试...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> returnObject<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前台页面-4"><a href="#前台页面-4" class="headerlink" title="前台页面"></a>前台页面</h4><p><strong>workbench&#x2F;activity&#x2F;index.jsp</strong></p><ol><li><p>给全选框加上id选择器</p><pre class="line-numbers language-jsp"><code class="language-jsp"><td><input type="checkbox" id="checkAll"/></td><td>名称</td><td>所有者</td><td>开始日期</td><td>结束日期</td><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>给”全选”按钮添加单击事件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//给"全选"按钮添加单击事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkAll"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果"全选"按钮是选中状态，则列表中所有checkbox都选中</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tBody input[type='checkbox']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取消全选</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tBody"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token string">"input[type='checkbox']"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// alert("debug");</span>    <span class="token comment" spellcheck="true">//如果列表中的所有checkbox都选中，则"全选"按钮也选中</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tBody input[type='checkbox']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tBody input[type='checkbox']:checked"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkAll"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果列表中的所有checkbox至少有一个没选中，则"全选"按钮也取消</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkAll"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>给”删除”按钮添加单击事件，完成:获取所有选择活动的id;确保id数量＞1;向后台发起删除请求;根据删除情况做出响应</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//给"删除"按钮添加单击事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#deleteActivityBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收集参数</span>    <span class="token comment" spellcheck="true">//获取列表中所有被选中的checkbox</span>    <span class="token keyword">var</span> chekkedIds<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tBody input[type='checkbox']:checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>chekkedIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请选择要删除的市场活动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"确定删除吗？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ids<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>chekkedIds<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//id=xxxx&amp;id=xxx&amp;.....&amp;id=xxx&amp;</span>            ids<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"id="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">"&amp;"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ids<span class="token operator">=</span>ids<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>ids<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//id=xxxx&amp;id=xxx&amp;.....&amp;id=xxx</span>        <span class="token comment" spellcheck="true">//发送请求</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            url<span class="token punctuation">:</span><span class="token string">'workbench/activity/deleteActivityIds.do'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span>ids<span class="token punctuation">,</span>            type<span class="token punctuation">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>            dataType<span class="token punctuation">:</span><span class="token string">'json'</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>code<span class="token operator">==</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//刷新市场活动列表,显示第一页数据,保持每页显示条数不变</span>                    <span class="token function">queryActivityByConditionForPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#demo_pag1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bs_pagination</span><span class="token punctuation">(</span><span class="token string">'getOption'</span><span class="token punctuation">,</span> <span class="token string">'rowsPerPage'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//提示信息</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="修改市场活动"><a href="#修改市场活动" class="headerlink" title="修改市场活动"></a>修改市场活动</h3><h4 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h4><ol><li>​用户在市场活动主页面,选择要修改的市场活动,点击”修改”按钮,弹出修改市场活动的模态窗口;</li><li>​用户在修改市场活动的模态窗口填写表单,点击”更新”按钮,完成修改市场活动的功能.<ul><li>每次能且只能修改一条市场活动</li><li>所有者 动态的</li><li>表单验证(同创建)</li><li>修改成功之后,关闭模态窗口,刷新市场活动列表,保持页号和每页显示条数都不变</li><li>修改失败,提示信息,模态窗口不关闭,列表也不刷新</li></ul></li></ol><h5 id="最终效果：-3"><a href="#最终效果：-3" class="headerlink" title="最终效果："></a>最终效果：</h5><p>​<img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/modify.224l5tv8rlb4.gif"></p><h4 id="时序-amp-流程-3"><a href="#时序-amp-流程-3" class="headerlink" title="时序&amp;流程"></a>时序&amp;流程</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/%E4%BF%AE%E6%94%B9%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8.jtvp0vqmp5c.webp"></p><h4 id="Mapper层-4"><a href="#Mapper层-4" class="headerlink" title="Mapper层"></a>Mapper层</h4><p><strong>ActivityMapper.java</strong></p><pre class="line-numbers language-java"><code class="language-java">Activity <span class="token function">selectActivityById</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ActivityMapper.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectActivityById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    from tbl_activity    where id=#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Service层-4"><a href="#Service层-4" class="headerlink" title="Service层"></a>Service层</h4><p><strong>ActivityService.java</strong></p><pre class="line-numbers language-java"><code class="language-java">Activity <span class="token function">queryActivityById</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ActivityServiceImpl.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Activity <span class="token function">queryActivityById</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> activityMapper<span class="token punctuation">.</span><span class="token function">selectActivityById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Controller层-4"><a href="#Controller层-4" class="headerlink" title="Controller层"></a>Controller层</h4><p>ActivityController.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/workbench/activity/queryActivityById.do"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> Object <span class="token function">queryActivityById</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Activity activity <span class="token operator">=</span> activityService<span class="token punctuation">.</span><span class="token function">queryActivityById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> activity<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前台页面-5"><a href="#前台页面-5" class="headerlink" title="前台页面"></a>前台页面</h4><p><strong><strong>workbench&#x2F;activity&#x2F;index.jsp</strong></strong></p><pre class="line-numbers language-jsp"><code class="language-jsp">//给修改按钮添加单击事件$("#editActivityBtn").click(function ()&#123;   //收集参数，获取列表中被选中的checkbox   var checkedIds=$("#tBody input[type='checkbox']:checked");   if (checkedIds.size()==0)&#123;      alert("请选中要修改的市场活动");      return;   &#125;   if (checkedIds.size()>1)&#123;      alert("每次只能修改一条市场活动");      return;   &#125;   //var id = checkedIds.val();   //var id = checkedIds.get(0).value;   var id = checkedIds[0].value;   //发送请求   $.ajax(&#123;      url:'workbench/activity/queryActivityById.do',      data:&#123;         id:id      &#125;,      type:'post',      dataType:'json',      success:function (data)&#123;         //把市场活动信息显示在修改的模态窗口上         $("#edit-id").val(data.id);         $("#edit-marketActivityOwner").val(data.owner);         $("#edit-marketActivityName").val(data.name);         $("#edit-startTime").val(data.startDate);         $("#edit-endTime").val(data.endDate);         $("#edit-cost").val(data.cost);         $("#edit-description").val(data.description);         //弹出模态窗口         $("#editActivityModal").modal("show");      &#125;   &#125;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入市场活动"><a href="#导入市场活动" class="headerlink" title="导入市场活动"></a>导入市场活动</h3><h4 id="需求分析-4"><a href="#需求分析-4" class="headerlink" title="需求分析"></a>需求分析</h4><ol><li><p>用户在市场活动主页面,点击”导入”按钮,弹出导入市场活动的模态窗口;</p><ol start="2"><li>用户在导入市场活动的模态窗口选择要上传的文件,点击”导入”按钮,完成导入市场活动的功能.</li></ol><ul><li>只支持.xls</li><li>文件大小不超过5MB</li><li>导入成功之后,提示成功导入记录条数,关闭模态窗口,刷新市场活动列表,显示第一页数据,保持每页显示条数不变</li><li>导入失败,提示信息,模态窗口不关闭,列表也不刷新</li></ul></li></ol><h4 id="时序-amp-流程-4"><a href="#时序-amp-流程-4" class="headerlink" title="时序&amp;流程"></a>时序&amp;流程</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/%E5%AF%BC%E5%85%A5%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8.6x5si5ahgvi8.webp"></p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>配置springMVC的文件上传解析器</p><p><strong>applicationContext-mvc.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置文件上传解析器 id:必须是multipartResolver--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#&amp;#123;1024*1024*5&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于excel文件操作的工具类</p><p><strong>HSSFUtils.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getCellValueForStr</span><span class="token punctuation">(</span>HSSFCell cell<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String ret<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>HSSFCell<span class="token punctuation">.</span>CELL_TYPE_STRING<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ret<span class="token operator">=</span>cell<span class="token punctuation">.</span><span class="token function">getStringCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>HSSFCell<span class="token punctuation">.</span>CELL_TYPE_NUMERIC<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ret<span class="token operator">=</span>cell<span class="token punctuation">.</span><span class="token function">getNumericCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>HSSFCell<span class="token punctuation">.</span>CELL_TYPE_BOOLEAN<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ret<span class="token operator">=</span>cell<span class="token punctuation">.</span><span class="token function">getBooleanCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>HSSFCell<span class="token punctuation">.</span>CELL_TYPE_FORMULA<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ret<span class="token operator">=</span>cell<span class="token punctuation">.</span><span class="token function">getCellFormula</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ret<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mapper层-5"><a href="#Mapper层-5" class="headerlink" title="Mapper层"></a>Mapper层</h4><p><strong>ActivityMapper.java</strong></p><p>插入所有市场活动数据</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">insertActivityByList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Activity<span class="token operator">></span> activityList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ActivityMapper.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertActivityByList<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yyp.crm.workbench.domain.Activity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into tbl_activity(id, owner, name, start_date, end_date, cost, description, create_time, create_by)    values    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>obj<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        (#<span class="token entity" title="&#123;">&amp;#123;</span>obj.id<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>obj.owner<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>obj.name<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>obj.startDate<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>obj.endDate<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>obj.cost<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>obj.description<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>obj.createTime<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>obj.createBy<span class="token entity" title="&#125;">&amp;#125;</span>)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Service层-5"><a href="#Service层-5" class="headerlink" title="Service层"></a>Service层</h4><p><strong>ActivityService.java</strong></p><p>保存插入的市场活动列表</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">saveCreateActivityByList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Activity<span class="token operator">></span> activityList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ActivityServiceImpl.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">saveCreateActivityByList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Activity<span class="token operator">></span> activityList<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> activityMapper<span class="token punctuation">.</span><span class="token function">insertActivityByList</span><span class="token punctuation">(</span>activityList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Controller层-5"><a href="#Controller层-5" class="headerlink" title="Controller层"></a>Controller层</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/workbench/activity/importActivity.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> Object <span class="token function">importActivity</span><span class="token punctuation">(</span>MultipartFile activityFile<span class="token punctuation">,</span> String userName<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"userName="</span><span class="token operator">+</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>    User user<span class="token operator">=</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>SESSION_USER<span class="token punctuation">)</span><span class="token punctuation">;</span>    ReturnObject returnObject<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReturnObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        InputStream is<span class="token operator">=</span>activityFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HSSFWorkbook wb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据wb获取HSSFSheet对象，封装了一页的所有信息</span>        HSSFSheet sheet<span class="token operator">=</span>wb<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//页的下标，下标从0开始，依次增加</span>        <span class="token comment" spellcheck="true">//根据sheet获取HSSFRow对象，封装了一行的所有信息</span>        HSSFRow row<span class="token operator">=</span>null<span class="token punctuation">;</span>        HSSFCell cell<span class="token operator">=</span>null<span class="token punctuation">;</span>        Activity activity<span class="token operator">=</span>null<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Activity<span class="token operator">></span> activityList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>sheet<span class="token punctuation">.</span><span class="token function">getLastRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sheet.getLastRowNum()：最后一行的下标</span>            row<span class="token operator">=</span>sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//行的下标，下标从0开始，依次增加</span>            activity<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            activity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>UUIDUtils<span class="token punctuation">.</span><span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            activity<span class="token punctuation">.</span><span class="token function">setOwner</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            activity<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>DateUtils<span class="token punctuation">.</span><span class="token function">formateDateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            activity<span class="token punctuation">.</span><span class="token function">setCreateBy</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>row<span class="token punctuation">.</span><span class="token function">getLastCellNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//row.getLastCellNum():最后一列的下标+1</span>                <span class="token comment" spellcheck="true">//根据row获取HSSFCell对象，封装了一列的所有信息</span>                cell<span class="token operator">=</span>row<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//列的下标，下标从0开始，依次增加</span>                <span class="token comment" spellcheck="true">//获取列中的数据</span>                String cellValue<span class="token operator">=</span> HSSFUtils<span class="token punctuation">.</span><span class="token function">getCellValueForStr</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    activity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>cellValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    activity<span class="token punctuation">.</span><span class="token function">setStartDate</span><span class="token punctuation">(</span>cellValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    activity<span class="token punctuation">.</span><span class="token function">setEndDate</span><span class="token punctuation">(</span>cellValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    activity<span class="token punctuation">.</span><span class="token function">setCost</span><span class="token punctuation">(</span>cellValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    activity<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>cellValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//每一行中所有列都封装完成之后，把activity保存到list中</span>            activityList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用service层方法，保存市场活动</span>        <span class="token keyword">int</span> ret<span class="token operator">=</span>activityService<span class="token punctuation">.</span><span class="token function">saveCreateActivityByList</span><span class="token punctuation">(</span>activityList<span class="token punctuation">)</span><span class="token punctuation">;</span>        returnObject<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>RETURN_OBJECT_CODE_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        returnObject<span class="token punctuation">.</span><span class="token function">setRetData</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        returnObject<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>RETURN_OBJECT_CODE_FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>        returnObject<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"系统忙，请稍后重试...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> returnObject<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前台页面-6"><a href="#前台页面-6" class="headerlink" title="前台页面"></a>前台页面</h4><p><strong>workbench&#x2F;activity&#x2F;index.jsp</strong></p><p>给”导入”按钮添加单击事件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//给"导入"按钮添加单击事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#importActivityBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收集参数</span>    <span class="token keyword">var</span> activityFileName<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#activityFile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> suffix<span class="token operator">=</span>activityFileName<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>activityFileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//xls,XLS,Xls,xLs,....</span>    <span class="token comment" spellcheck="true">//表单验证</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>suffix<span class="token operator">!=</span><span class="token string">"xls"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"只支持xls文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> activityFile<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#activityFile"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>activityFile<span class="token punctuation">.</span>size<span class="token operator">></span><span class="token number">5</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"文件大小不超过5MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//FormData是ajax提供的接口,可以模拟键值对向后台提交参数;</span>    <span class="token comment" spellcheck="true">//FormData最大的优势是不但能提交文本数据，还能提交二进制数据</span>    <span class="token keyword">var</span> formData<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"activityFile"</span><span class="token punctuation">,</span>activityFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span><span class="token string">"元昱鹏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送请求</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        url<span class="token punctuation">:</span><span class="token string">'workbench/activity/importActivity.do'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span>formData<span class="token punctuation">,</span>        processData<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//设置ajax向后台提交参数之前，是否把参数统一转换成字符串：true--是,false--不是,默认是true</span>        contentType<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//设置ajax向后台提交参数之前，是否把所有的参数统一按urlencoded编码：true--是,false--不是，默认是true</span>        type<span class="token punctuation">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>        dataType<span class="token punctuation">:</span><span class="token string">'json'</span><span class="token punctuation">,</span>        success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>code<span class="token operator">==</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//提示成功导入记录条数</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"成功导入"</span><span class="token operator">+</span>data<span class="token punctuation">.</span>retData<span class="token operator">+</span><span class="token string">"条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//关闭模态窗口</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#importActivityModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"hide"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//刷新市场活动列表,显示第一页数据,保持每页显示条数不变</span>                <span class="token function">queryActivityByConditionForPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#demo_pag1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bs_pagination</span><span class="token punctuation">(</span><span class="token string">'getOption'</span><span class="token punctuation">,</span> <span class="token string">'rowsPerPage'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//提示信息</span>                <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//模态窗口不关闭</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#importActivityModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导出市场活动"><a href="#导出市场活动" class="headerlink" title="导出市场活动"></a>导出市场活动</h3><h4 id="需求分析-5"><a href="#需求分析-5" class="headerlink" title="需求分析"></a>需求分析</h4><ol><li><p>用户在市场活动主页面,选择要导出的市场活动,点击”选择导出”按钮,把所有选择的数据生成一个excel文件,弹出文件下载的对话框;</p></li><li><p>用户选择要保存的目录,完成选择导出市场活动的功能.</p></li></ol><ul><li><p>每次至少选择导出一条记录</p></li><li><p>导出成功之后,页面不刷新</p></li></ul><h4 id="时序-amp-流程-5"><a href="#时序-amp-流程-5" class="headerlink" title="时序&amp;流程"></a>时序&amp;流程</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/%E5%AF%BC%E5%87%BA%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8.5knmpxziyf0g.webp"></p><h4 id="Mapper层-6"><a href="#Mapper层-6" class="headerlink" title="Mapper层"></a>Mapper层</h4><p><strong>ActivityMapper.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 根据ids查询市场活动     * @param ids     * @return     */</span>List<span class="token operator">&lt;</span>Activity<span class="token operator">></span> <span class="token function">selectActivityByIds</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ActivityMapper.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectActivityByIds<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    from tbl_activity    where id in    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Service层-6"><a href="#Service层-6" class="headerlink" title="Service层"></a>Service层</h4><p><strong>ActivityService.java</strong></p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Activity<span class="token operator">></span> <span class="token function">queryActivityByIds</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ActivityServiceImpl.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Activity<span class="token operator">></span> <span class="token function">queryActivityByIds</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> activityMapper<span class="token punctuation">.</span><span class="token function">selectActivityByIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Controller层-6"><a href="#Controller层-6" class="headerlink" title="Controller层"></a>Controller层</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/workbench/activity/exportActivitysByIds.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exportActivitysByIds</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String checkId<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"checkId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收的checkid："</span><span class="token operator">+</span>checkId<span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token operator">=</span>checkId<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//切割字符串返回数组</span>    <span class="token comment" spellcheck="true">//调用service层方法，根据id查询市场活动</span>    List<span class="token operator">&lt;</span>Activity<span class="token operator">></span> activityList <span class="token operator">=</span> activityService<span class="token punctuation">.</span><span class="token function">queryActivityByIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建exel文件，并且把activityList写入到excel文件中</span>    HSSFWorkbook wb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HSSFSheet sheet<span class="token operator">=</span>wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"市场活动列表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HSSFRow row<span class="token operator">=</span>sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HSSFCell cell<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第一行表头</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> titles <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"ID"</span><span class="token punctuation">,</span><span class="token string">"所有者"</span><span class="token punctuation">,</span><span class="token string">"名称"</span><span class="token punctuation">,</span><span class="token string">"开始日期"</span><span class="token punctuation">,</span><span class="token string">"结束日期"</span><span class="token punctuation">,</span><span class="token string">"成本"</span><span class="token punctuation">,</span><span class="token string">"描述"</span><span class="token punctuation">,</span><span class="token string">"创建时间"</span><span class="token punctuation">,</span><span class="token string">"创建者"</span><span class="token punctuation">,</span><span class="token string">"修改时间"</span><span class="token punctuation">,</span><span class="token string">"修改者"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> titles<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cell<span class="token operator">=</span>row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>titles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历activityList，创建HSSFRow对象，生成所有的数据行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>activityList<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> activityList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Activity activity<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>activityList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            activity<span class="token operator">=</span>activityList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//每遍历出一个activity，生成一行</span>            row<span class="token operator">=</span>sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//每一行创建11列，每一列的数据从activity中获取</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> contents <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>activity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activity<span class="token punctuation">.</span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activity<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activity<span class="token punctuation">.</span><span class="token function">getStartDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activity<span class="token punctuation">.</span><span class="token function">getEndDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activity<span class="token punctuation">.</span><span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                 activity<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activity<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activity<span class="token punctuation">.</span><span class="token function">getCreateBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activity<span class="token punctuation">.</span><span class="token function">getEditTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activity<span class="token punctuation">.</span><span class="token function">getEditBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> contents<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cell<span class="token operator">=</span>row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>contents<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把生成的excel文件下载到客户端</span>    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename=activityList.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OutputStream out<span class="token operator">=</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//关闭资源</span>    wb<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前台页面-7"><a href="#前台页面-7" class="headerlink" title="前台页面"></a>前台页面</h4><p><strong>workbench&#x2F;activity&#x2F;index.jsp</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//给"选择导出"按钮添加单击事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#exportActivityXzBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收集参数</span>    <span class="token comment" spellcheck="true">//获取列表中所有被选中的checkbox</span>    <span class="token keyword">var</span> chekkedIds<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tBody input[type='checkbox']:checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>chekkedIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请选择要导出的市场活动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//拼接字符串</span>    <span class="token keyword">var</span> checkId<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type='checkbox']:checked"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        checkId<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选中额框的值给定义的数组</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//发送同步请求</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"workbench/activity/exportActivitysByIds.do?checkId="</span><span class="token operator">+</span>checkId<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复习知识点"><a href="#复习知识点" class="headerlink" title="复习知识点"></a>复习知识点</h3><h4 id="1）页面切割技术"><a href="#1）页面切割技术" class="headerlink" title="1）页面切割技术"></a>1）页面切割技术</h4><ul><li><p><code>&lt;frameset&gt;</code>和<code>&lt;frame&gt;</code></p><ul><li><frameset>：用来切割页面<pre class="line-numbers language-css"><code class="language-css">&lt;frameset cols=<span class="token string">"20%,60%,20%"</span> rows=<span class="token string">"10%,80%,10%"</span>><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><frame>：显示页面<pre class="line-numbers language-css"><code class="language-css">&lt;frame src=<span class="token string">"url"</span>>        &lt;frameset cols=<span class="token string">"20%,60%,20%"</span>>            &lt;frame src=<span class="token string">"url1"</span> name=<span class="token string">"f1"</span>>            &lt;frame src=<span class="token string">"url2"</span> name=<span class="token string">"f2"</span>>            &lt;frame src=<span class="token string">"url3"</span> name=<span class="token string">"f3"</span>>        &lt;/frameset>&lt;a href=<span class="token string">"url"</span> target=<span class="token string">"f3"</span>>test&lt;/a><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>每一个<frame>标签就是一个独立的浏览器窗口</li></ul></li></ul><p></p></li><li><p><code>&lt;div&gt;</code>和<code>&lt;iframe&gt;</code></p><ul><li><p><code>&lt;div&gt;</code>：切割页面</p><pre class="line-numbers language-css"><code class="language-css">&lt;div style=<span class="token string">"height:10%;width=20%"</span>><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>&lt;iframe&gt;</code>:显示页面</p><pre class="line-numbers language-css"><code class="language-css">&lt;div style=<span class="token string">"height:10%;width=20%"</span>>        &lt;iframe href=<span class="token string">"url"</span>>&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>模态窗口</p><ul><li><p>模拟的窗口,本质上是<code>&lt;div&gt;</code>，通过设置z-index大小来实现的</p><ul><li>初始时，z-index初始参数是&lt;0，所以不显示</li><li>需要显示时，z-index值设置成&gt;0即可</li><li>bootstrap来控制z-index的大小</li></ul></li><li><p>控制模态窗口的显示与隐藏:</p><ul><li><p>方式一：通过标签的属性data-toggle&#x3D;”modal” data-target&#x3D;”模态窗口的id”</p></li><li><p>方式二：通过js函数控制</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token function">选择器</span><span class="token punctuation">(</span>选中div<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示选中的模态窗口</span> <span class="token function">选择器</span><span class="token punctuation">(</span>选中div<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"hide"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭选中的模态窗口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>方式三：通过标签的属性data-dismiss&#x3D;””</p><ul><li>点击添加了data-dismiss&#x3D;””属性的标签，自动关闭该标签所在的模态窗口</li></ul></li></ul></li><li><p>模态窗口的意义</p><ul><li>模态窗口本质上就是原来页面中的一个<code>&lt;div&gt;</code>，只有一个页面;所有的操作都是在同一个页面中完成()</li></ul></li></ul></li></ul><h4 id="2）正则表达式"><a href="#2）正则表达式" class="headerlink" title="2）正则表达式"></a>2）正则表达式</h4><ul><li><p>语言，语法：定义字符串的匹配模式，可以用来判断指定的具体字符串是否符合匹配模式。</p></li><li><p>语法通则：</p><ul><li><p>&#x2F;&#x2F;:在js中定义一个正则表达式. var regExp&#x3D;&#x2F;…&#x2F;;</p></li><li><p>^：匹配字符串的开头位置</p></li><li><p>$: 匹配字符串的结尾</p></li><li><p>[]:匹配指定字符集中的一位字符.</p><ul><li>var regExp&#x3D;&#x2F;^[abc]$&#x2F;;</li><li>var regExp&#x3D;&#x2F;^[a-z0-9]$&#x2F;;</li></ul></li><li><p>{}:匹配次数</p><ul><li>var regExp&#x3D;&#x2F;^[abc]{5}$&#x2F;;</li><li>{m}:匹配m此</li><li>{m,n}：匹配m次到n次</li><li>{m,}：匹配m次或者更多次</li></ul></li><li><p>特殊符号：</p><ul><li>\d:匹配一位数字，相当于[0-9]</li><li>\D:匹配一位非数字</li><li>\w：匹配所有字符，包括字母、数字、下划线。</li><li>\W:匹配非字符，除了字母、数字、下划线之外的字符。</li></ul></li><li><p>*:匹配0次或者多次，相当于{0,}</p><ul><li>+:匹配1次或者多次，相当于{1,}</li></ul></li><li><p>?:匹配0次或者1次，相当于{0,1}</p></li></ul></li></ul><h4 id="3）前端插件使用步骤"><a href="#3）前端插件使用步骤" class="headerlink" title="3）前端插件使用步骤"></a>3）前端插件使用步骤</h4><p>1)引入开发包：.js,.css     </p><ol><li>引入jquery、boot scrap包到jsp文件中：</li></ol><pre class="line-numbers language-jsp"><code class="language-jsp"><!--JQUERY--><script type="text/javascript" src="jquery/jquery-1.11.1-min.js"></script><!--BOOTSTRAP框架--><link rel="stylesheet" type="text/css" href="jquery/bootstrap_3.3.0/css/bootstrap.min.css"><script type="text/javascript" src="jquery/bootstrap_3.3.0/js/bootstrap.min.js"></script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>下载插件开发包并引入jsp</p><pre class="line-numbers language-jsp"><code class="language-jsp"><!--BOOTSTRAP_DATETIMEPICKER插件--><link rel="stylesheet" type="text/css" href="jquery/bootstrap-datetimepicker-master/css/bootstrap-datetimepicker.min.css"><script type="text/javascript" src="jquery/bootstrap-datetimepicker-master/locale/bootstrap-datetimepicker.zh-CN.js"></script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p> 2)创建容器：<input type="text"><div></p><p> 3)当容器加载完成之后，对容器调用工具函数.</p><h4 id="4）分页查询过程"><a href="#4）分页查询过程" class="headerlink" title="4）分页查询过程"></a>4）分页查询过程</h4><ol><li>queryActivityByConditionForPage(1,10)<br>   |-&gt;把pageNo,pageSize和查询条件一起发送到后台，查询数据<br>   |-&gt;data<br>        |-&gt;activityList：遍历list，显示列表<br>                 |-&gt;totalRows:调用工具函数，显示翻页信息</li><li>当用户切换页号或者每页显示条数时：pageNo,pageSize<br>   |-&gt;翻页信息会自动变化<br>   |-&gt;手动刷新列表：<br>          |-&gt;把pageNo,pageSize和查询条件一起发送到后台，查询数据<br>                    |-&gt;data<br>                           |-&gt;activityList：遍历list，显示列表<br>                           |-&gt;totalRows:调用工具函数，显示翻页信息</li></ol><p><strong>data提交参数</strong>：</p><p>ajax向后台发送请求时，可以通过data提交参数,data的数据格式有三种格式：</p><ol><li><pre><code>data:&#123;    k1:v1,    k2:v2,    .... &#125;</code></pre><ul><li>劣势：只能向后台提交一个参数名对应一个参数值的数据，不能向后台提交一个参数名对应多个参数值的数据</li><li>优势： 操作简单</li></ul></li><li><pre><code>data:k1=v1&amp;k2:v2&amp;....</code></pre><ul><li><p>劣势：操作麻烦</p></li><li><p>优势：不但能够向后台提交一个参数名对应一个参数值的数据，还能向后台提交一个参数名对应多个参数值的数据。</p></li></ul></li><li><pre><code>data:FormData对象</code></pre><ul><li>优势：不但能提交字符串数据， 还能提交二进制数据</li><li>劣势：操作更复杂</li></ul></li></ol><ul><li>函数：如果一段用来完成特定功能的代码到处出现，可以封装成函数。</li><li>函数的参数：在编写函数的过程中，如果有一个或者多个数据无法确定，可以把这些数据定义成函数的参数(形参)，将来由函数的调用者来传递参数的具体的值(实参)。</li></ul><h4 id="5）在指定标签显示jsp页面片段-amp-js截取字符串"><a href="#5）在指定标签显示jsp页面片段-amp-js截取字符串" class="headerlink" title="5）在指定标签显示jsp页面片段&amp;js截取字符串"></a>5）在指定标签显示jsp页面片段&amp;js截取字符串</h4><p><strong>在指定标签显示jsp页面片段：</strong></p><ul><li>选择器.html(jsp页面片段的字符串);</li><li>在选择的标签中作为html代码显示，覆盖显示</li><li>选择器.append(jsp页面片段的字符串);</li><li>在选择的标签中作为html代码显示，追加显示</li><li>选择器.after(jsp页面片段的字符串);</li><li>在选择器前面显示</li><li>选择器.before(jsp页面片段的字符串);</li><li>在选择器后面显示</li><li>选择器.text(jsp页面片段的字符串);</li><li>作为文本显示</li></ul><p><strong>js截取字符串：</strong></p><ul><li>str.substr(startIndex,length);<ul><li>从下标为startIndex的字符开始截取，截取length个字符</li></ul></li><li>str.substring(startIndex,endIndex)<ul><li>从下标为startIndex的字符开始截取，截取到下标是endIndex的字符</li></ul></li></ul><h4 id="6）页面中给元素添加事件"><a href="#6）页面中给元素添加事件" class="headerlink" title="6）页面中给元素添加事件"></a>6）页面中给元素添加事件</h4><p>固有元素与动态元素：</p><ul><li>固有元素：当调用事件函数给元素添加事件时，如果元素已经生成，则这些元素叫做固有元素</li><li>动态生成的元素：当调用事件函数给元素添加事件时，如果元素还没有生成，后来生成的元素叫做动态生成的元素</li></ul><p><strong>在页面中给元素添加事件语法：</strong></p><ul><li><p>使用元素的事件属性：onxxxx&#x3D;“f()”</p><ul><li>只能给固有元素添加事件</li></ul></li><li><p>使用jquery对象：</p><pre><code>选择器.xxxx(function()&#123;    //js代码    //this&#125;);</code></pre><ul><li>只能给固有元素添加事件</li></ul></li><li><p>使用jquery的on函数：</p><pre><code>父选择器.on(&quot;事件类型&quot;,子选择器,function()&#123;    //js代码    //this&#125;);</code></pre><ul><li>不但能给固有元素添加事件，还能够给动态生成的元素添加事件</li><li>父元素:必须是固有元素,可以直接父元素,也可以是间接父元素.原则固有父元素范围越小越好</li><li>子选择器：目标元素,跟父选择器构成一个父子选择器</li><li>事件类型：跟事件属性和事件函数一一对应</li></ul></li></ul><h4 id="7）文件上传"><a href="#7）文件上传" class="headerlink" title="7）文件上传"></a>7）文件上传</h4><p>文件上传的表单三个条件：</p><ol><li>表单组件标签必须用：<input type="file">  <input type="text|password|radio|checkbox|hidden|button|submit|reset|file">                  <select>,<textarea>等</li><li>请求方式只能用：post<br>  get：参数通过请求头提交到后台，参数放在URL后边；只能向后台提交文本数据；对参数长度有限制；数据不安全；效率高，数据直接放在url中，不需要对数据进行任何的转换封装，可以缓存静态资源<br>  post：参数通过请求体提交到后台；既能能提交文件数据，又能够提交二进制数据；理论上对参数长度没有限制；相对安全；效率相对较低，数据放请求体中，需要浏览器按请求体的格式进行转换再发送到后台，不能使用缓存</li><li>表单的编码格式只能用：multipart&#x2F;form-data<br>  根据HTTP协议的规定，浏览器每次向后台提交参数，都会对参数进行统一编码；默认采用的编码格式是urlencoded，这种编码格式只能对文本数据进行编码；<br>  浏览器每次向后台提交参数，都会首先把所有的参数转换成字符串，然后对这些数据统一进行urlencoded编码；<br>  文件上传的表单编码格式只能用multipart&#x2F;form-data：enctype&#x3D;”multipart&#x2F;form-data”，阻止默认行为</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRM项目SSM框架构建（四）</title>
      <link href="/2022/06/24/crm-xiang-mu-ssm-kuang-jia-gou-jian-si/"/>
      <url>/2022/06/24/crm-xiang-mu-ssm-kuang-jia-gou-jian-si/</url>
      
        <content type="html"><![CDATA[<p>完成业务：</p><ul><li><p>添加市场活动备注</p></li><li><p>删除市场活动备注</p></li><li><p>修改市场活动备注</p></li></ul><h3 id="查看市场活动明细"><a href="#查看市场活动明细" class="headerlink" title="查看市场活动明细"></a>查看市场活动明细</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><ol><li>用户在市场活动主页面,点击市场活动名称超级链接,跳转到明细页面,完成查看市场活动明细的功能.</li><li>在市场活动明细页面,展示:</li></ol><ul><li>市场活动的基本信息</li><li>该市场活动下所有的备注信息</li></ul><h4 id="时序-amp-流程"><a href="#时序-amp-流程" class="headerlink" title="时序&amp;流程"></a>时序&amp;流程</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/%E6%9F%A5%E7%9C%8B%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E6%98%8E%E7%BB%86.jlzi28tuvi.webp"></p><h3 id="添加市场活动备注"><a href="#添加市场活动备注" class="headerlink" title="添加市场活动备注"></a>添加市场活动备注</h3><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><ol><li>用户在市场活动明细页面,输入备注内容,点击”保存”按钮,完成添加市场活动备注的功能.<ul><li>备注内容不能为空</li><li>添加成功之后,清空输入框,刷新备注列表</li><li>添加失败,提示信息,输入框不清空,列表也不刷新</li></ul></li></ol><h4 id="时序＆流程"><a href="#时序＆流程" class="headerlink" title="时序＆流程"></a>时序＆流程</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/%E6%B7%BB%E5%8A%A0%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E5%A4%87%E6%B3%A8.1clx2lkypf28.webp"></p><h3 id="删除市场活动备注"><a href="#删除市场活动备注" class="headerlink" title="删除市场活动备注"></a>删除市场活动备注</h3><h4 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h4><ol><li>用户在市场活动明细页面,点击”删除”市场活动备注的图标,完成删除市场活动备注的功能.<ul><li>删除成功之后,刷新备注列表</li><li>删除失败,提示信息,备注列表不刷新</li></ul></li></ol><h4 id="时序-amp-流程-1"><a href="#时序-amp-流程-1" class="headerlink" title="时序&amp;流程"></a>时序&amp;流程</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/%E5%88%A0%E9%99%A4%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E5%A4%87%E6%B3%A8.2j9rd8cuieo0.webp"></p><h3 id="修改市场活动备注"><a href="#修改市场活动备注" class="headerlink" title="修改市场活动备注"></a>修改市场活动备注</h3><h4 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h4><ol><li>用户在市场活动明细页面,点击”修改”市场活动备注的图标,弹出修改市场活动备注的模态窗口;</li><li>用户在修改市场活动备注的模态窗口,填写表单,点击”更新”按钮,完成修改市场活动备注的功能.</li></ol><ul><li>备注内容不能为空</li><li>修改成功之后,关闭模态窗口,刷新备注列表</li><li>修改失败,提示信息,模态窗口不关闭,列表也不刷新</li></ul><h4 id="时序-amp-流程-2"><a href="#时序-amp-流程-2" class="headerlink" title="时序&amp;流程"></a>时序&amp;流程</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/%E4%BF%AE%E6%94%B9%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E5%A4%87%E6%B3%A8.3u2h978ngcu8.webp"></p><h3 id="复习知识点"><a href="#复习知识点" class="headerlink" title="复习知识点"></a>复习知识点</h3><ul><li><p>使用标签保存数据，以便在需要的时候能够获取到这些数据:</p><ul><li>给标签添加属性：<br>  如果是表单组件标签，优先使用value属性，只有value不方便使用时，使用自定义属性;<br>  如果不是表单组件标签，不推荐使用value，推荐使用自定义属性。</li><li>获取属性值时：<br>   如果获取表单组件标签的value属性值：dom对象.value   jquery对象.val()<br>   如果自定义的属性，不管是什么标签，只能用：jquery对象.attr(“属性名”);</li></ul></li><li><p>jsp的运行原理：<br>  xxx.jsp：</p><p> 1)、tocmat中运行：<br>      把xxx.jsp翻译成一个servlet,<br>        运行servlet,运行的结果是一个html网页<br>        把html网页输出到浏览器<br> 2)、html网页在浏览器上运行：<br>        先从上到下加载html网页到浏览器，在加载过程中，运行前端代码<br>        当页面都加载完成，再执行入口函数.</p></li><li><p>把页面片段显示在动态显示在页面中：<br>  选择器.html(htmlStr)：覆盖显示在标签的内部<br>  选择器.text(htmlStr)：覆盖显示在标签的内部<br>  选择器.append(htmlStr)：追加显示在指定标签的内部的后边</p><p>  eg:</p>  <div id="myDiv">        aaaaaaaaa        bbbbbbbbb     </div>     var htmlStr="<p>ccccccccc</p>";      $("#myDiv").append(htmlStr);  <pre><code>  &lt;div id=&quot;myDiv&quot;&gt;    aaaaaaaaa    bbbbbbbbb    &lt;p&gt;ccccccccc&lt;/p&gt; &lt;/div&gt;</code></pre>  <div id="myDiv">        aaaaaaaaa        bbbbbbbbb        <p>ccccccccc</p>     </div>  <p>  选择器.after(htmlStr)：追加显示在指定标签的外部的后边</p></li></ul><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  aaaaaaaaa  bbbbbbbbb <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   var htmlStr="<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>ccccccccc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>";    $("#myDiv").after(htmlStr);    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      aaaaaaaaa      bbbbbbbbb   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>ccccccccc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 选择器.before(htmlStr)：追加显示在指定标签的外部的前边</p><div id="myDiv">      aaaaaaaaa      bbbbbbbbb</div><p>   var htmlStr&#x3D;”<p>ccccccccc</p>“;<br>    $(“#myDiv”).before(htmlStr);<br>    <p>ccccccccc</p><br>    <div id="myDiv"><br>      aaaaaaaaa<br>      bbbbbbbbb<br>      </div></p><ul><li>给元素扩展属性：html页面是可扩展的标记语言，可以给指定的标签任意扩展属性，只要属性名符合标识符的命名规则即可。<br>两个目的：<br>1)、使用标签保存数据：<br>  如果是表单组件标签，优先使用value属性，只有value不方便使用时，使用自定义属性;<br>  如果不是表单组件标签，不推荐使用value，推荐使用自定义属性。<br>2)、定位标签：<br>  优先考虑id属性,其次考虑name属性，只有id和name属性都不方便使用时，才考虑使用自定义属性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRM项目SSM框架构建（二）</title>
      <link href="/2022/06/23/crm-xiang-mu-ssm-kuang-jia-gou-jian-er/"/>
      <url>/2022/06/23/crm-xiang-mu-ssm-kuang-jia-gou-jian-er/</url>
      
        <content type="html"><![CDATA[<p>完成业务：</p><ul><li>首页功能</li><li>用户登录</li><li>安全退出</li><li>登录验证</li></ul><p>最终效果：</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/QQ%E5%BD%95%E5%B1%8F.3r3n8y9cdd4w.gif"></p><h3 id="首页功能"><a href="#首页功能" class="headerlink" title="首页功能"></a>首页功能</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>用户访问项目首页，首先进入登录页面。</p><h4 id="时序-amp-流程"><a href="#时序-amp-流程" class="headerlink" title="时序&amp;流程"></a>时序&amp;流程</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/%E9%A6%96%E9%A1%B5-%E6%B5%81%E7%A8%8B%E5%9B%BE.637pj9v46ku8.webp"></p><p>** 前端要先访问首页index.jsp，再跳转到登录页面login.jsp,但页面资源都WEB-INF中不能直接访问,只能通过代码访问，通过Controller层请求页面，所以要在后端要做两件事,先根据用户输入跳转到首页,再根据首页请求跳转到登录页面。</p><blockquote><p>Tomcat的web.xml配置在<welcome-file-list>标签中规定了启动要显示的页面为首页</p></blockquote><h4 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h4><p><strong>IndexController</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        理论上，给Controller方法分配请求url：http://127.0.0.1:8080/crm/        为了简便，协议://ip:port/应用名称必须省去，用/代表应用根目录下的/     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//请求转发</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>UserController</strong></p><p>接收到settings&#x2F;qx&#x2F;user&#x2F;toLogin.do请求,跳转到login.jsp</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * url要和controller方法处理完请求之后，响应信息返回的页面的资源目录保持一致     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/settings/qx/user/toLogin.do"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//请求转发到登录页面</span>        <span class="token keyword">return</span> <span class="token string">"settings/qx/user/login"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h4><p><strong>index.jsp</strong></p><p>​在浏览器中输入settings&#x2F;qx&#x2F;user&#x2F;toLogin.do以通过UserController访问login.jsp</p><pre class="line-numbers language-jsp"><code class="language-jsp"><body>    <script type="text/javascript">        window.location.href = "settings/qx/user/toLogin.do";    </script></body><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><p>用户在登录页面,输入用户名和密码,点击”登录”按钮或者回车,完成用户登录的功能.</p><ul><li><p>用户名和密码不能为空</p></li><li><p>用户名或者密码错误,用户已过期,用户状态被锁定,ip受限 都不能登录成功</p></li><li><p>登录成功之后,所有业务页面显示当前用户的名称</p></li><li><p>实现10天记住密码</p></li><li><p>登录成功之后,跳转到业务主页面</p></li><li><p>登录失败,页面不跳转,提示信息</p></li></ul><h4 id="时序-amp-流程-1"><a href="#时序-amp-流程-1" class="headerlink" title="时序&amp;流程"></a>时序&amp;流程</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95.1u5rfos8p5z4.webp"></p><h4 id="Mapper层"><a href="#Mapper层" class="headerlink" title="Mapper层"></a>Mapper层</h4><p><strong>UserMapper.java</strong></p><p>​创建查询封装好的用户名和密码的方法</p><pre class="line-numbers language-java"><code class="language-java">User <span class="token function">selectUserByLoginActAndPwd</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>UserMapper.xml</strong></p><p>​编写tbl_user表查询语句,查询与用户名和密码对应的用户的所有信息</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectUserByLoginActAndPwd"</span> parameterType<span class="token operator">=</span><span class="token string">"map"</span> resultMap<span class="token operator">=</span><span class="token string">"BaseResultMap"</span><span class="token operator">></span>    select    <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span> <span class="token operator">/</span><span class="token operator">></span>    from tbl_user    where login_act<span class="token operator">=</span>#<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>loginAct<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> and login_pwd<span class="token operator">=</span>#<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>loginPwd<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h4><p><strong>UserService.java</strong></p><p>​创建查询用户的服务</p><pre class="line-numbers language-java"><code class="language-java">User <span class="token function">queryUserByLoginActAndPwd</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>UserServiceImpl.java</strong></p><p>​调用userMapper中的selectUserByLoginActAndPwd方法实现UserService接口中的queryUserByLoginActAndPwd服务</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> User <span class="token function">queryUserByLoginActAndPwd</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectUserByLoginActAndPwd</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Controller层-1"><a href="#Controller层-1" class="headerlink" title="Controller层"></a>Controller层</h4><p><strong>UserController.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/settings/qx/user/login.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> Object <span class="token function">login</span><span class="token punctuation">(</span>String loginAct<span class="token punctuation">,</span> String loginPwd<span class="token punctuation">,</span> String isRemPwd<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//封装参数</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginAct"</span><span class="token punctuation">,</span>loginAct<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPwd"</span><span class="token punctuation">,</span>loginPwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用service层方法，查询用户</span>    User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserByLoginActAndPwd</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据查询结果，生成响应信息</span>    ReturnObject returnObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReturnObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//登录失败,用户名或者密码错误</span>        returnObject<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>RETURN_OBJECT_CODE_FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>        returnObject<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"用户名或者密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进一步判断账号是否合法</span>        <span class="token comment" spellcheck="true">//user.getExpireTime()   //2019-10-20</span>        <span class="token comment" spellcheck="true">//        new Date()     //2020-09-10</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DateUtils<span class="token punctuation">.</span><span class="token function">formateDateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//登录失败，账号已过期</span>            returnObject<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>RETURN_OBJECT_CODE_FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>            returnObject<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"账号已过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getLockState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//登录失败，状态被锁定</span>            returnObject<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>RETURN_OBJECT_CODE_FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>            returnObject<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"状态被锁定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">.</span><span class="token function">getAllowIps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//登录失败，ip受限</span>            returnObject<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>RETURN_OBJECT_CODE_FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>            returnObject<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"ip受限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//登录成功</span>            returnObject<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>RETURN_OBJECT_CODE_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把user加入session</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>SESSION_USER<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            Cookie c1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"loginAct"</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getLoginAct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Cookie c2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"loginPwd"</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getLoginPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>isRemPwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果需要记住密码，则往外写cookied</span>                c1<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c2<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把没有过期cookie删除</span>                c1<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c2<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> returnObject<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>WorkbenchIndexController.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/workbench/index.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//跳转到业务主页面</span>    <span class="token keyword">return</span> <span class="token string">"workbench/index"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前端页面-1"><a href="#前端页面-1" class="headerlink" title="前端页面"></a>前端页面</h4><p><strong>login.jsp</strong></p><p>在入口函数添加事件</p><pre class="line-numbers language-jsp"><code class="language-jsp"><script type="text/javascript">//给整个浏览器窗口添加键盘按下事件$(window).keydown(function (e) &#123;    //如果按的是回车键，则提交登录请求    if(e.keyCode==13)&#123;        $("#loginBtn").click();    &#125;&#125;);//给"登录"按钮添加单击事件$("#loginBtn").click(function () &#123;    //收集参数    var loginAct=$.trim($("#loginAct").val());    var loginPwd=$.trim($("#loginPwd").val());    var isRemPwd=$("#isRemPwd").prop("checked");    //表单验证    if (loginAct=="") &#123;        alert("用户名不能为空");        return;    &#125;    if (loginPwd=="") &#123;        alert("密码不能为空");        return;    &#125;    //显示正在验证    // $("#msg").text("正在努力验证...");    //发送请求    $.ajax(&#123;        url:'settings/qx/user/login.do',        data:&#123;            loginAct:loginAct,            loginPwd:loginPwd,            isRemPwd:isRemPwd        &#125;,        type:'post',        dataType:'json',        success:function (data) &#123;            if (data.code=="1")&#123;                //跳转到业务主页面                window.location.href="workbench/index.do";            &#125;else &#123;                //提示信息                $("#msg").text(data.message);            &#125;        &#125;,        beforeSend:function () &#123;//当ajax向后台发送请求之前，会自动执行本函数            //如果该函数返回true,则ajax会真正向后台发送请求；否则，ajax放弃向后台发送请求            $("#msg").text("正在努力验证....");            return true;        &#125;    &#125;);&#125;);</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安全退出"><a href="#安全退出" class="headerlink" title="安全退出"></a>安全退出</h3><h4 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h4><p>​用户在任意的业务页面,点击”退出”按钮,弹出确认退出的模态窗口;用户在确认退出的模态窗口,点击”确定”按钮,完成安全退出的功能</p><ul><li>安全退出，清空cookie，销毁session</li><li>退出完成，跳转到首页</li></ul><h4 id="时序-amp-流程-2"><a href="#时序-amp-流程-2" class="headerlink" title="时序&amp;流程"></a>时序&amp;流程</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/%E5%AE%89%E5%85%A8%E9%80%80%E5%87%BA.5n4qoarvrc3k.webp"></p><h4 id="Controller层-2"><a href="#Controller层-2" class="headerlink" title="Controller层"></a>Controller层</h4><p><strong>UserController</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/settings/qx/user/logout.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">logout</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//清空cookie</span>    Cookie c1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"loginAct"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c1<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>    Cookie c2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"loginPwd"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c2<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//销毁session</span>    session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//跳转到首页 重定向</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前端页面-2"><a href="#前端页面-2" class="headerlink" title="前端页面"></a>前端页面</h4><p><strong>index.jsp</strong></p><ol><li><p>给确认退出按钮加id选择器</p><pre class="line-numbers language-jsp"><code class="language-jsp"><button type="button" class="btn btn-primary" data-dismiss="modal" id="logoutBtn">确定</button><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在入口函数给“确定”按钮添加单击事件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//给“确定”按钮添加单击事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#logoutBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发送同步请求</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"settings/qx/user/logout.do"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h3><h4 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h4><p>​用户访问任何业务资源,都需要进行登录验证.</p><ul><li>​只有登录成功的用户才能访问业务资源</li><li>​没有登录成功的用户访问业务资源,跳转到登录页面</li></ul><h4 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h4><ol><li><p>登录验证拦截器类LoginInterceptor.java</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">,</span> Object o<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果用户没有登录成功,则跳转到登录页面</span>        HttpSession session<span class="token operator">=</span>httpServletRequest<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user<span class="token operator">=</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>Contants<span class="token punctuation">.</span>SESSION_USER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            httpServletResponse<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重定向时，url必须加项目的名称</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在mvc配置文件applicationContext-mvc.xml中配置拦截器</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--拦截所有以settings和workbench开头的请求--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/settings/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/workbench/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--排除登录本身请求的拦截(优先级高)--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/settings/qx/user/toLogin.do<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/settings/qx/user/login.do<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--拦截器类--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tu.crm.settings.web.interceptor.LoginInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>​OK</p><h3 id="复习知识点"><a href="#复习知识点" class="headerlink" title="复习知识点"></a>复习知识点</h3><h5 id="1）同步请求和异步请求的区别"><a href="#1）同步请求和异步请求的区别" class="headerlink" title="1）同步请求和异步请求的区别"></a>1）同步请求和异步请求的区别</h5><ul><li>同步请求：浏览器窗口发出的请求,响应信息返回到浏览器窗口,所以会进行全局刷新。</li><li>异步请求：ajax发出的请求,响应信息返回到ajax的回调函数,既可以进行全局刷新，也可以进行局部刷新。</li></ul><p><strong>小结</strong></p><ul><li>如果需要进行全局刷新，推荐使用同步请求，当然也可以使用异步请求</li><li>如果需要进行局部刷新，只能使用异步请求</li><li>如果既可能进行全局刷新，也可能进行局部刷新，也是只能使用异步请求</li></ul><h5 id="2）使用jquery获取指定元素的指定属性的值"><a href="#2）使用jquery获取指定元素的指定属性的值" class="headerlink" title="2）使用jquery获取指定元素的指定属性的值"></a>2）使用jquery获取指定元素的指定属性的值</h5><ul><li>选择器.attr(“属性名”)；<ul><li>来获取那些值不是true&#x2F;false的属性的值</li></ul></li><li>选择器.prop(“属性名”);<ul><li>用来获取值是true&#x2F;false的属性的值.例如：checked,selected,readonly,disabled等。</li></ul></li></ul><h5 id="3）把控制层-controller-代码中处理好的数据传递到视图层-jsp-使用作用域传递"><a href="#3）把控制层-controller-代码中处理好的数据传递到视图层-jsp-使用作用域传递" class="headerlink" title="3）把控制层(controller)代码中处理好的数据传递到视图层(jsp),使用作用域传递"></a>3）把控制层(controller)代码中处理好的数据传递到视图层(jsp),使用作用域传递</h5><ul><li>pageContext:用来在同一个页面的不同标签之间传递数</li><li>request：在同一个请求过程中间传递数据。</li><li>session: 同一个浏览器窗口的不同请求之间传递数据。</li><li>application:所有用户共享的数据，并且长久频繁使用的数据。</li></ul><h5 id="4）jquery事件函数的用法"><a href="#4）jquery事件函数的用法" class="headerlink" title="4）jquery事件函数的用法"></a>4）jquery事件函数的用法</h5><h5 id="5）记住密码"><a href="#5）记住密码" class="headerlink" title="5）记住密码"></a>5）记住密码</h5><ol><li><p>访问：login.jsp</p><ul><li>如果上次记住密码，自动填上账号和密码;否则，不填。</li><li>如何判断上次是否记住密码？<ul><li>上次登录成功，判断是否需要记住密码：如果需要记住密码，则往浏览器写cookie；否则，删除cookie。而且cookie的值必须是该用户的loginAct和loginPwd</li><li>下次登录时，判断该用户有没有cookie：如果有，则自动填写账号和密码；否则，不写。而且填写的是cookie的值</li></ul></li></ul></li><li><p>浏览器显示</p><ol><li><p>获取cookie:</p><ul><li><p>使用java代码获取cookie：</p><pre class="line-numbers language-java"><code class="language-java"> Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cs<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Cookie c<span class="token operator">:</span>cs<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"loginAct"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String loginAct<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"loginPwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String loginPwd<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用EL表达式获取cookie</p><ul><li>${cookie.loginAct.value} </li><li>${cookie.loginPwd.value}</li></ul></li></ul></li></ol></li></ol><p></p><h5 id="6）过滤器和拦截器"><a href="#6）过滤器和拦截器" class="headerlink" title="6）过滤器和拦截器"></a>6）过滤器和拦截器</h5><ul><li><p>过滤器</p><ul><li><p>过滤器类：</p><pre><code>implements Filter&#123;     --init //初始化过滤器,Filter生命周期中只被调用一次     --doFilter//每一次请求都会调用,FilterChain 用来调用下一个过滤器Filter     --destroy //销毁或关闭资源,Filter生命周期中只被调用一次&#125;</code></pre></li><li><p>配置过滤器:web.xml</p></li></ul></li><li><p>拦截器</p><ul><li><p>拦截器类：</p><pre><code>implements HandlerInterceptor&#123;              --preHandle //请求处理之前进行调用,返回值为false ，将视为当前请求结束，自身拦截器失效，其他的拦截器也不再执行              --postHandle //preHandle()方法返回值为true时执行;Controller中的方法调用之后，DispatcherServlet返回渲染视图之前被调用              --afterCompletion//preHandle()方法返回值为true时执行;整个请求结束之后，DispatcherServlet 渲染了对应的视图之后执行 &#125;</code></pre><blockquote><p>先声明的拦截器<code>preHandle()</code>方法先执行,<code>postHandle()</code>方法后执行。（看源码）</p></blockquote></li><li><p>配置拦截器：springmvc.xml</p></li><li><p>链式调用，一个应用中可以同时存在多个拦截器<code>Interceptor</code>， 一个请求也可以触发多个拦截器 ，而每个拦截器的调用会依据它的声明顺序依次执行</p></li></ul></li></ul><p>功能上拦截器是高配版的过滤器，但他们的底层实现不同，具体请看–》</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/bird.6fum2gvcv37k.gif"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRM项目SSM框架构建（一）</title>
      <link href="/2022/06/22/crm-xiang-mu-ssm-kuang-jia-gou-jian-yi/"/>
      <url>/2022/06/22/crm-xiang-mu-ssm-kuang-jia-gou-jian-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="CRM项目简介"><a href="#CRM项目简介" class="headerlink" title="CRM项目简介"></a>CRM项目简介</h3><p>​Customer Relationship Management 客户关系管理系统，企业级应用,传统应用;给销售或者贸易型公司使用,在市场,销售,服务等各个环节中维护客户关系。 CRM项目的宗旨：增加新客户,留住老客户，把已有客户转化为忠诚客户。</p><p>​CRM是一类项目,本次CRM项目是给一个大型的进出口贸易公司来使用的，做大宗商品的进出口贸易，商品是受管家管制的。</p><h5 id="本次CRM项目的核心业务："><a href="#本次CRM项目的核心业务：" class="headerlink" title="本次CRM项目的核心业务："></a><strong>本次CRM项目的核心业务</strong>：</h5><ul><li>系统管理功能：不是直接处理业务数据，为了保证业务管理的功能正常安全运行而设计的功能。<ul><li>用户登录,安全退出,登录验证等<ul><li>给超级管理员，开发和运维人员使用。</li></ul></li></ul></li><li>业务管理功能：处理业务数据<ul><li>市场活动：市场部，设计市场活动营销活动<ul><li>线索：销售部(初级销售),增加线索</li><li>客户和联系人：销售部(高级销售),有效地区分和跟踪客户和联系人</li></ul></li><li>交易：销售部(高级销售),更好地区分和统计交易的各个阶段。<ul><li>售后回访：客服部,妥善安排售后回访。主动提醒。</li></ul></li><li>统计图表：管理层,统计交易表中各个阶段数据量。</li></ul></li></ul><h5 id="CRM的技术架构："><a href="#CRM的技术架构：" class="headerlink" title="CRM的技术架构："></a><strong>CRM的技术架构：</strong></h5><ul><li>视图层(view)：展示数据，跟用户交互<ul><li>html,css,js,jquery,bootstrap(ext|easyUI),jsp</li></ul></li><li>控制层(Controller)：控制业务处理流程(接收请求,接收参数,封装参数;根据不同的请求调用业务层处理业务;根据处理结果，返回响应信息)<ul><li>(servlet,)springMVC(,webwork,struts1,struts2)</li></ul></li><li>业务层(Service)：处理业务逻辑(处理业务的步骤以及操作的原子性)<ul><li>JAVASE(工作流:activiti|JBPM)</li></ul></li><li>持久层(Dao&#x2F;Mapper)：操作数据库<ul><li>(jdbc,)mybatis(,hibernate,ibatis)</li><li>tbl_table（表）———-pojo（实体类）</li></ul></li><li>整合层：维护类资源,维护数据库资源<ul><li>spring(IOC,AOP)(,ejb,corba)</li></ul></li></ul><h3 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h3><ol><li><p>创建空项目，作为项目根目录</p></li><li><p>设置JDK：File–&gt;Project Structure–&gt;Project–&gt;SDK–&gt;配置JDK1.8</p></li><li><p>设置编码格式：Setting–&gt;FileEncodings–&gt;(配置Global Encoding:UTF-8, Project Encoding:UTF-8)</p></li><li><p>配置Maven：Setting–&gt;Build,Execution,Deployment–&gt;Maven–&gt;(配置Maven home path：，User setting file：，Local reposity：)</p></li><li><p>创建Maven工程</p></li><li><p>补全目录结构：</p><ol><li><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.3snkn25mqksg.webp"></li></ol></li><li><p>添加依赖</p><ol><li><p>pom.xml</p><ol><li><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- MySQL数据库连接驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.43<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- JDBC数据源连接池 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- MyBatis框架依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Spring框架依赖的JAR配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-oxm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Spring AOP支持--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- MyBatis与Spring整合依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- servlet及jstl标签库依赖的JAR配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp.jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>taglibs-standard-spec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>taglibs-standard-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 加载jackson插件依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--poi依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 文件上传 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Log4j2依赖的JAR配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-jcl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li><li><p>添加相关配置</p><ol><li><p>Mybatis配置文件<strong>mybatis-config.xml</strong></p><ol><li><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.group10.qpj.model<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.group10.qpj.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>配置数据库连接和事务文件<strong>applicationContext-datasource.xml</strong></p><ol><li><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://127.0.0.1:3306/crm2008?useSSL<span class="token punctuation">=</span>false&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置SqlSessionFactory --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 必须注入属性dataSource --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 如果mybatis没有特殊的配置(比如别名等)，configLocation可以省去 ;否则，不能省略--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mapper注解扫描器配置,扫描@MapperScan注解,自动生成代码对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperScanner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tu.crm.settings.mapper,com.tu.crm.workbench.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.tu.crm..service.*.*(..))<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allMethodPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allMethodPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Exception<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>save*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Exception<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>edit*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Exception<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Exception<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Exception<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>do*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Exception<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>springMVC配置文件<strong>applicationContext-mvc.xml</strong></p><ol><li><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>util</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/util<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/mvchttp://www.springframework.org/schema/mvc/spring-mvc.xsdhttp://www.springframework.org/schema/utilhttp://www.springframework.org/schema/util/spring-util.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- dispatcherServlet截获所有URL请求 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring mvc 扫描包下的controller --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tu.crm.web.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tu.crm.settings.web.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tu.crm.workbench.web.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置注解驱动 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置拦截器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--拦截所有以settings和workbench开头的请求--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/settings/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/workbench/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--排除登录拦截--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/settings/qx/user/toLogin.do<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/settings/qx/user/login.do<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tu.crm.settings.web.interceptor.LoginIntercepter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置文件上传解析器 id：必须是multupartResolver--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#&amp;#123;1024*1024*80&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>spring总配置文件<strong>applicationContext.xml</strong></p><ol><li><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>task</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/task<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>                            http://www.springframework.org/schema/beans                            http://www.springframework.org/schema/beans/spring-beans.xsd                            http://www.springframework.org/schema/context                            http://www.springframework.org/schema/context/spring-context.xsd                            http://www.springframework.org/schema/tx                            http://www.springframework.org/schema/tx/spring-tx.xsd                            http://www.springframework.org/schema/aop                            http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 加载系统配置文件    &lt;context:property-placeholder location="classpath:*.properties" />--></span>    <span class="token comment" spellcheck="true">&lt;!-- 扫描注解 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tu.crm.settings.service<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tu.crm.workbench.service<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 导入数据相关配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicationContext-datasource.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>web.xml配置</p><ol><li><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataservice<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>dataservice application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- spring监听器加载applicationContext.xml配置文件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- spring字符过滤器 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- Spring mvc分发servlet --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 欢迎页，默认进入index controller --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>添加jar包依赖pom.xml</p><ol><li><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.tu.crm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>crm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>crm Maven Webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- FIXME change it to the project's website --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://www.example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- MySQL数据库连接驱动 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.43<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- JDBC数据源连接池 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- MyBatis框架依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Spring框架依赖的JAR配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-oxm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Spring AOP支持--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- MyBatis与Spring整合依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- MyBatis与Spring整合依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- servlet及jstl标签库依赖的JAR配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp.jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>taglibs-standard-spec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>taglibs-standard-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 加载jackson插件依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--poi依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 文件上传 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Log4j2依赖的JAR配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>crm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-clean-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.22.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-install-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-deploy-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li><li><p>添加静态资源</p><ol><li><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.4bc2ywzxo81s.webp"></li></ol></li><li><p>部署到tomcat上</p><ol><li>配置tomcat<img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.211hwt6h5cqo.webp"></li></ol></li></ol><p>​2. <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.530ftx91fmyo.webp"></p><h3 id="创建CRM数据库表"><a href="#创建CRM数据库表" class="headerlink" title="创建CRM数据库表"></a>创建CRM数据库表</h3><p><strong>crm的表结构：</strong></p><ul><li><p>tbl_user   用户表</p></li><li><p>tbl_dic_type   数据字典类型表<br>tbl_dic_value  数据字典值</p></li><li><p>tbl_activity   市场活动表<br>tbl_activity_remark  市场活动备注表</p></li><li><p>tbl_clue       线索表<br>tbl_clue_remark   线索备注表</p></li><li><p>tbl_clue_activity_relation  线索和市场活动的关联关系表</p></li><li><p>tbl_customer   客户表<br>tbl_customer_remark  客户备注表</p></li><li><p>tbl_contacts   联系人表<br>tbl_contacts_remark 联系人备注表</p></li><li><p>tbl_contacts_activity_relation 联系人和市场活动的关联关系表</p></li><li><p>tbl_tran       交易表<br>tbl_tran_remark  交易备注表<br>tbl_tran_history  交易历史表</p></li><li><p>tbl_task   任务表</p></li></ul><h3 id="MyBatis逆向工程"><a href="#MyBatis逆向工程" class="headerlink" title="MyBatis逆向工程"></a>MyBatis逆向工程</h3><p>​使用mybatis逆向工程根据表生成mapper层三层部分代码：实体类，mapper接口，映射文件，实现针对表单的所有的常规的增删改查。</p><p><strong>使用mybatis逆向工程</strong></p><ol><li><p>在pom.xml中引用插件依赖：crm-mybatis-generator</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>crm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-clean-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.22.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-install-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-deploy-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>创建数据库连接信息文件generator.properties</p><ol><li><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driverLocation</span><span class="token punctuation">=</span><span class="token attr-value">D:/apache-maven-3.6.3/repository/mysql/mysql-connector-java/5.1.43/mysql-connector-java-5.1.43.jar</span><span class="token attr-name">jdbc.driverClass</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.connectionURL</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://127.0.0.1:3306/crm2008</span><span class="token attr-name">jdbc.userId</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span> <span class="token attr-value">todo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>修改generatorConfig.xml（ 修改代码保存的目录以及表的信息）</p><ol><li><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE generatorConfiguration        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--指定mysql数据库驱动--></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;classPathEntry location="E://repository-p2p//mysql//mysql-connector-java//5.1.43//mysql-connector-java-5.1.43.jar"/>--></span>    <span class="token comment" spellcheck="true">&lt;!--导入属性配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>generator.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--指定特定数据库的jdbc驱动jar包的位置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classPathEntry</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.driverLocation&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- optional，旨在创建class时，对注释进行控制，false生成注释,true无注释 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suppressDate<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--jdbc的数据库连接 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span>                <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.driverClass&amp;#125;<span class="token punctuation">"</span></span>                <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.connectionURL&amp;#125;<span class="token punctuation">"</span></span>                <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.userId&amp;#125;<span class="token punctuation">"</span></span>                <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaTypeResolver</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>forceBigDecimals<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaTypeResolver</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类            targetPackage     指定生成的model生成所在的包名            targetProject     指定在该项目下所在的路径|指定生成到的工程名称        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tu.crm.workbench.domain<span class="token punctuation">"</span></span>                            <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>E:\java\javaSE\crm-project\crm\src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 是否允许子包，即targetPackage.schemaName.tableName --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 是否对model添加 构造函数 true添加，false不添加--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>constructorBased<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 是否对类CHAR类型的列的数据进行trim操作 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>immutable<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tu.crm.workbench.mapper<span class="token punctuation">"</span></span>                         <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>E:\java\javaSE\crm-project\crm\src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.tu.crm.workbench.mapper<span class="token punctuation">"</span></span>                             <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>E:\java\javaSE\crm-project\crm\src\main\java<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tbl_user<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span>               <span class="token attr-name">enableCountByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableUpdateByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableDeleteByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableSelectByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">selectByExampleQueryIalse"</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tbl_activity_remark<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ActivityRemark<span class="token punctuation">"</span></span>               <span class="token attr-name">enableCountByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableUpdateByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableDeleteByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableSelectByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">selectByExampleQueryId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        &lt;table tableName="tbl_activity" domainObjectName="Activity"               enableCountByExample="false" enableUpdateByExample="false"               enableDeleteByExample="false" enableSelectByExample="false"               selectByExampleQueryId="false">        &lt;/table>        &lt;table tableName="tbl_clue" domainObjectName="Clue"               enableCountByExample="false" enableUpdateByExample="false"               enableDeleteByExample="false" enableSelectByExample="false"               selectByExampleQueryId="false">        &lt;/table>        &lt;table tableName="tbl_clue_activity_relation" domainObjectName="ClueActivityRelation"               enableCountByExample="false" enableUpdateByExample="false"               enableDeleteByExample="false" enableSelectByExample="false"               selectByExampleQueryId="false">        &lt;/table>        &lt;table tableName="tbl_clue_remark" domainObjectName="ClueRemark"               enableCountByExample="false" enableUpdateByExample="false"               enableDeleteByExample="false" enableSelectByExample="false"               selectByExampleQueryId="false">        &lt;/table>                        --></span>        <span class="token comment" spellcheck="true">&lt;!--        &lt;table tableName="tbl_contacts" domainObjectName="Contacts"               enableCountByExample="false" enableUpdateByExample="false"               enableDeleteByExample="false" enableSelectByExample="false"               selectByExampleQueryId="false">        &lt;/table>        &lt;table tableName="tbl_contacts_activity_relation" domainObjectName="ContactsActivityRelation"               enableCountByExample="false" enableUpdateByExample="false"               enableDeleteByExample="false" enableSelectByExample="false"               selectByExampleQueryId="false">        &lt;/table>        &lt;table tableName="tbl_contacts_remark" domainObjectName="ContactsRemark"               enableCountByExample="false" enableUpdateByExample="false"               enableDeleteByExample="false" enableSelectByExample="false"               selectByExampleQueryId="false">        &lt;/table>        --></span>        <span class="token comment" spellcheck="true">&lt;!--        &lt;table tableName="tbl_customer" domainObjectName="Customer"               enableCountByExample="false" enableUpdateByExample="false"               enableDeleteByExample="false" enableSelectByExample="false"               selectByExampleQueryId="false">        &lt;/table>        &lt;table tableName="tbl_customer_remark" domainObjectName="CustomerRemark"               enableCountByExample="false" enableUpdateByExample="false"               enableDeleteByExample="false" enableSelectByExample="false"               selectByExampleQueryId="false">        &lt;/table>        --></span>        <span class="token comment" spellcheck="true">&lt;!--                &lt;table tableName="tbl_dictionary_type" domainObjectName="DictionaryType"                       enableCountByExample="false" enableUpdateByExample="false"                       enableDeleteByExample="false" enableSelectByExample="false"                       selectByExampleQueryId="false">                &lt;/table>                &lt;table tableName="tbl_dictionary_value" domainObjectName="DictionaryValue"                       enableCountByExample="false" enableUpdateByExample="false"                       enableDeleteByExample="false" enableSelectByExample="false"                       selectByExampleQueryId="false">                &lt;/table>                &lt;table tableName="tbl_transaction" domainObjectName="Transaction"                       enableCountByExample="false" enableUpdateByExample="false"                       enableDeleteByExample="false" enableSelectByExample="false"                       selectByExampleQueryId="false">                &lt;/table>                &lt;table tableName="tbl_transaction_history" domainObjectName="TransactionHistory"                       enableCountByExample="false" enableUpdateByExample="false"                       enableDeleteByExample="false" enableSelectByExample="false"                       selectByExampleQueryId="false">                &lt;/table>                &lt;table tableName="tbl_transaction_remark" domainObjectName="TransactionRemark"                       enableCountByExample="false" enableUpdateByExample="false"                       enableDeleteByExample="false" enableSelectByExample="false"                       selectByExampleQueryId="false">                &lt;/table>                --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.5vtgnlb9iwhs.webp"></p></li></ol></li><li><p>双击执行Maven，mybatis-generator:generate</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.18tg3xm21io0.webp"></p></li></ol></li><li><p>创建成功后：</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.466dnolyotc0.webp"></p></li></ol><h3 id="复习知识点"><a href="#复习知识点" class="headerlink" title="复习知识点"></a>复习知识点</h3><h5 id="1-主键字段："><a href="#1-主键字段：" class="headerlink" title="1)主键字段："></a>1)<strong>主键字段</strong>：</h5><p>在数据库表中，如果有一组字段能够唯一确定一条记录，则可以把它们设计成表的主键字段。</p><p>   <strong>tips</strong>： </p><ul><li><input checked="" disabled="" type="checkbox"> <strong>推荐使用一个字段做主键，而且推荐使用没有业务含义的字段做主键,比如：id等</strong></li></ul><p> 主键字段的类型和长度由主键值的生成方式来决定：<br>    主键值的生成方式：</p><ul><li>自增：借助数据库自身主键生成机制<ul><li>数值型 长度由数据量来决定</li><li>运行效率低</li><li>开发效率高</li></ul></li><li>assighed：程序员手动生成主键值,唯一非空,算法<ul><li>hi&#x2F;low：数值型 长度由数据量决定</li><li>UUID：字符串 长度是32位</li></ul></li><li>共享主键：由另一张表的类型和长度决定，两张表共用同一个主键</li><li>联合主键：由多个字段的类型和长度决定</li></ul><h5 id="2-外键字段："><a href="#2-外键字段：" class="headerlink" title="2)外键字段："></a>2)<strong>外键字段</strong>：</h5><p>​用来确定表和表之间的关系</p><p>​表和表之间的关系：</p><ul><li>一对多：一张父表(A)中的一条记录可以对应另一张子表(B)中的多条记录，另一张表(B)中的一条记录只能对应一张表(A)中的一条记录<ul><li>添加数据时,先添加父表记录，再添加子表记录</li><li>删除数据时,先删除子表记录，再删除父表记录</li><li>查询数据时,可能会进行关联查询<ul><li>内连接：查询所有符合条件的数据，并且要求结果在两张表中都有相对应的记录</li><li>左外连接：查询左侧表中所有符合条件的数据，即使在右侧表中没有相对应的记录也要查出来</li><li><strong>tips：</strong><ul><li><input checked="" disabled="" type="checkbox"> 如果外键不能为空，优先使用内连接</li><li><input checked="" disabled="" type="checkbox"> 如果外键可以为空<ul><li><input checked="" disabled="" type="checkbox"> 假如只需要查询那些在另一张表中有相对应的记录，使用内连接</li><li><input checked="" disabled="" type="checkbox"> 假如需要查询左侧表中所有符合条件的记录，使用左外连接</li></ul></li></ul></li></ul></li></ul></li><li>一对一：一张表(A)中的一条记录只能对应另一张表(B)中的一条记录，另一张表(B)中的一条记录也只能对应一张表(A)中的一条记录<ul><li>共享主键：(不推荐)<ul><li>添加数据：先添加先产生的表，再后产生的表记录</li><li>删除数据：先删除后产生的表记录，再删除先产生的表记录</li><li>查询数据：无需进行连接查询</li></ul></li><li>唯一外键（一对一就是一种特殊的一对多，操作跟一对多完全一样）</li></ul></li><li>多对多：一张表(A)中的一条记录可以对应另一张表(B)中的多条记录， 另一张表(B)中的一条记录也可以对应一张表(A)中的多条记录<ul><li>添加数据时，先添加父表记录，再添加子表记录</li><li>删除数据时，先删除子表记录，再删除父表记录</li><li>查询数据时，可能会进行关联查询</li></ul></li></ul><h5 id="3-关于日期和时间的字段"><a href="#3-关于日期和时间的字段" class="headerlink" title="3)关于日期和时间的字段"></a>3)<strong>关于日期和时间的字段</strong></h5><p>​ 都按照字符串处理：</p><ul><li>char(10)：   yyyy-MM-dd</li><li>char(19)：   yyyy-MM-dd HH:mm:ss</li></ul><h5 id="4）关于WEB-INF"><a href="#4）关于WEB-INF" class="headerlink" title="4）关于WEB-INF"></a>4）关于WEB-INF</h5><p>​web应用根目录下的内容都是不安全的，外界可以通过url直接访问， 所以，一般为了数据的安全，都会把页面放到WEB-INF下,因为WEB-INF目录下的资源是受保护的，外界不能直接访问。</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/rabit.5rc6fh70x5s0.gif"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis简介</title>
      <link href="/2022/06/20/redis-jian-xi/"/>
      <url>/2022/06/20/redis-jian-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h3><p>​Redis是一个用C语言编写的、开源的、基于内存运行并支持持久化的、高性能的NoSQL数据库，也是当前热门的NoSQL数据库之一。</p><p>​Redis中的数据以K-V模型存储数据，大部分时间都是存储内存中的，适合存储频繁访问、数据量比较小的数据，常用作缓存数据库。</p><ul><li><p>关系型数据库：oracle、mysql、DB2、sqlserver、….</p><ul><li>数据模型：表</li></ul></li><li><p>非关系型数据库(NoSql)： 彻底改变底层存储机制。不再采用关系数据模型，而是采用聚合数据结构存储数据：  redis、mongoDB、HBase、….</p><ul><li><p>数据模型： 聚合模型—把一组相关联的数据作为一个整体进行存储和管理。</p><ul><li><p>BSON：数据保存到键值对中、数据和数据之间用逗号隔开，{}表示对象，[]表示数组。</p><ul><li><p>eg: </p><pre><code>&#123; &quot;student&quot;:&#123;   &quot;id&quot;:1001,   &quot;name&quot;:&quot;zhangsan&quot;,   &quot;addresses&quot;:&#123;&quot;province&quot;:&quot;beijing&quot;,&quot;city&quot;:&quot;daxingqu&quot;,&quot;street&quot;:&quot;liangshuihe&quot;&#125;,   &quot;courses&quot;:[   &#123;     &quot;id&quot;:01,     &quot;name&quot;:&quot;java&quot;     &#125;,        &#123;     &quot;id&quot;:02,     &quot;name&quot;:&quot;mybatis&quot;     &#125;,        &#123;     &quot;id&quot;:03,     &quot;name&quot;:&quot;spring&quot;     &#125;    ]  &#125;&#125;</code></pre></li></ul></li><li><p>K-V键值对、列簇、图表模型等。Redis采用的是K-V模型存储数据。</p></li></ul></li></ul></li></ul><h4 id="redis的特点"><a href="#redis的特点" class="headerlink" title="redis的特点"></a>redis的特点</h4><ul><li><p>支持数据持久化：Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用</p></li><li><p>支持多种数据结构：Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储</p></li><li><p>支持数据备份：Redis支持数据的备份，即master-slave模式的数据备份</p></li></ul><h3 id="Redis中的操作命令"><a href="#Redis中的操作命令" class="headerlink" title="Redis中的操作命令"></a>Redis中的操作命令</h3><h4 id="redis服务的启动与关闭"><a href="#redis服务的启动与关闭" class="headerlink" title="redis服务的启动与关闭"></a>redis服务的启动与关闭</h4><ul><li>​启动redis服务<ul><li>前台启动：在任何目录下执行 redis-server</li><li>后台启动：在任何目录下执行 redis-server &amp;</li><li>启动redis服务时，指定配置文件：redis-server reids.conf &amp;</li></ul></li><li>​    关闭redis服务<ul><li>通过kill命令<ul><li>ps-ef|grep redis 查看pid</li><li>kill -9 pid</li></ul></li><li>通过redis-cli命令关闭<ul><li>redis-cli shutdown</li></ul></li></ul></li><li>启动redis客户端（用来连接redis服务，向redis服务端发送命令，并且显示redis服务处理结果。）<ul><li>redis-cli：启动redis自带的客户端，默认连接127.0.0.1(本机)的6379端口上的redis服务）</li><li>redis-cli -p 端口号：连接127.0.0.1(本机)的指定端口上的redis服务</li><li>redis-cli -h ip地址 -p 端口：连接指定ip主机上的指定端口的redis服务</li></ul></li><li>退出客户端<ul><li>在客户端执行命令：exit或者quit</li></ul></li></ul><h4 id="redis的基本知识"><a href="#redis的基本知识" class="headerlink" title="redis的基本知识"></a>redis的基本知识</h4><ul><li>测试redis服务的性能：redis-benchmark</li><li>查看redis服务是否正常运行：ping  （如果正常返回-pong）</li><li>查看redis服务器的统计信息<ul><li>info： 查看redis服务的所有统计信息</li><li>info [信息段]： 查看redis服务器的指定的统计信息<ul><li>eg：info replication: 查看本端口的从属关系</li></ul></li></ul></li><li>redis的数据库实例<ul><li>作用类似于mysql的数据库实例，redis中的数据库实例只能由redis服务来创建和维护，开发人员不能修改和自行创建数据库实例</li><li>默认情况下，redis会自动创建16个数据库实例，并且给这些数据库实例进行编号，从0开始，一直到15，使用时通过编号来使用数据库</li><li>可以通过配置文件，指定redis自动创建的数据库个数</li><li>redis的每一个数据库实例本身占用的存储空间是很少的，所以也不造成存储空间的太多浪费</li><li>默认情况下，redis客户端连接的是编号是0的数据库实例；可以使用select index切换数据库实例</li><li>对数据库实例的常用操作命令<ul><li>dbsize：查看当前数据库实例中所有key的数量</li><li>keys *：查看当前数据库实例中所有的key</li><li>flushdb：清空当前数据库实例</li><li>flushall：清空所有的数据库实例</li><li>config get *：查看redis中所有的配置信息</li><li>config get parameter： 查看redis中的指定的配置信息</li></ul></li></ul></li></ul><h4 id="Redis的五种数据结构"><a href="#Redis的五种数据结构" class="headerlink" title="Redis的五种数据结构"></a>Redis的五种数据结构</h4><p>​程序处理完的数据要存储到redis中，不同特点的数据要存储在Redis中不同类型的数据结构中。</p><ul><li>字符串string——单key:单value<ul><li>eg：username:zhangsan</li></ul></li><li>列表list——单key:多有序value             <ul><li>多个value之间有顺序，最左侧是表头，最右侧是表尾</li><li>每一个元素都有下标，表头元素的下标是0，依次往后排序，最后一个元素下标是列表长度-1</li><li>每一个元素的下标又可以用负数表示，负下标表示从表尾计算，最后一个元素下标用-1表示</li><li>元素在列表中的顺序或者下标由放入的顺序来决定</li><li>通过key和下标来操作数据</li><li>eg：contacts:13900009999,xxx,xxxx</li></ul></li><li>集合set——单key:多无序value<ul><li>一个key对应多个vlaue， value之间没有顺序，并且不能重复</li><li>通过业务数据直接操作集合</li><li>eg：city:bj sh cq tj</li></ul></li><li>hash——单key: 对象(属性:值)<ul><li>eg：student:id:1001,name:zhangsan,age:20</li></ul></li><li>zset——单key:多有序vlaue<ul><li>有序集合， 本质上是集合，所有元素不能重复</li><li>每一个元素都关联一个分数，redis会根据分数对元素进行自动排序，分数可以重复</li><li>既然有序集合中每一个元素都有顺序，那么也都有下标</li><li>有序集合中元素的排序规则和列表中元素的排序规则不一样</li><li>eg：city：1000 tj,1200 cq,1500 sh,2000 bj</li></ul></li></ul><h4 id="Redis中对数据的操作命令"><a href="#Redis中对数据的操作命令" class="headerlink" title="Redis中对数据的操作命令"></a>Redis中对数据的操作命令</h4><h5 id="redis中有关key的操作命令"><a href="#redis中有关key的操作命令" class="headerlink" title="redis中有关key的操作命令"></a>redis中有关key的操作命令</h5><ul><li>查看数据库中的key：keys pattern<ul><li>*：匹配0个或者多个字符<ul><li>keys *：查看数据库中所有的key</li><li>keys k*:查看数据库中所有以k开头的key</li><li>keys h*o：查看数据库中所有以h开头、以o结尾的key</li></ul></li><li>?: 匹配1个字符<ul><li>keys h?o: 查看数据库中所有以h开头、以o结尾的、并且中间只有一个字符的key</li></ul></li><li>[]:匹配[]里边的1个字符<ul><li>keys h[abc]llo：查看数据库中所有以h开头以llo结尾，并且h后边只能取abc中的一个字符的key</li></ul></li></ul></li><li>判断key在数据库中是否存在：exists key<ul><li>如果存在，则返回1；如果不存在，则返回0</li><li>exists key [key key ….] 返回值是存在的key的数量</li></ul></li><li>移动指定key到指定的数据库实例：move key index</li><li>查看指定key的剩余生存时间：ttl key<ul><li>如果key没有设置生存时间，返回-1</li><li>如果key不存在，返回-2</li></ul></li><li>设置key的最大生存时间：expire key seconds<ul><li>expire k2 20</li></ul></li><li>查看指定key的数据类型：type key<ul><li>type k1</li></ul></li><li>重命名key： rename key newkey<ul><li>rename hello k2</li></ul></li><li>删除指定的key：del key [key key …..] <ul><li>返回值是实际删除的key的数量</li></ul></li></ul><h5 id="redis中有关string类型数据的操作命令"><a href="#redis中有关string类型数据的操作命令" class="headerlink" title="redis中有关string类型数据的操作命令"></a>redis中有关string类型数据的操作命令</h5><ul><li>将string类型的数据设置到redis中：set 键 值<ul><li>如果key已经存在，则后来的value会把以前的value覆盖掉<ul><li>set zsname zhangsan</li></ul></li></ul></li><li>从redis中获取string类型的数据：get 键</li><li>追加字符串：append key value<ul><li>返回追加之后的字符串长度</li><li>如果key不存在，则新创建一个key，并且把value值设置为value。<ul><li>set phone 1389999 append phone 8888 get “phone”——“13899998888”</li></ul></li></ul></li><li>获取字符串数据的长度：strlen key</li><li>将字符串数值进行加1运算：incr key<ul><li>返回加1运算之后的数据</li><li>如果key不存在，首先设置一个key，值初始化为0，然后进行incr运算。</li><li>要求key所表示value必须是数值，否则，报错</li></ul></li><li>将字符串数值进行减1运算：decr key<ul><li>返回减1运算之后的数据</li><li>如果key不存在，首先设置一个key，值初始化为0，然后进行decr运算。</li><li>要求key所表示value必须是数值，否则，报错</li></ul></li><li>将字符串数值进行加offset运算：incrby key offset<ul><li>返回加offset运算之后的数据</li><li>如果key不存在，首先设置一个key，值初始化为0，然后进行incrby运算。</li><li>要求key所表示value必须是数值，否则，报错</li></ul></li><li>将字符串数值进行减offset运算：decrby key offset<ul><li>返回减offset运算之后的数据</li><li>如果key不存在，首先设置一个key，值初始化为0，然后进行decrby运算。</li><li>要求key所表示value必须是数值，否则，报错</li></ul></li><li>闭区间获取字符串key中从startIndex到endIndex的字符组成的子字符串：getrange key startIndex endIndex<ul><li>下标自左至右，从0开始，依次往后，最后一个字符的下标是字符串长度-1；</li></ul></li><li>用value覆盖从下标为startIndex开始的字符串，能覆盖几个字符就覆盖几个字符：setrange key startIndex value</li><li>设置字符串数据的同时，设置它最大生命周期：setex key seconds value</li><li>设置string类型的数据value到redis数据库中，当key不存在时设置成功，否则，则放弃设置：setnx key value</li><li>批量将string类型的数据设置到redis中：mset 键1 值1 键2 值2 …..</li><li>批量从redis中获取string类型的数据：mget 键1 键2 键3…..</li><li>批量设置string类型的数据value到redis数据库中，当所有key都不存在时设置成功，否则(只要有一个已经存在)，则全部放弃设置：msetnx 键1 值1 键2 值2 …..</li></ul><h5 id="redis中有关list类型数据的操作命令"><a href="#redis中有关list类型数据的操作命令" class="headerlink" title="redis中有关list类型数据的操作命令"></a>redis中有关list类型数据的操作命令</h5><ul><li>将一个或者多个值依次插入到列表的表头(左侧)：lpush key value [value value …..]</li><li>获取指定列表中指定下标区间的元素：lrange key startIndex endIndex</li><li>将一个或者多个值依次插入到列表的表尾(右侧)：rpush key value [value value …..]</li><li>从指定列表中移除并且返回表头元素：lpop key</li><li>从指定列表中移除并且返回表尾元素：rpop key</li><li>获取指定列表中指定下标的元素：lindex key index</li><li>获取指定列表的长度：llen key</li><li>根据count值移除指定列表中跟value相等的数据：lrem key count value<ul><li>count&gt;0：从列表的左侧移除count个跟value相等的数据</li><li>count&lt;0：从列表的右侧移除count个跟vlaue相等的数据</li><li>count&#x3D;0：从列表中移除所有跟value相等的数据</li></ul></li><li>截取指定列表中指定下标区间的元素组成新的列表，并且赋值给key：ltrim key startIndex endIndex<ul><li>lpush list04 1 2 3 4 5   ltrim list04 1 3结果：5 4 3 2 1</li></ul></li><li>将指定列表中指定下标的元素设置为指定值： lset key index value</li><li>将value插入到指定列表中位于pivot元素之前&#x2F;之后的位置： linsert key before&#x2F;after pivot vlaue</li></ul><h5 id="redis中有关set类型数据的操作命令"><a href="#redis中有关set类型数据的操作命令" class="headerlink" title="redis中有关set类型数据的操作命令"></a>redis中有关set类型数据的操作命令</h5><ul><li>将一个或者多个元素添加到指定的集合中：sadd key value [value value ….]<ul><li>如果元素已经存在，则会忽略</li><li>返回成功加入的元素的个数</li></ul></li><li>获取指定集合中所有的元素：smembers key</li><li>判断指定元素在指定集合中是否存在:sismember key member<ul><li>存在，返回1</li><li>不存在，返回0</li></ul></li><li>获取指定集合的长度：scard key</li><li>移除指定集合中一个或者多个元素：srem key member [member …..]<ul><li>不存在的元素会被忽略</li><li>返回成功成功移除的个数</li></ul></li><li>随机获取指定集合中的一个或者多个元素：srandmember key [count]<ul><li>count&gt;0：随机获取的多个元素之间不能重复</li><li>count&lt;0: 随机获取的多个元素之间可能重复</li></ul></li><li>从指定集合中随机移除一个或者多个元素：spop key [count]</li><li>将指定集合中的指定元素移动到另一个元素:smove source dest member</li><li>获取第一个集合中有、但是其它集合中都没有的元素组成的新集合：sdiff key key [key key ….]</li><li>获取所有指定集合中都有的元素组成的新集合：sinter key key [key key ….]</li><li>获取所有指定集合中所有元素组成的大集合：sunion key key [key key …..]</li></ul><h5 id="redis中有关hash类型的操作命令"><a href="#redis中有关hash类型的操作命令" class="headerlink" title="redis中有关hash类型的操作命令"></a>redis中有关hash类型的操作命令</h5><ul><li>将一个或者多个field-vlaue对设置到哈希表中：hset key filed1 value1 [field2 value2 ….] <ul><li>如果key field已经存在，把value会把以前的值覆盖掉</li></ul></li><li>获取指定哈希表中指定field的值：hget key field</li><li>批量将多个field-value对设置到哈希表中： hmset key filed1 value1 [field2 value2 ….] </li><li>批量获取指定哈希表中的field的值：hmget key field1 [field2 field3 ….]</li><li>获取指定哈希表中所有的field和value：hgetall key</li><li>从指定哈希表中删除一个或者多个field：hdel key field1 [field2 field3 ….]</li><li>获取指定哈希表中所有的filed个数：hlen key</li><li>判断指定哈希表中是否存在某一个field：hexists key field</li><li>获取指定哈希表中所有的value列表：hvals key</li><li>对指定哈希表中指定field值进行整数加法运算：hincrby key field int</li><li>对指定哈希表中指定field值进行浮点数加法运算：hincrbyfloat key field float</li><li>将一个field-vlaue对设置到哈希表中，当key-field已经存在时，则放弃设置；否则，设置file-value：hsetnx key field value</li></ul><h5 id="redis中有关zset类型数据的操作命令"><a href="#redis中有关zset类型数据的操作命令" class="headerlink" title="redis中有关zset类型数据的操作命令"></a>redis中有关zset类型数据的操作命令</h5><ul><li>将一个或者多个member及其score值加入有序集合：zadd key score member [score member ….]<ul><li>如果元素已经存在，则把分数覆盖</li></ul></li><li>获取指定有序集合中指定下标区间的元素：zrange key startIndex endIndex [withscores]</li><li>获取指定有序集合中指定分数区间(闭区间)的元素：zrangebyscore key min max [withscores]</li><li>删除指定有序集合中一个或者多个元素：zrem key member [member……]</li><li>获取指定有序集合中所有元素的个数：zcard key</li><li>获取指定有序集合中分数在指定区间内的元素的个数：zcount key min max</li><li>获取指定有序集合中指定元素的排名(排名从0开始)： zrank key member</li><li>获取指定有序集合中指定元素的分数：zscore key member</li><li>获取指定有序集合中指定元素的排名(按照分数从大到小的排名):zrevrank key member</li></ul><h4 id="redis的配置文件"><a href="#redis的配置文件" class="headerlink" title="redis的配置文件"></a>redis的配置文件</h4><p>​redis安装完成之后，在redis的根目录会提供一个配置文件(redis.conf)；redis服务可以参考配置文件中的参数进行运行；只有启动redis服务器指定使用的配置文件，参数才会生效；否则，redis会采用默认的参数运行</p><h5 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h5><ul><li>port：配置redis服务运行的端口号<ul><li>如果不配置port，则redis服务默认使用6379端口<ul><li>redis-cli ：默认连接127.0.0.1本机上的6379端口服务</li></ul></li><li>强调：一旦redis服务配置了port和bind(如果port不是6379、bind也不是127.0.0.1)，客户端连接redis服务时，就要指定端口和ip<ul><li>redis-cli -h bind绑定的ip地址 -p port设置的端口：连接bind绑定的ip地址主机上的port设置的端口redis服务</li><li>redis-cli -h bind绑定的ip地址 -p port设置的端口 shutdown：关闭redis服务</li></ul></li></ul></li><li>bind: redis服务被客户端连接时，客户端所能使用的ip地址<ul><li>默认情况下，不配置bind，客户端连接redis服务时，通过服务器上任何一个ip都能连接到redis服务</li><li>一旦配置了bind，客户端就只能通过bind指定的ip地址连接redis服务</li><li>一般情况下，bind都是配置服务器上某一个真实ip</li></ul></li><li>tcp-keepalive:连接保活策略<ul><li>如果两端的 TCP 连接一直没有数据交互，达到了触发 TCP 保活机制的条件，那么内核里的 TCP 协议栈就会发送探测报文。<ul><li>如果对端程序是正常工作的。当 TCP 保活的探测报文发送给对端, 对端会正常响应，这样 <strong>TCP 保活时间会被重置</strong>，等待下一个 TCP 保活时间的到来</li><li>如果对端主机崩溃，或对端由于其他原因导致报文不可达。当 TCP 保活的探测报文发送给对端后，没有响应，连续几次，达到保活探测次数后，<strong>TCP 会报告该 TCP 连接已经死亡</strong></li></ul></li></ul></li></ul><h5 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h5><ul><li>loglevel:配置日志级别,开发阶段配置debug,上线阶段配置notice或者warning</li><li>logfile：指定日志文件。redis在运行过程中，会输出一些日志信息<ul><li>默认情况下，这些日志信息会输出到控制台</li><li>使用logfile配置日志文件，使redis把日志信息输出到指定文件中</li></ul></li></ul><h5 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h5><ul><li>requirepass：设置访问redis服务时所使用的密码<ul><li>默认不使用</li><li>此参数必须在protected-mode&#x3D;yes时才起作用</li><li>一旦设置了密码验证，客户端连接redis服务时，必须使用密码连接：redis-cli -h ip -p port -a pwd</li></ul></li></ul><h4 id="redis的持久化"><a href="#redis的持久化" class="headerlink" title="redis的持久化"></a>redis的持久化</h4><p>​redis提供持久化策略，在适当的时机采用适当手段把内存中的数据持久化到磁盘中，每次redis服务启动时，都可以把磁盘上的数据再次加载内存中使用。</p><ul><li><p>RDB策略</p><ul><li>在指定时间间隔内，redis服务执行指定次数的写操作，会自动触发一次持久化操作，将内存中的数据写入到磁盘中</li><li>RDB策略是redis默认的持久化策略，redis服务开启时这种持久化策略就已经默认开启了。</li><li>配置<ul><li>save <seconds> <changes>：配置持久化策略</li><li>dbfilename：配置redis RDB持久化数据存储的文件</li><li>dir:    配置redis RDB持久化文件所在目录</li></ul></li></ul></li><li><p>AOF策略</p><ul><li>采用操作日志来记录进行每一次写操作，每次redis服务启动时，都会重新执行一遍操作日志中的指令。</li><li>效率低下，redis默认不开启AOF功能</li><li>配置<ul><li>appendonly:配置是否开启AOF策略</li><li>appendfilename：配置操作日志文件</li></ul></li></ul></li></ul><p>​根据数据的特点决定开启哪种持久化策略， 一般情况，开启RDB足够了。</p><h4 id="reids的事务"><a href="#reids的事务" class="headerlink" title="reids的事务"></a>reids的事务</h4><p>​事务：把一组数据库命令放在一起执行，保证操作原子性，要么同时成功，要么同时失败。<br>​    Redis的事务：允许把一组redis命令放在一起，把命令进行序列化，然后一起执行，保证部分原子性。</p><p>redis事务常用命令：</p><ul><li><p>开启事务：multi</p><ul><li>事务开启后，redis会将后续的命令逐个放入队列中</li><li>开启成功返回OK</li><li><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20220624202435900.png" alt="image-20220624202435900"></li></ul></li><li><p>执行事务中的命令：exec</p><ul><li><p>在一个事务中执行所有先前放入队列的命令，然后恢复正常的连接状态</p></li><li><p>如果在把命令压入队列的过程中报错，则整个队列中的命令都不会执行，执行结果报错</p></li><li><p>如果在压队列的过程中正常，在执行队列中某一个命令报错，则只会影响本条命令的执行结果，其它命令正常运行</p></li><li><p>当使用WATCH命令时，只有当受监控的键没有被修改时，EXEC命令才会执行事务中的命令;而一旦执行了exec命令，之前加的所有watch监控全部取消</p></li><li><p>命令时，如果事务执行中止，那么EXEC命令就会返回一个Null值</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.png"></p></li></ul></li><li><p>清除事务中的命令：discard</p><ul><li>清除所有先前在一个事务中放入队列的命令，并且结束事务</li><li>如果使用了watch命令，那么discard命令就会将当前连接监控的所有键取消监控</li><li><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.pwv43yf04w0.webp"></li></ul></li><li><p>监控事务：watch</p><ul><li>监控某一个键，当事务在执行过程中，此键代码的值发生变化，则本事务放弃执行；否则，正常执行</li><li>Watch命令相当于关系型数据库中的乐观锁</li><li><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.592mw8p4nreo.webp"></li></ul></li><li><p>清除事务监控：unwatch</p><ul><li>清除所有先前为一个事务监控的键</li><li>如果在watch命令之后调用了exec或d命discard令，那么就不需要手动调用unwatch命令</li></ul></li></ul><p>​单独的隔离操作：事务中的所有命令都会序列化、顺序地执行。事务在执行过程中，不会被其它客户端发来的命令请求所打断，除非使用watch命令监控某些键。</p><p>​不保证事务的原子性：redis同一个事务中如果一条命令执行失败，其后的命令仍然可能会被执行，redis的事务没有回滚。Redis已经在系统内部进行功能简化，这样可以确保更快的运行速度，因为Redis不需要事务回滚的能力。</p><h4 id="redis消息的订阅与发布"><a href="#redis消息的订阅与发布" class="headerlink" title="redis消息的订阅与发布"></a>redis消息的订阅与发布</h4><p>​redis客户端订阅频道，消息的发布者往频道上发布消息，所有订阅此频道的客户端都能够接受到消息。</p><p>​相关命令：</p><ul><li>subscrib：订阅一个或者多个频道的小溪<ul><li>eg：subscribe ch1 ch2 ch3</li></ul></li><li>publish：将消息发布到指定频道<ul><li>eg：publish ch1 hello</li></ul></li><li>psubcribe：订阅一个或者多个频道的消息，频道名支持通配符<ul><li>eg：psubscribe news.*</li></ul></li></ul><p>消息的订阅与发布有更优秀的中间件来执行（activeMQ2….)</p><h4 id="redis的主从复制"><a href="#redis的主从复制" class="headerlink" title="redis的主从复制"></a>redis的主从复制</h4><p>​主少从多、主写从读、读写分离、主写同步复制到从。</p><p>​相关命令：</p><ul><li><p>查看当前redis服务在集群中的主从角色：info replication</p><ul><li>默认情况下，所有的redis服务都是主机，即都能写和读，但是都还没有从机</li></ul></li><li><p>设置主从关系：slaveof 主机ip 端口号</p><ul><li>将当前主机设为主机ip 端口号的从机</li><li>设从不设主</li></ul></li><li><p>全量复制：一旦主从关系确定，会自动把主库上已有的数据同步复制到从库</p></li><li><p>增量复制：主库写数据会自动同步到从库</p></li><li><p>主写从读，读写分离</p><ul><li>主机宕机、从机原地待命</li><li>主机恢复、一切恢复正常</li><li>从机宕机、主机少一个从机、其它从机不变</li><li>从机恢复、从机为主机，需要重新设置主从关系</li></ul></li><li><p>从机上位</p><ul><li>主机宕机、从机原地待命</li><li>从机断开原来主从关系：slaveof no one</li><li>重新设置主从关系：slaveof 主机ip 主机port</li><li>既是主机又是从机的只能读不能写</li></ul></li></ul><p>​一台主机配置多台从机，一台从机又可以配置多台从机，从而形成一个庞大的集群架构。减轻一台主机的压力，但是增加了服务间的延迟时间。</p><h5 id="redis的哨兵模式"><a href="#redis的哨兵模式" class="headerlink" title="redis的哨兵模式"></a>redis的哨兵模式</h5><p>​主机宕机、从机上位的自动版。Redis提供了哨兵的命令，哨兵命令是一个独立的进程，哨兵通过发送命令，来监控主从服务器的运行状态，如果检测到master故障了根据投票数自动将某一个slave转换master，然后通过消息订阅模式通知其它slave，让它们切换主机。然而，一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多哨兵进行监控。</p><p>相关命令：</p><ul><li>创建哨兵文件sentinel.conf</li><li>启动哨兵：redis-sentinel  哨兵文件全路径</li><li>开启监控：sentinel monitor dc-redis  指定监控主机的ip地址port端口得到哨兵的投票数<ul><li>当哨兵投票数大于或者等于此数时切换主从关系</li></ul></li><li>设置密码：sentinel auth-pass mymaster pwd</li></ul><p>哨兵模式三大任务：监控，提醒，自动故障迁移。</p><h3 id="Jedis操作Redis"><a href="#Jedis操作Redis" class="headerlink" title="Jedis操作Redis"></a>Jedis操作Redis</h3><p>​jedis是redis官方提供的在java应用中操作redis数据的技术。 把所有的redis指令都定义成java工具类的方法，方法名和redis的指令名完全一样。</p><p>​开发通过程序访问redis，只需要使用工具类及其方法即可。</p><p>在java程序中访问redis：</p><ol><li><p>创建maven版的java工程</p></li><li><p>添加jedis依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>​3.创建Jedis连接(关闭linux的防火墙)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//连接jedis</span>Jedis jedis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"主机ip"</span><span class="token punctuation">,</span>主机port<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​</p><p>​4.使用Jedis类中的方法操作redis</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//连接redis</span>Jedis jedis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.148.132"</span><span class="token punctuation">,</span><span class="token number">6380</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用jedis对象</span>String res<span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String key<span class="token operator">:</span>keys<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Boolean k2 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k2<span class="token punctuation">)</span><span class="token punctuation">;</span>Long k21 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k21<span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//.......</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遇到的问题及解决方法：</p><p>问题1： java.net.SocketTimeoutException: connect timed out</p><p>解决方法：</p><pre><code> 1. 关闭服务器防火墙：systemctl stop firewalld 2. 重启redis服务（可能之前改了配置没有重启服务，还存有缓存，导致客户端向服务器发送接口的时候没有得到响应）  - 导致有缓存的原因：    -  防火墙放开端口    - 后台更改了ip配置等等</code></pre><h3 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h3><ol><li><p>官网下载redis到window上</p></li><li><p>使用Xftp上传redis-5.0.2.tar.gz到Linux系统</p></li><li><p>执行linux命令tar -zxvf redis-5.0.2.tar.gz -C &#x2F;opt 解压redis-5.0.2.tar.gz到&#x2F;opt目录</p></li><li><p>联网情况下执行命令yum -y install gcc安装编译器gcc</p><ul><li>编译结果：在redis的安装目录下src目录中，生成redis的一系列可执行文件。</li></ul></li><li><p>cd进入解压目录，执行命令make编译redis</p><ul><li>编译结果：在redis的安装目录下src目录中，生成redis的一系列可执行文件。</li></ul></li><li><p>执行命令make install 把redis的安装目录下src目录中生成redis的一系列可执行文件拷贝到&#x2F;usr&#x2F;local&#x2F;bin中，在任何目录下都可以执行redis命令。</p></li></ol><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/masgito.gif"></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2022/06/19/linux-chang-yong-ming-ling/"/>
      <url>/2022/06/19/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.6pu3s71v01vk.webp"></p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.5f7ho08igccg.webp"></p><h3 id="文件查看和处理"><a href="#文件查看和处理" class="headerlink" title="文件查看和处理"></a>文件查看和处理</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.1zyi7i2i6tog.webp"></p><h3 id="打包和解压"><a href="#打包和解压" class="headerlink" title="打包和解压"></a>打包和解压</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.eokk45cp1lc.webp"></p><h3 id="PRM包管理命令"><a href="#PRM包管理命令" class="headerlink" title="PRM包管理命令"></a>PRM包管理命令</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.5syg60d4dgo.webp"></p><h3 id="YUM包管理命令"><a href="#YUM包管理命令" class="headerlink" title="YUM包管理命令"></a>YUM包管理命令</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.6cwkf6whh1j4.webp"></p><h3 id="DPKG包管理命令"><a href="#DPKG包管理命令" class="headerlink" title="DPKG包管理命令"></a>DPKG包管理命令</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.1yv4brfrt8tc.webp"></p><h3 id="关机-x2F-重启-x2F-注销"><a href="#关机-x2F-重启-x2F-注销" class="headerlink" title="关机&#x2F;重启&#x2F;注销"></a>关机&#x2F;重启&#x2F;注销</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.3umgts9q3o3k.webp"></p><h3 id="APT软件工具"><a href="#APT软件工具" class="headerlink" title="APT软件工具"></a>APT软件工具</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.5acbmz27hw1s.webp"></p><h3 id="常见系统服务命令"><a href="#常见系统服务命令" class="headerlink" title="常见系统服务命令"></a>常见系统服务命令</h3><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20220619175301848.png"></p><h3 id="系统信息和性能查看"><a href="#系统信息和性能查看" class="headerlink" title="系统信息和性能查看"></a>系统信息和性能查看</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.3uhu859124ow.webp"></p><h3 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.5aggikeayt8g.webp"></p><h3 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.61q57s3lbwu8.webp"></p><h3 id="网络和进程管理"><a href="#网络和进程管理" class="headerlink" title="网络和进程管理"></a>网络和进程管理</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.p7k4i1m83sg.webp"></p><h3 id="常见系统服务命令-1"><a href="#常见系统服务命令-1" class="headerlink" title="常见系统服务命令"></a>常见系统服务命令</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/20220619/image.77a0d0mf9a80.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 速查备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的常用正则</title>
      <link href="/2022/06/10/js-zhong-de-chang-yong-zheng-ze/"/>
      <url>/2022/06/10/js-zhong-de-chang-yong-zheng-ze/</url>
      
        <content type="html"><![CDATA[<p>​正则表达式定义字符串的匹配模式，可用用来判断指定的具体字符串是否符合匹配模式。</p><h3 id="语法通则"><a href="#语法通则" class="headerlink" title="语法通则"></a>语法通则</h3><ul><li><p>&#x2F;&#x2F;在js中定义一个正则表达式eg：var regExp&#x3D;&#x2F;……&#x2F;;</p></li><li><p>^匹配字符串的开头位置</p></li><li><p>$匹配字符串的结尾位置</p></li><li><p>[]匹配指定字符集中的一位字符eg：var regExp&#x3D;&#x2F;^[abc]$&#x2F;;var regExp&#x3D;&#x2F;^[a-z0-9]$&#x2F;;</p></li><li><p>{}匹配次数eg：var regExp&#x3D;&#x2F;^[abc]{5}$&#x2F;;</p></li><li><ul><li>{m}匹配m次</li><li>{m,n}匹配m到n次</li><li>{m,}匹配m次或更多次</li></ul></li><li><p>特殊符号</p></li><li><p>​\d匹配一一位数字，相当于[0-9]</p></li><li><p>​\D匹配一位非数字</p></li><li><p>​\w匹配所有字符，包括字母、数字、下划线以及之外的字符</p></li><li><p>​\W匹配非字符，除了字母、数字、下划线之外的字符</p></li><li><p>​*匹配0次或多次，相当于[0,]</p></li><li><p>​+匹配1次或多次，相当于[1,]</p></li><li><p>​?匹配0次或1次，相当于[0,1]</p></li></ul><h3 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h3><ul><li><p>数字：^[0-9]*$</p></li><li><p>n位的数字：^\d{n}$</p></li><li><p>至少n位的数字：^\d{n,}$</p></li><li><p>m-n位的数字：^\d{m,n}$</p></li><li><p>零和非零开头的数字：^(0|[1-9][0-9]*)$</p></li><li><p>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</p></li><li><p>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$</p></li><li><p>正数、负数、和小数：^(-|+)?\d+(.\d+)?$</p></li><li><p>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</p></li><li><p>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</p></li><li><p>非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]<em>){1,3}$ 或 ^+?[1-9][0-9]</em>$</p></li><li><p>非零的负整数：^-[1-9][]0-9”<em>$ 或 ^-[1-9]\d</em>$</p></li><li><p>非负整数：^(([1-9]\d*)|0)$</p></li><li><p>非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</p></li><li><p>非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0$</p></li><li><p>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*))|0?.0+|0$</p></li><li><p>正浮点数：^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>))$</p></li><li><p>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>)))$</p></li><li><p>浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0)$</p></li></ul><h3 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h3><ul><li><p>汉字：^[\u4e00-\u9fa5]{0,}$</p></li><li><p>英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</p></li><li><p>长度为3-20的所有字符：^.{3,20}$</p></li><li><p>由26个英文字母组成的字符串：^[A-Za-z]+$</p></li><li><p>由26个大写英文字母组成的字符串：^[A-Z]+$</p></li><li><p>由26个小写英文字母组成的字符串：^[a-z]+$</p></li><li><p>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</p></li><li><p>由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$</p></li><li><p>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</p></li><li><p>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</p></li><li><p>可以输入含有^%&amp;’,;&#x3D;?$&quot;等字符：[^%&amp;’,;&#x3D;?$\x22]+ 12 禁止输入含有<del>的字符：[^</del>\x22]+</p></li></ul><h3 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h3><ol><li><p>Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$</p></li><li><p>域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(&#x2F;.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+&#x2F;.?</p></li><li><p>InternetURL：[a-zA-z]+:&#x2F;&#x2F;[^\s]* 或 ^http:&#x2F;&#x2F;([\w-]+.)+[\w-]+(&#x2F;[\w-.&#x2F;?%&amp;&#x3D;]*)?$</p></li><li><p>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</p></li><li><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</p></li><li><p>国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</p></li><li><p>身份证号(15位、18位数字)：^\d{15}|\d{18}$</p></li><li><p>短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</p></li><li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p></li><li><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</p></li><li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?&#x3D;.<em>\d)(?&#x3D;.</em>[a-z])(?&#x3D;.*[A-Z]).{8,10}$</p></li><li><p>日期格式：^\d{4}-\d{1,2}-\d{1,2}</p></li><li><p>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</p></li><li><p>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</p></li><li><p>钱的输入格式：</p></li><li><p>1.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$</p></li><li><p>2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</p></li><li><p>3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</p></li><li><p>4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</p></li><li><p>5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$</p></li><li><p>6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$</p></li><li><p>7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</p></li></ol><p>23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</p><ol start="24"><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li><li>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</li><li>中文字符的正则表达式：[\u4e00-\u9fa5]</li><li>双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li><li>空白行的正则表达式：\n\s*\r (可以用来删除空白行)</li><li>HTML标记的正则表达式：&lt;(\S*?)[^&gt;]<em>&gt;.</em>?&lt;&#x2F;\1&gt;|&lt;.*? &#x2F;&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</li><li>首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li><li>腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)</li><li>中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</li><li>IP地址：\d+.\d+.\d+.\d+ (提取IP地址时有用)</li><li>IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</li></ol><blockquote><p>附：正则表达式语法大全：<a href="https://www.runoob.com/regexp/regexp-tutorial.html">https://www.runoob.com/regexp/regexp-tutorial.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 速查备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC核心技术</title>
      <link href="/2022/04/22/jdbc/"/>
      <url>/2022/04/22/jdbc/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JDBC概述"><a href="#1-JDBC概述" class="headerlink" title="1. JDBC概述"></a>1. JDBC概述</h2><h3 id="1-1-数据的持久化"><a href="#1-1-数据的持久化" class="headerlink" title="1.1 数据的持久化"></a>1.1 数据的持久化</h3><ul><li><p>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>上加以”固化”<strong>，而持久化的实现过程大多通过各种关系数据库来完成</strong>。</p></li><li><p>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</p></li></ul><h3 id="1-2-Java中的数据存储技术"><a href="#1-2-Java中的数据存储技术" class="headerlink" title="1.2 Java中的数据存储技术"></a>1.2 Java中的数据存储技术</h3><ul><li><p>在Java中，数据库存取技术可分为如下几类：</p><ul><li><p><strong>JDBC</strong>直接访问数据库</p></li><li><p>JDO (Java Data Object )技术</p></li><li><p><strong>第三方O&#x2F;R工具</strong>，如Hibernate, Mybatis 等</p></li></ul></li><li><p>JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。</p></li></ul><h3 id="1-3-JDBC介绍"><a href="#1-3-JDBC介绍" class="headerlink" title="1.3 JDBC介绍"></a>1.3 JDBC介绍</h3><ul><li>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</li><li>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</li><li>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li></ul><hr><ul><li>总结如下：</li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4rub99q6tkw0.webp"></p><h3 id="1-4-JDBC体系结构"><a href="#1-4-JDBC体系结构" class="headerlink" title="1.4 JDBC体系结构"></a>1.4 JDBC体系结构</h3><ul><li>JDBC接口（API）包括两个层次：<ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li><strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li></ul></li></ul><blockquote><p><strong>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</strong></p><p><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。————面向接口编程</strong></p></blockquote><h3 id="1-5-JDBC程序编写步骤"><a href="#1-5-JDBC程序编写步骤" class="headerlink" title="1.5 JDBC程序编写步骤"></a>1.5 JDBC程序编写步骤</h3><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.68itsy7016gw.webp"></p><blockquote><p>补充：ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote><h2 id="2-获取数据库连接"><a href="#2-获取数据库连接" class="headerlink" title="2. 获取数据库连接"></a>2. 获取数据库连接</h2><h3 id="2-1-要素一：Driver接口实现类"><a href="#2-1-要素一：Driver接口实现类" class="headerlink" title="2.1 要素一：Driver接口实现类"></a>2.1 要素一：Driver接口实现类</h3><h4 id="2-1-1-Driver接口介绍"><a href="#2-1-1-Driver接口介绍" class="headerlink" title="2.1.1 Driver接口介绍"></a>2.1.1 Driver接口介绍</h4><ul><li><p>java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p></li><li><p>在程序中不需要直接去访问实现了 Driver 接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现。</p><ul><li>Oracle的驱动：<strong>oracle.jdbc.driver.OracleDriver</strong></li><li>mySql的驱动： <strong>com.mysql.jdbc.Driver</strong></li></ul></li></ul><p>将相应驱动jar包拷贝到Java工程的一个目录中，习惯上新建一个lib文件夹。</p><p>注意：如果是Dynamic Web Project（动态的web项目）话，则是把驱动jar放到WebContent（有的开发工具叫WebRoot）目录中的WEB-INF目录中的lib目录下即可。</p><h4 id="2-1-2-加载与注册JDBC驱动"><a href="#2-1-2-加载与注册JDBC驱动" class="headerlink" title="2.1.2 加载与注册JDBC驱动"></a>2.1.2 加载与注册JDBC驱动</h4><ul><li><p>加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p><ul><li><strong>Class.forName(“com.mysql.jdbc.Driver”);</strong></li></ul></li><li><p>注册驱动：DriverManager 类是驱动程序管理器类，负责管理驱动程序</p><ul><li><p><strong>使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动</strong></p></li><li><p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类<strong>都</strong>包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。下图是MySQL的Driver实现类的源码：</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.2gqd350uqg4.webp"></p></li></ul></li></ul><h3 id="2-2-要素二：URL"><a href="#2-2-要素二：URL" class="headerlink" title="2.2 要素二：URL"></a>2.2 要素二：URL</h3><ul><li><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</p></li><li><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。 </p><ul><li><strong>jdbc:子协议:子名称</strong></li><li><strong>协议</strong>：JDBC URL中的协议总是jdbc </li><li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li><li><strong>子名称</strong>：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)<strong>，端口号，数据库名</strong></li></ul></li><li><p>举例：</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.7a82080h84qo.webp"></p></li><li><p><strong>几种常用数据库的 JDBC URL</strong></p><ul><li><p>MySQL的连接URL编写方式：</p><ul><li>jdbc:mysql:&#x2F;&#x2F;主机名称:mysql服务端口号&#x2F;数据库名称?参数&#x3D;值&amp;参数&#x3D;值</li><li>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;tu**?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8**（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</li><li>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;tu?user&#x3D;root&amp;password&#x3D;123456</li></ul></li><li><p>Oracle 9i的连接URL编写方式：</p><ul><li>jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</li></ul></li><li><p>jdbc:oracle:thin:@localhost:1521:tu</p></li><li><p>SQLServer的连接URL编写方式：</p></li><li><p>jdbc:sqlserver:&#x2F;&#x2F;主机名称:sqlserver服务端口号:DatabaseName&#x3D;数据库名称</p></li><li><p>jdbc:sqlserver:&#x2F;&#x2F;localhost:1433:DatabaseName&#x3D;tu</p></li></ul></li></ul><h3 id="2-3-要素三：用户名和密码"><a href="#2-3-要素三：用户名和密码" class="headerlink" title="2.3 要素三：用户名和密码"></a>2.3 要素三：用户名和密码</h3><ul><li>user,password可以用“属性名&#x3D;属性值”方式告诉数据库</li><li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li></ul><h3 id="2-4-数据库连接方式举例"><a href="#2-4-数据库连接方式举例" class="headerlink" title="2.4 数据库连接方式举例"></a>2.4 数据库连接方式举例</h3><h4 id="2-4-1-连接方式一"><a href="#2-4-1-连接方式一" class="headerlink" title="2.4.1 连接方式一"></a>2.4.1 连接方式一</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1.提供java.sql.Driver接口实现类的对象</span>            Driver driver <span class="token operator">=</span> null<span class="token punctuation">;</span>            driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.提供url，指明具体操作的数据</span>            String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.提供Properties的对象，指明用户名和密码</span>            Properties info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.调用driver的connect()，获取连接</span>            Connection conn <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：上述代码中显式出现了第三方数据库的API</p></blockquote><h4 id="2-4-2-连接方式二"><a href="#2-4-2-连接方式二" class="headerlink" title="2.4.2 连接方式二"></a>2.4.2 连接方式二</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1.实例化Driver</span>            String className <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span>            Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>            Driver driver <span class="token operator">=</span> <span class="token punctuation">(</span>Driver<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.提供url，指明具体操作的数据</span>            String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.提供Properties的对象，指明用户名和密码</span>            Properties info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.调用driver的connect()，获取连接</span>            Connection conn <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。</p></blockquote><h4 id="2-4-3-连接方式三"><a href="#2-4-3-连接方式三" class="headerlink" title="2.4.3 连接方式三"></a>2.4.3 连接方式三</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1.数据库连接的4个基本要素：</span>            String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>            String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>            String driverName <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.实例化Driver</span>            Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Driver driver <span class="token operator">=</span> <span class="token punctuation">(</span>Driver<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.注册驱动</span>            DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.获取连接</span>            Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。</p></blockquote><h4 id="2-4-4-连接方式四"><a href="#2-4-4-连接方式四" class="headerlink" title="2.4.4 连接方式四"></a>2.4.4 连接方式四</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1.数据库连接的4个基本要素：</span>            String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>            String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>            String driverName <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.加载驱动 （①实例化Driver ②注册驱动）</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Driver driver = (Driver) clazz.newInstance();</span>            <span class="token comment" spellcheck="true">//3.注册驱动</span>            <span class="token comment" spellcheck="true">//DriverManager.registerDriver(driver);</span>            <span class="token comment" spellcheck="true">/*            可以注释掉上述代码的原因，是因为在mysql的Driver类中声明有：            static &amp;#123;                try &amp;#123;                    DriverManager.registerDriver(new Driver());                &amp;#125; catch (SQLException var1) &amp;#123;                    throw new RuntimeException("Can't register driver!");                &amp;#125;            &amp;#125;             */</span>            <span class="token comment" spellcheck="true">//3.获取连接</span>            Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。</p></blockquote><h4 id="2-4-5-连接方式五-最终版"><a href="#2-4-5-连接方式五-最终版" class="headerlink" title="2.4.5 连接方式五(最终版)"></a>2.4.5 连接方式五(最终版)</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testConnection5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.加载配置文件</span>        InputStream is <span class="token operator">=</span> ConnectionTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.读取配置信息</span>        String user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String driverClass <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.加载驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.获取连接</span>        Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，配置文件声明在工程的src目录下：【jdbc.properties】</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">user</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">abc123</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test</span><span class="token attr-name">driverClass</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：使用配置文件的方式保存配置信息，在代码中加载配置文件</p><p><strong>使用配置文件的好处：</strong></p><p>①实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码<br>②如果修改了配置信息，省去重新编译的过程。</p></blockquote><h2 id="3-使用PreparedStatement实现CRUD操作"><a href="#3-使用PreparedStatement实现CRUD操作" class="headerlink" title="3. 使用PreparedStatement实现CRUD操作"></a>3. 使用PreparedStatement实现CRUD操作</h2><h3 id="3-1-操作和访问数据库"><a href="#3-1-操作和访问数据库" class="headerlink" title="3.1 操作和访问数据库"></a>3.1 操作和访问数据库</h3><ul><li><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p></li><li><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.10ev8byxtar4.webp"></p></li></ul><h3 id="3-2-使用Statement操作数据表的弊端"><a href="#3-2-使用Statement操作数据表的弊端" class="headerlink" title="3.2 使用Statement操作数据表的弊端"></a>3.2 使用Statement操作数据表的弊端</h3><ul><li><p>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</p></li><li><p>Statement 接口中定义了下列方法用于执行 SQL 语句：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">int</span> excuteUpdate<span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>：执行更新操作<span class="token keyword">INSERT</span>、<span class="token keyword">UPDATE</span>、<span class="token keyword">DELETE</span>ResultSet executeQuery<span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>：执行查询操作<span class="token keyword">SELECT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>但是使用Statement操作数据表存在弊端：</p><ul><li><strong>问题一：存在拼串操作，繁琐</strong></li><li><strong>问题二：存在SQL注入问题</strong></li></ul></li><li><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令(如：SELECT user, password FROM user_table WHERE user&#x3D;’a’ OR 1 &#x3D; ‘ AND password &#x3D; ‘ OR ‘1’ &#x3D; ‘1’) ，从而利用系统的 SQL 引擎完成恶意行为的做法。</p></li><li><p>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了。</p></li><li><p>代码演示：</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatementTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用Statement的弊端：需要拼写sql语句，并且存在SQL注入的问题</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"用户名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String userName <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"密   码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// SELECT user,password FROM user_table WHERE USER = '1' or ' AND PASSWORD = '='1' or '1' = '1';</span>        String sql <span class="token operator">=</span> <span class="token string">"SELECT user,password FROM user_table WHERE USER = '"</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">"' AND PASSWORD = '"</span> <span class="token operator">+</span> password                <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登陆成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用Statement实现对数据表的查询操作</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">get</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        T t <span class="token operator">=</span> null<span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement st <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 1.加载配置文件</span>            InputStream is <span class="token operator">=</span> StatementTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.读取配置信息</span>            String user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String url <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String driverClass <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3.加载驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4.获取连接</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            st <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取结果集的元数据</span>            ResultSetMetaData rsmd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取结果集的列数</span>            <span class="token keyword">int</span> columnCount <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// //1. 获取列的名称</span>                    <span class="token comment" spellcheck="true">// String columnName = rsmd.getColumnName(i+1);</span>                    <span class="token comment" spellcheck="true">// 1. 获取列的别名</span>                    String columnName <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 2. 根据列名获取对应数据表中的数据</span>                    Object columnVal <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 3. 将数据表中得到的数据，封装进对象</span>                    Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> columnVal<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 关闭资源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>综上：</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1mv25vf32ae8.webp"></p><h3 id="3-3-PreparedStatement的使用"><a href="#3-3-PreparedStatement的使用" class="headerlink" title="3.3 PreparedStatement的使用"></a>3.3 PreparedStatement的使用</h3><h4 id="3-3-1-PreparedStatement介绍"><a href="#3-3-1-PreparedStatement介绍" class="headerlink" title="3.3.1 PreparedStatement介绍"></a>3.3.1 PreparedStatement介绍</h4><ul><li><p>可以通过调用 Connection 对象的 <strong>preparedStatement(String sql)</strong> 方法获取 PreparedStatement 对象</p></li><li><p><strong>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</strong></p></li><li><p>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</p></li></ul><h4 id="3-3-2-PreparedStatement-vs-Statement"><a href="#3-3-2-PreparedStatement-vs-Statement" class="headerlink" title="3.3.2 PreparedStatement vs Statement"></a>3.3.2 PreparedStatement vs Statement</h4><ul><li><p>代码的可读性和可维护性。</p></li><li><p><strong>PreparedStatement 能最大可能提高性能：</strong></p><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li><li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样<u>每执行一次都要对传入的语句编译一次。</u></li><li>(语法检查，语义检查，翻译成二进制命令，缓存)</li></ul></li><li><p>PreparedStatement 可以防止 SQL 注入</p></li></ul><h4 id="3-3-3-Java与SQL对应数据类型转换表"><a href="#3-3-3-Java与SQL对应数据类型转换表" class="headerlink" title="3.3.3 Java与SQL对应数据类型转换表"></a>3.3.3 Java与SQL对应数据类型转换表</h4><table><thead><tr><th>Java类型</th><th>SQL类型</th></tr></thead><tbody><tr><td>boolean</td><td>BIT</td></tr><tr><td>byte</td><td>TINYINT</td></tr><tr><td>short</td><td>SMALLINT</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>BIGINT</td></tr><tr><td>String</td><td>CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td>byte   array</td><td>BINARY  ,    VAR BINARY</td></tr><tr><td>java.sql.Date</td><td>DATE</td></tr><tr><td>java.sql.Time</td><td>TIME</td></tr><tr><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr></tbody></table><h4 id="3-3-4-使用PreparedStatement实现增、删、改操作"><a href="#3-3-4-使用PreparedStatement实现增、删、改操作" class="headerlink" title="3.3.4 使用PreparedStatement实现增、删、改操作"></a>3.3.4 使用PreparedStatement实现增、删、改操作</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span>Object <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1.获取数据库的连接</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.填充占位符</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//4.执行sql语句</span>            ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.关闭资源</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-5-使用PreparedStatement实现查询操作"><a href="#3-3-5-使用PreparedStatement实现查询操作" class="headerlink" title="3.3.5 使用PreparedStatement实现查询操作"></a>3.3.5 使用PreparedStatement实现查询操作</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 通用的针对于不同表的查询:返回一个对象 (version 1.0)</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">,</span> String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 1.获取数据库连接</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.预编译sql语句，得到PreparedStatement对象</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3.填充占位符</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4.执行executeQuery(),得到结果集：ResultSet</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 5.得到结果集的元数据：ResultSetMetaData</span>            ResultSetMetaData rsmd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span>            <span class="token keyword">int</span> columnCount <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                T t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 遍历每一个列</span>                    <span class="token comment" spellcheck="true">// 获取列值</span>                    Object columnVal <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 获取列的别名:列的别名，使用类的属性名充当</span>                    String columnLabel <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 6.2使用反射，给对象的相应属性赋值</span>                    Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> columnVal<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 7.关闭资源</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入问题。</p></blockquote><h3 id="3-4-ResultSet与ResultSetMetaData"><a href="#3-4-ResultSet与ResultSetMetaData" class="headerlink" title="3.4 ResultSet与ResultSetMetaData"></a>3.4 ResultSet与ResultSetMetaData</h3><h4 id="3-4-1-ResultSet"><a href="#3-4-1-ResultSet" class="headerlink" title="3.4.1 ResultSet"></a>3.4.1 ResultSet</h4><ul><li><p>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</p></li><li><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</p></li><li><p>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</p></li><li><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</p></li><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li><li><p>ResultSet 接口的常用方法：</p><ul><li><p>boolean next()</p></li><li><p>getString()</p></li><li><p>…</p></li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6n0ak2bmc5xc.webp"></p></li></ul><h4 id="3-4-2-ResultSetMetaData"><a href="#3-4-2-ResultSetMetaData" class="headerlink" title="3.4.2 ResultSetMetaData"></a>3.4.2 ResultSetMetaData</h4><ul><li><p>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</p></li><li><p>ResultSetMetaData meta &#x3D; rs.getMetaData();</p><ul><li><p><strong>getColumnName</strong>(int column)：获取指定列的名称</p></li><li><p><strong>getColumnLabel</strong>(int column)：获取指定列的别名</p></li><li><p><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </p></li><li><p>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。 </p></li><li><p>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。 </p></li><li><p><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。 </p></li><li><p>isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。</p></li></ul></li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6f6vsjks5r40.webp"></p><p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p><p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p><p><strong>问题2：关于ResultSetMetaData</strong></p><ol><li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li><li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li><li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li></ol><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1sniav5q63nk.webp"></p><h3 id="3-5-资源的释放"><a href="#3-5-资源的释放" class="headerlink" title="3.5 资源的释放"></a>3.5 资源的释放</h3><ul><li>释放ResultSet, Statement,Connection。</li><li>数据库连接（Connection）是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早的释放。</strong></li><li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li></ul><h3 id="3-6-JDBC-API小结"><a href="#3-6-JDBC-API小结" class="headerlink" title="3.6 JDBC API小结"></a>3.6 JDBC API小结</h3><ul><li><p>两种思想</p><ul><li><p>面向接口编程的思想</p></li><li><p>ORM思想(object relational mapping)</p><ul><li>一个数据表对应一个java类</li><li>表中的一条记录对应java类的一个对象</li><li>表中的一个字段对应java类的一个属性</li></ul></li></ul><blockquote><p>sql是需要结合列名和表类的属性名来写。注意在sql语句中将列名起别名为对应的表属性名。</p></blockquote></li><li><p>两种技术</p><ul><li>JDBC结果集的元数据：ResultSetMetaData<ul><li>获取列数：getColumnCount()</li><li>获取列的别名：getColumnLabel()</li></ul></li><li>通过反射，创建指定类的对象，获取指定的属性并赋值</li></ul></li></ul><hr><h2 id="4-操作BLOB类型字段"><a href="#4-操作BLOB类型字段" class="headerlink" title="4. 操作BLOB类型字段"></a>4. 操作BLOB类型字段</h2><h3 id="4-1-MySQL-BLOB类型"><a href="#4-1-MySQL-BLOB类型" class="headerlink" title="4.1 MySQL BLOB类型"></a>4.1 MySQL BLOB类型</h3><ul><li><p>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</p></li><li><p>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</p></li><li><p>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</p></li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.24t2ytbjlasg.webp"></p><ul><li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet&#x3D;16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li></ul><h3 id="4-2-向数据表中插入大数据类型"><a href="#4-2-向数据表中插入大数据类型" class="headerlink" title="4.2 向数据表中插入大数据类型"></a>4.2 向数据表中插入大数据类型</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取连接</span>Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into customers(name,email,birth,photo)values(?,?,?,?)"</span><span class="token punctuation">;</span>PreparedStatement ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 填充占位符</span>ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"徐海强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"xhq@126.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 操作Blob类型的变量</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"xhq.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setBlob</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行</span>ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-修改数据表中的Blob类型字段"><a href="#4-3-修改数据表中的Blob类型字段" class="headerlink" title="4.3 修改数据表中的Blob类型字段"></a>4.3 修改数据表中的Blob类型字段</h3><pre class="line-numbers language-java"><code class="language-java">Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String sql <span class="token operator">=</span> <span class="token string">"update customers set photo = ? where id = ?"</span><span class="token punctuation">;</span>PreparedStatement ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 填充占位符</span><span class="token comment" spellcheck="true">// 操作Blob类型的变量</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"coffee.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setBlob</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> fis<span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-从数据表中读取大数据类型"><a href="#4-4-从数据表中读取大数据类型" class="headerlink" title="4.4 从数据表中读取大数据类型"></a>4.4 从数据表中读取大数据类型</h3><pre class="line-numbers language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"SELECT id, name, email, birth, photo FROM customer WHERE id = ?"</span><span class="token punctuation">;</span>conn <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Integer id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String email <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Date birth <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Customer cust <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> birth<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cust<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//读取Blob类型的字段</span>    Blob photo <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getBlob</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    InputStream is <span class="token operator">=</span> photo<span class="token punctuation">.</span><span class="token function">getBinaryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OutputStream os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"c.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>is <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>os <span class="token operator">!=</span>  null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-批量插入"><a href="#5-批量插入" class="headerlink" title="5. 批量插入"></a>5. 批量插入</h2><h3 id="5-1-批量执行SQL语句"><a href="#5-1-批量执行SQL语句" class="headerlink" title="5.1 批量执行SQL语句"></a>5.1 批量执行SQL语句</h3><p>当需要成批插入或者更新记录时，可以采用Java的批量<strong>更新</strong>机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</p><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul><h3 id="5-2-高效的批量插入"><a href="#5-2-高效的批量插入" class="headerlink" title="5.2 高效的批量插入"></a>5.2 高效的批量插入</h3><p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表。创建如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> goods<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-1-实现层次一：使用Statement"><a href="#5-2-1-实现层次一：使用Statement" class="headerlink" title="5.2.1 实现层次一：使用Statement"></a>5.2.1 实现层次一：使用Statement</h4><pre class="line-numbers language-java"><code class="language-java">Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Statement st <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">20000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"insert into goods(name) values('name_' + "</span><span class="token operator">+</span> i <span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-2-实现层次二：使用PreparedStatement"><a href="#5-2-2-实现层次二：使用PreparedStatement" class="headerlink" title="5.2.2 实现层次二：使用PreparedStatement"></a>5.2.2 实现层次二：使用PreparedStatement</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into goods(name)values(?)"</span><span class="token punctuation">;</span>PreparedStatement ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">20000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"name_"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//82340</span>                JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-3-实现层次三"><a href="#5-2-3-实现层次三" class="headerlink" title="5.2.3 实现层次三"></a>5.2.3 实现层次三</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 修改1： 使用 addBatch() / executeBatch() / clearBatch() * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。 *  ?rewriteBatchedStatements=true 写在配置文件的url后面 * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar *  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"insert into goods(name)values(?)"</span><span class="token punctuation">;</span>    PreparedStatement ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"name_"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//1.“攒”sql</span>        ps<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.执行</span>            ps<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.清空</span>            ps<span class="token punctuation">.</span><span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20000条：625                                                                         //1000000条:14733  </span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-4-实现层次四"><a href="#5-2-4-实现层次四" class="headerlink" title="5.2.4 实现层次四"></a>5.2.4 实现层次四</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 层次四：在层次三的基础上操作* 使用Connection 的 setAutoCommit(false)  /  commit()*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1.设置为不自动提交数据</span>    conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"insert into goods(name)values(?)"</span><span class="token punctuation">;</span>    PreparedStatement ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"name_"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//1.“攒”sql</span>        ps<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.执行</span>            ps<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.清空</span>            ps<span class="token punctuation">.</span><span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.提交数据</span>    conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1000000条:4978 </span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-数据库事务"><a href="#6-数据库事务" class="headerlink" title="6. 数据库事务"></a>6. 数据库事务</h2><h3 id="6-1-数据库事务介绍"><a href="#6-1-数据库事务介绍" class="headerlink" title="6.1 数据库事务介绍"></a>6.1 数据库事务介绍</h3><ul><li><p><strong>事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。</strong></p></li><li><p><strong>事务处理（事务操作）：</strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都**被提交(commit)<strong>，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务</strong>回滚(rollback)**到最初状态。</p></li><li><p>为确保数据库中数据的<strong>一致性</strong>，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。</p></li></ul><h3 id="6-2-JDBC事务处理"><a href="#6-2-JDBC事务处理" class="headerlink" title="6.2 JDBC事务处理"></a>6.2 JDBC事务处理</h3><ul><li><p>数据一旦提交，就不可回滚。</p></li><li><p>数据什么时候意味着提交？</p><ul><li><strong>当一个连接对象被创建时，默认情况下是自动提交事务</strong>：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li><li><strong>关闭数据库连接，数据就会自动的提交。</strong>如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li></ul></li><li><p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p><ul><li>调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 <strong>commit();</strong> 方法提交事务</li><li>在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</li></ul><blockquote><p>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p></blockquote></li></ul><p>【案例：用户AA向用户BB转账100】</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJDBCTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.获取数据库连接</span>        conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.开启事务</span>        conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.进行数据库操作</span>        String sql1 <span class="token operator">=</span> <span class="token string">"update user_table set balance = balance - 100 where user = ?"</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql1<span class="token punctuation">,</span> <span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟网络异常</span>        <span class="token comment" spellcheck="true">//System.out.println(10 / 0);</span>        String sql2 <span class="token operator">=</span> <span class="token string">"update user_table set balance = balance + 100 where user = ?"</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql2<span class="token punctuation">,</span> <span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.若没有异常，则提交事务</span>        conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.若有异常，则回滚事务</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//6.恢复每次DML操作的自动提交功能</span>            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7.关闭连接</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，对数据库操作的方法为：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用事务以后的通用的增删改操作（version 2.0）</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Connection conn <span class="token punctuation">,</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.获取PreparedStatement的实例 (或：预编译sql语句)</span>        ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.填充占位符</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.执行sql语句</span>        ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.关闭资源</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-事务的ACID属性"><a href="#6-3-事务的ACID属性" class="headerlink" title="6.3 事务的ACID属性"></a>6.3 事务的ACID属性</h3><ol><li><p><strong>原子性（Atomicity）</strong><br> 原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p><strong>一致性（Consistency）</strong><br> 事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong><br> 事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><strong>持久性（Durability）</strong><br> 持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol><h4 id="6-3-1-数据库的并发问题"><a href="#6-3-1-数据库的并发问题" class="headerlink" title="6.3.1 数据库的并发问题"></a>6.3.1 数据库的并发问题</h4><ul><li><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li><li><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</li><li><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li></ul></li><li><p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, <strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p></li></ul><h4 id="6-3-2-四种隔离级别"><a href="#6-3-2-四种隔离级别" class="headerlink" title="6.3.2 四种隔离级别"></a>6.3.2 四种隔离级别</h4><ul><li><p>数据库提供的4种事务隔离级别：</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.2z1ekyc7yw3k.webp"></p></li><li><p>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: <strong>READ COMMITED</strong> 。</p></li><li><p>Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: <strong>REPEATABLE READ。</strong></p></li></ul><h4 id="6-3-3-在MySql中设置隔离级别"><a href="#6-3-3-在MySql中设置隔离级别" class="headerlink" title="6.3.3 在MySql中设置隔离级别"></a>6.3.3 在MySql中设置隔离级别</h4><ul><li><p>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。</p></li><li><p>查看当前的隔离级别: </p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT @@tx_isolation;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置当前 mySQL 连接的隔离级别:  </p><pre class="line-numbers language-mysql"><code class="language-mysql">set  transaction isolation level read committed;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置数据库系统的全局的隔离级别:</p><pre class="line-numbers language-mysql"><code class="language-mysql">set global transaction isolation level read committed;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>补充操作：</p><ul><li><p>创建mysql数据库用户：</p><pre class="line-numbers language-mysql"><code class="language-mysql">create user tom identified by 'abc123';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>授予权限</p><pre class="line-numbers language-mysql"><code class="language-mysql">#授予通过网络方式登录的tom用户，对所有库所有表的全部权限，密码设为abc123.grant all privileges on *.* to tom@'%'  identified by 'abc123';  #给tom用户使用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。grant select,insert,delete,update on atguigudb.* to tom@localhost identified by 'abc123'; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="7-DAO及相关实现类"><a href="#7-DAO及相关实现类" class="headerlink" title="7. DAO及相关实现类(!)"></a>7. DAO及相关实现类(!)</h2><ul><li>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO</li><li>作用：为了实现功能的模块化，更有利于代码的维护和升级。</li><li>下面是JavaWeb阶段书城项目中DAO使用的体现：</li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4zaq4cugg0ow.webp"></p><ul><li>层次结构：</li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.asnj5yohtmw.webp"></p><h3 id="【BaseDAO-java】"><a href="#【BaseDAO-java】" class="headerlink" title="【BaseDAO.java】"></a>【BaseDAO.java】</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>ParameterizedType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>QueryRunner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>BeanHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>BeanListHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>ScalarHandler<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 定义一个用来被继承的对数据库进行基本操作的Dao * @param &lt;T> */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseDao</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> QueryRunner queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义一个变量来接收泛型的类型</span>    <span class="token keyword">private</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定</span>    <span class="token keyword">public</span> <span class="token function">BaseDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取子类的类型</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取父类的类型</span>        <span class="token comment" spellcheck="true">// getGenericSuperclass()用来获取当前类的父类的类型</span>        <span class="token comment" spellcheck="true">// ParameterizedType表示的是带泛型的类型</span>        ParameterizedType parameterizedType <span class="token operator">=</span> <span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型</span>        <span class="token comment" spellcheck="true">// 这个方法会返回一个Type的数组</span>        Type<span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> parameterizedType<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取具体的泛型的类型·</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> types<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通用的增删改操作     *      * @param sql     * @param params     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            count <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取一个对象     *      * @param sql     * @param params     * @return     */</span>    <span class="token keyword">public</span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        T t <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            t <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取所有对象     *      * @param sql     * @param params     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getBeanList</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            list <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句     *      * @param sql     * @param params     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">getValue</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Object count <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 调用queryRunner的query方法获取一个单一的值</span>            count <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ScalarHandler</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="【BookDAO-java】"><a href="#【BookDAO-java】" class="headerlink" title="【BookDAO.java】"></a>【BookDAO.java】</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>Book<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从数据库中查询出所有的记录     *      * @return     */</span>    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getBooks</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 向数据库中插入一条记录     *      * @param book     */</span>    <span class="token keyword">void</span> <span class="token function">saveBook</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从数据库中根据图书的id删除一条记录     *      * @param bookId     */</span>    <span class="token keyword">void</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String bookId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据图书的id从数据库中查询出一条记录     *      * @param bookId     * @return     */</span>    Book <span class="token function">getBookById</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String bookId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据图书的id从数据库中更新一条记录     *      * @param book     */</span>    <span class="token keyword">void</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取带分页的图书信息     *      * @param page：是只包含了用户输入的pageNo属性的page对象     * @return 返回的Page对象是包含了所有属性的Page对象     */</span>    Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getPageBooks</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取带分页和价格范围的图书信息     *      * @param page：是只包含了用户输入的pageNo属性的page对象     * @return 返回的Page对象是包含了所有属性的Page对象     */</span>    Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getPageBooksByPrice</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> page<span class="token punctuation">,</span> <span class="token keyword">double</span> minPrice<span class="token punctuation">,</span> <span class="token keyword">double</span> maxPrice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="【UserDAO-java】"><a href="#【UserDAO-java】" class="headerlink" title="【UserDAO.java】"></a>【UserDAO.java】</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据User对象中的用户名和密码从数据库中获取一条记录     *      * @param user     * @return User 数据库中有记录 null 数据库中无此记录     */</span>    User <span class="token function">getUser</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据User对象中的用户名从数据库中获取一条记录     *      * @param user     * @return true 数据库中有记录 false 数据库中无此记录     */</span>    <span class="token keyword">boolean</span> <span class="token function">checkUsername</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 向数据库中插入User对象     *      * @param user     */</span>    <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="【BookDaoImpl-java】"><a href="#【BookDaoImpl-java】" class="headerlink" title="【BookDaoImpl.java】"></a>【BookDaoImpl.java】</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>Book<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>BaseDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>BookDao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDao</span><span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getBooks</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中得到一个List的方法</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> beanList <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"select id,title,author,price,sales,stock,img_path imgPath from books"</span><span class="token punctuation">;</span>        beanList <span class="token operator">=</span> <span class="token function">getBeanList</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> beanList<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveBook</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Book book<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中通用的增删改的方法</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getSales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getImgPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String bookId<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"DELETE FROM books WHERE id = ?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中通用增删改的方法</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> bookId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Book <span class="token function">getBookById</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String bookId<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个对象的方法</span>        Book book <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"select id,title,author,price,sales,stock,img_path imgPath from books where id = ?"</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> bookId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> book<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Book book<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"update books set title = ? , author = ? , price = ? , sales = ? , stock = ? where id = ?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中通用的增删改的方法</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getSales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getPageBooks</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> page<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取数据库中图书的总记录数</span>        String sql <span class="token operator">=</span> <span class="token string">"select count(*) from books"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个单一值的方法</span>        <span class="token keyword">long</span> totalRecord <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">getValue</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将总记录数设置都page对象中</span>        page<span class="token punctuation">.</span><span class="token function">setTotalRecord</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> totalRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前页中的记录存放的List</span>        String sql2 <span class="token operator">=</span> <span class="token string">"select id,title,author,price,sales,stock,img_path imgPath from books limit ?,?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个集合的方法</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> beanList <span class="token operator">=</span> <span class="token function">getBeanList</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql2<span class="token punctuation">,</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> Page<span class="token punctuation">.</span>PAGE_SIZE<span class="token punctuation">,</span> Page<span class="token punctuation">.</span>PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将这个List设置到page对象中</span>        page<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>beanList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> page<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getPageBooksByPrice</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> page<span class="token punctuation">,</span> <span class="token keyword">double</span> minPrice<span class="token punctuation">,</span> <span class="token keyword">double</span> maxPrice<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取数据库中图书的总记录数</span>        String sql <span class="token operator">=</span> <span class="token string">"select count(*) from books where price between ? and ?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个单一值的方法</span>        <span class="token keyword">long</span> totalRecord <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">getValue</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span>minPrice<span class="token punctuation">,</span>maxPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将总记录数设置都page对象中</span>        page<span class="token punctuation">.</span><span class="token function">setTotalRecord</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> totalRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前页中的记录存放的List</span>        String sql2 <span class="token operator">=</span> <span class="token string">"select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? limit ?,?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个集合的方法</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> beanList <span class="token operator">=</span> <span class="token function">getBeanList</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql2<span class="token punctuation">,</span> minPrice <span class="token punctuation">,</span> maxPrice <span class="token punctuation">,</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> Page<span class="token punctuation">.</span>PAGE_SIZE<span class="token punctuation">,</span> Page<span class="token punctuation">.</span>PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将这个List设置到page对象中</span>        page<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>beanList<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> page<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="【UserDaoImpl-java】"><a href="#【UserDaoImpl-java】" class="headerlink" title="【UserDaoImpl.java】"></a>【UserDaoImpl.java】</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>BaseDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>UserDao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDao</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>User user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个对象的方法</span>        User bean <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"select id,username,password,email from users where username = ? and password = ?"</span><span class="token punctuation">;</span>        bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkUsername</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>User user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个对象的方法</span>        User bean <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"select id,username,password,email from users where username = ?"</span><span class="token punctuation">;</span>        bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>User user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into users(username,password,email) values(?,?,?)"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用BaseDao中通用的增删改的方法</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="【Book-java】"><a href="#【Book-java】" class="headerlink" title="【Book.java】"></a>【Book.java】</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 图书类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 书名</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 作者</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 价格</span>    <span class="token keyword">private</span> Integer sales<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 销量</span>    <span class="token keyword">private</span> Integer stock<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 库存</span>    <span class="token keyword">private</span> String imgPath <span class="token operator">=</span> <span class="token string">"static/img/default.jpg"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 封面图片的路径</span>    <span class="token comment" spellcheck="true">//构造器，get()，set()，toString()方法略</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="【Page-java】"><a href="#【Page-java】" class="headerlink" title="【Page.java】"></a>【Page.java】</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 页码类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每页查到的记录存放的集合</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PAGE_SIZE <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每页显示的记录数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pageNo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前页</span><span class="token comment" spellcheck="true">//private int totalPageNo; // 总页数，通过计算得到</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> totalRecord<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 总记录数，通过查询数据库得到</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="【User-java】"><a href="#【User-java】" class="headerlink" title="【User.java】"></a>【User.java】</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 用户类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-数据库连接池"><a href="#8-数据库连接池" class="headerlink" title="8. 数据库连接池(!)"></a>8. 数据库连接池(!)</h2><h3 id="8-1-JDBC数据库连接池的必要性"><a href="#8-1-JDBC数据库连接池的必要性" class="headerlink" title="8.1 JDBC数据库连接池的必要性"></a>8.1 JDBC数据库连接池的必要性</h3><ul><li><p>在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：　　</p><ul><li><strong>在主程序（如servlet、beans）中建立数据库连接</strong></li><li><strong>进行sql操作</strong></li><li><strong>断开数据库连接</strong></li></ul></li><li><p>这种模式开发，存在的问题:</p><ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用。</strong>若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li><strong>对于每一次数据库连接，使用完后都得断开。</strong>否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？）</li><li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。</li></ul></li></ul><h3 id="8-2-数据库连接池技术"><a href="#8-2-数据库连接池技术" class="headerlink" title="8.2 数据库连接池技术"></a>8.2 数据库连接池技术</h3><ul><li><p>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。</p></li><li><p><strong>数据库连接池的基本思想</strong>：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p></li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1puvm3z4x468.webp"></p><ul><li><strong>工作原理：</strong></li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.2ayx6ofq7zsw.webp"></p><ul><li><p><strong>数据库连接池技术的优点</strong></p><p><strong>1. 资源重用</strong></p><p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p><p><strong>2. 更快的系统反应速度</strong></p><p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p><p><strong>3. 新的资源分配手段</strong></p><p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p><p><strong>4. 统一的连接管理，避免数据库连接泄漏</strong></p><p>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</p><p><strong>综上：1.提高程序响应速度（减少了创建连接的时间）2.降低资源的消耗（可以重复使用已经提供好的连接）3.便于管理。</strong></p></li></ul><h3 id="8-3-多种开源的数据库连接池"><a href="#8-3-多种开源的数据库连接池" class="headerlink" title="8.3 多种开源的数据库连接池"></a>8.3 多种开源的数据库连接池</h3><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以。</strong>hibernate官方推荐使用</li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li><li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li><li>特别注意：<ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul><h4 id="8-3-1-C3P0数据库连接池"><a href="#8-3-1-C3P0数据库连接池" class="headerlink" title="8.3.1 C3P0数据库连接池"></a>8.3.1 C3P0数据库连接池</h4><ul><li>获取连接方式一</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐</span><span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ComboPooledDataSource cpds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cpds<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     cpds<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cpds<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cpds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cpds.setMaxPoolSize(100);</span>        Connection conn <span class="token operator">=</span> cpds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conn<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取连接方式二</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐</span><span class="token keyword">private</span> <span class="token keyword">static</span> DataSource cpds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token string">"helloc3p0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> cpds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conn<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，src下的配置文件为：【c3p0-config.xml】</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c3p0-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>named-config</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloc3p0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 获取连接的4个基本信息 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>abc123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql:///test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireIncrement<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 初始化数据库连接池时连接的数量 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 数据库连接池中的最小的数据库连接数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 数据库连接池中的最大的数据库连接数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxStatements<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxStatementsPerConnection<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>named-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c3p0-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-2-DBCP数据库连接池"><a href="#8-3-2-DBCP数据库连接池" class="headerlink" title="8.3.2 DBCP数据库连接池"></a>8.3.2 DBCP数据库连接池</h4><ul><li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：<ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul></li><li><strong>Tomcat 的连接池正是采用该连接池来实现的。</strong>该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li><li>配置属性说明</li></ul><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table><ul><li>获取连接方式一：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    BasicDataSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            source<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    source<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    source<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    source<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//</span>    source<span class="token punctuation">.</span><span class="token function">setInitialSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Connection conn <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conn<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取连接方式二：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用dbcp数据库连接池的配置文件方式，获取数据库的连接：推荐</span><span class="token keyword">private</span> <span class="token keyword">static</span> DataSource source <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                InputStream is <span class="token operator">=</span> DBCPTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"dbcp.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据提供的BasicDataSourceFactory创建对应的DataSource对象</span>        source <span class="token operator">=</span> BasicDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pros<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Connection conn <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> conn<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，src下的配置文件为：【dbcp.properties】</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&amp;useServerPrepStmts=false</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">abc123</span><span class="token attr-name">initialSize</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token comment" spellcheck="true">#...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-3-Druid（德鲁伊）数据库连接池"><a href="#8-3-3-Druid（德鲁伊）数据库连接池" class="headerlink" title="8.3.3 Druid（德鲁伊）数据库连接池(!)"></a>8.3.3 Druid（德鲁伊）数据库连接池(!)</h4><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>tu<span class="token punctuation">.</span>druid<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSourceFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDruid</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>TestDruid<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataSource ds <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，src下的配置文件为：【druid.properties】</p><pre class="line-numbers language-java"><code class="language-java">url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>test<span class="token operator">?</span>rewriteBatchedStatements<span class="token operator">=</span><span class="token boolean">true</span>username<span class="token operator">=</span>rootpassword<span class="token operator">=</span><span class="token number">123456</span>driverClassName<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>DriverinitialSize<span class="token operator">=</span><span class="token number">10</span>maxActive<span class="token operator">=</span><span class="token number">20</span>maxWait<span class="token operator">=</span><span class="token number">1000</span>filters<span class="token operator">=</span>wall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>详细配置参数：</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql:&#x2F;&#x2F;10.20.153.104:3306&#x2F;druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h2 id="9-Apache-DBUtils实现CRUD操作"><a href="#9-Apache-DBUtils实现CRUD操作" class="headerlink" title="9. Apache-DBUtils实现CRUD操作(!)"></a>9. Apache-DBUtils实现CRUD操作(!)</h2><h3 id="9-1-Apache-DBUtils简介"><a href="#9-1-Apache-DBUtils简介" class="headerlink" title="9.1 Apache-DBUtils简介"></a>9.1 Apache-DBUtils简介</h3><ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p></li><li><p>API介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>工具类：org.apache.commons.dbutils.DbUtils</li></ul></li><li><p>API包说明：</p></li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.43i6ha1i3vcw.webp"></p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.gjfess6b28w.webp"></p><h3 id="9-2-主要API的使用"><a href="#9-2-主要API的使用" class="headerlink" title="9.2 主要API的使用"></a>9.2 主要API的使用</h3><h4 id="9-2-1-DbUtils"><a href="#9-2-1-DbUtils" class="headerlink" title="9.2.1 DbUtils"></a>9.2.1 DbUtils</h4><ul><li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 </li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul></li></ul><h4 id="9-2-2-QueryRunner类"><a href="#9-2-2-QueryRunner类" class="headerlink" title="9.2.2 QueryRunner类"></a>9.2.2 QueryRunner类</h4><ul><li><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p></li><li><p>QueryRunner类提供了两个构造器：</p><ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li><p>QueryRunner类的主要方法：</p><ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li><li>……</li></ul></li><li><strong>插入</strong><ul><li>public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</li><li>….</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object[][] params)throws SQLException：只支持INSERT语句</li><li>…..</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li><li>……</li></ul></li></ul></li><li><p>测试</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试添加</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"insert into customers(name,email,birth)values(?,?,?)"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token string">"何成飞"</span><span class="token punctuation">,</span> <span class="token string">"he@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"1992-09-08"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加了"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"delete from customers where id &lt; ?"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-3-ResultSetHandler接口及实现类"><a href="#9-2-3-ResultSetHandler接口及实现类" class="headerlink" title="9.2.3 ResultSetHandler接口及实现类"></a>9.2.3 ResultSetHandler接口及实现类</h4><ul><li><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p></li><li><p>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p></li><li><p>接口的主要实现类：</p><ul><li>ArrayHandler：把结果集中的第一行数据转成对象数组。</li><li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</li><li><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</li><li><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</li><li>ColumnListHandler：将结果集中某一列的数据存放到List中。</li><li>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</li><li><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</li><li><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</li><li><strong>ScalarHandler：</strong>查询单个值对象</li></ul></li><li><p>测试</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 测试查询:查询一条记录 *  * 使用ResultSetHandler的实现类：BeanHandler */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth from customers where id = ?"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//</span>    BeanHandler<span class="token operator">&lt;</span>Customer<span class="token operator">></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Customer customer <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 测试查询:查询多条记录构成的集合 *  * 使用ResultSetHandler的实现类：BeanListHandler */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth from customers where id &lt; ?"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//</span>    BeanListHandler<span class="token operator">&lt;</span>Customer<span class="token operator">></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 自定义ResultSetHandler的实现类 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryInstance1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth from customers where id = ?"</span><span class="token punctuation">;</span>            ResultSetHandler<span class="token operator">&lt;</span>Customer<span class="token operator">></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultSetHandler</span><span class="token operator">&lt;</span>Customer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Customer <span class="token function">handle</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return new Customer(1,"Tom","tom@126.com",new Date(123323432L));</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String email <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Date birth <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token string">"birth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> birth<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            Customer customer <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 如何查询类似于最大的，最小的，平均的，总和，个数相关的数据， * 使用ScalarHandler *  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//测试一：</span><span class="token comment" spellcheck="true">//String sql = "select count(*) from customers where id &lt; ?";</span><span class="token comment" spellcheck="true">//ScalarHandler handler = new ScalarHandler();</span><span class="token comment" spellcheck="true">//long count = (long) runner.query(conn, sql, handler, 20);</span><span class="token comment" spellcheck="true">//System.out.println(count);</span>            <span class="token comment" spellcheck="true">//测试二：</span>    String sql <span class="token operator">=</span> <span class="token string">"select max(birth) from customers"</span><span class="token punctuation">;</span>    ScalarHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScalarHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Date birth <span class="token operator">=</span> <span class="token punctuation">(</span>Date<span class="token punctuation">)</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>birth<span class="token punctuation">)</span><span class="token punctuation">;</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDBC总结"><a href="#JDBC总结" class="headerlink" title="JDBC总结"></a>JDBC总结</h2><pre class="line-numbers language-java"><code class="language-java">总结<span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdateWithTx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.获取连接的操作（</span>        <span class="token comment" spellcheck="true">//① 手写的连接：JDBCUtils.getConnection();</span>        <span class="token comment" spellcheck="true">//② 使用数据库连接池：C3P0;DBCP;Druid</span>        <span class="token comment" spellcheck="true">//2.对数据表进行一系列CRUD操作</span>        <span class="token comment" spellcheck="true">//① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \ version 2.0)</span><span class="token comment" spellcheck="true">//version2.0的增删改public void update(Connection conn,String sql,Object ... args)&amp;#123;&amp;#125;</span><span class="token comment" spellcheck="true">//version2.0的查询 public &lt;T> T getInstance(Connection conn,Class&lt;T> clazz,String sql,Object ... args)&amp;#123;&amp;#125;</span>        <span class="token comment" spellcheck="true">//② 使用dbutils提供的jar包中提供的QueryRunner类</span>                    <span class="token comment" spellcheck="true">//提交数据</span>        conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//回滚数据</span>            conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.关闭连接等操作</span>        <span class="token comment" spellcheck="true">//① JDBCUtils.closeResource();</span>        <span class="token comment" spellcheck="true">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity做的两个小游戏</title>
      <link href="/2022/04/10/unity-zuo-de-liang-ge-xiao-you-xi/"/>
      <url>/2022/04/10/unity-zuo-de-liang-ge-xiao-you-xi/</url>
      
        <content type="html"><![CDATA[<p>​上Unity3D课最后做了两个简陋的小游戏，两个小游戏的制作基本囊括了课上所有学到的知识点，下面放出游戏演示和大概系统设计。</p><h3 id="TowerDefence"><a href="#TowerDefence" class="headerlink" title="TowerDefence"></a>TowerDefence</h3><p>​TowerDefence是一个单机游戏，制作过程中主要用到触发器、实例化刚体、粒子系统、游戏菜单、鼠标键盘外设输入、Animation和Animator等知识点，线上试玩请到： <a href="https://sunburnedxx.github.io/game/TowerDefence/index.html">TowerDefence试玩</a></p><h4 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h4><h5 id="UML类图（Class-Diagram"><a href="#UML类图（Class-Diagram" class="headerlink" title="UML类图（Class Diagram)"></a>UML类图（Class Diagram)</h5><ul><li>对于用户功能模块，共设计如下13个类。</li><li>数据类TurretData：保存炮塔数据；</li><li>数据类Wave保存生成每波敌人的属性；</li><li>功能实现类：WayPoint获得敌人运动路径点；</li><li>功能实现类ViewerController控制相机前后左右移动以及视野的放大和缩小；</li><li>功能实现类Enemy实现敌人运动和死亡，以及敌人数量的更新和受到伤害；</li><li>功能实现类Turret实现炮塔的攻击和追踪；</li><li>Bullet实现子弹追踪和爆炸消失；</li><li>功能实现类MapCube实现场景中方块上炮塔的建造、拆毁、升级和相关特效的生成以及方块的变色与恢复；</li><li>功能实现类EnemySpawner实现敌人的实例化生成；</li><li>管理类BuiltManager：管理炮塔的建造、升级面板的实现以及金钱的消耗；</li><li>管理类GameManager管理游戏的开始、胜利与失败；</li><li>管理类ButtonControler管理游戏所有按钮功能的实现与隐藏；</li><li>菜单类GameMenu实现场景的载入与退出。</li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.66ypblynu4jk.webp"></p><h5 id="UML活动图（Activity-Diagram）"><a href="#UML活动图（Activity-Diagram）" class="headerlink" title="UML活动图（Activity Diagram）"></a>UML活动图（Activity Diagram）</h5><ul><li><p>炮台建造活动图</p><ul><li><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.db4bc60rkf.webp"></li></ul></li><li><p>炮台升级与拆毁活动图</p><ul><li><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.tpfm73f38ls.webp"></li></ul></li><li><p>炮台攻击活动图</p><ul><li><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5ymhipbwn3eo.webp"></li></ul></li><li><p>游戏开始与结束活动图</p><ul><li><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4gvkjdliik8w.webp"></li></ul></li><li><h5 id="对象与脚本、组件关系图（Relationship-Diagram）"><a href="#对象与脚本、组件关系图（Relationship-Diagram）" class="headerlink" title="对象与脚本、组件关系图（Relationship Diagram）"></a>对象与脚本、组件关系图（Relationship Diagram）</h5><ul><li><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.35945dv7rczk.webp"></li></ul></li></ul><h5 id=""><a href="#" class="headerlink" title=""></a></h5><blockquote><p>TowerDefence项目地址链接：<a href="https://pan.baidu.com/s/12oSkQrzGLw9bWoSyjBvrWQ">https://pan.baidu.com/s/12oSkQrzGLw9bWoSyjBvrWQ</a>  提取码：tuxx</p></blockquote><h3 id="OnlineShooter"><a href="#OnlineShooter" class="headerlink" title="OnlineShooter"></a>OnlineShooter</h3><p>​OnlineShooter是一个小型多人联机射击游戏，使用Mirror组件实现联网功能，这个游戏有个很严重的问题：玩家收到子弹伤害会持续后退，但是没有限制场地范围，不过应该可以通过去掉子弹的重力解决。限制玩家最多5人。 <a href="https://sunburnedxx.github.io/game/OnlineShooter/Mirror5.zip" download = "OnlineShooter.zip">OnlineShooter试玩</a>  </p><h4 id="系统设计-1"><a href="#系统设计-1" class="headerlink" title="系统设计"></a>系统设计</h4><h5 id="UML用例图（User-Case-Diagram）"><a href="#UML用例图（User-Case-Diagram）" class="headerlink" title="UML用例图（User Case Diagram）"></a>UML用例图（User Case Diagram）</h5><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.3mxahe4011xc.webp"></p><h5 id="UML类图（Class-Diagram）"><a href="#UML类图（Class-Diagram）" class="headerlink" title="UML类图（Class Diagram）"></a>UML类图（Class Diagram）</h5><ul><li>对于用户功能模块，共设计如下7个类。</li><li>数据类Weapon：保存武器数据；</li><li>功能实现类BulletScript实现子弹对玩家造成伤害；</li><li>功能实现类PlayerScript 实现玩家生成、发送消息、切换游戏场景、受伤、切换武器、血条、拾取血包回血、拾取弹夹等功能；</li><li>功能实现类SceneScript 实现当前场景中文本的变化及同步显示并提示玩家是否接入服务器；</li><li>场景切换类Menu 实现切换到菜单场景；</li><li>场景切换类GameList实现切换到开始场景；</li><li>UI管理类HUDExtension管理游戏场景中文本UI的显示；</li></ul><p>​<img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1bbjieo5n4f4.webp"></p><h5 id="对象与脚本、组件关系图（RelationShip-Diagram）"><a href="#对象与脚本、组件关系图（RelationShip-Diagram）" class="headerlink" title="对象与脚本、组件关系图（RelationShip Diagram）"></a>对象与脚本、组件关系图（RelationShip Diagram）</h5><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.46lxpvodtiio.webp"></p><blockquote><p>OnlineShooter项目链接：<a href="https://pan.baidu.com/s/1pc4vxVZPpw7rSRjxSCDCOA">https://pan.baidu.com/s/1pc4vxVZPpw7rSRjxSCDCOA</a>  提取码：tuyy</p></blockquote><h3 id="疫情地球"><a href="#疫情地球" class="headerlink" title="疫情地球"></a>疫情地球</h3><p>​在github上看到一个项目：<a href="https://github.com/yeliheng/NcovEarth">用unity引擎呈现疫情大数据</a>，该项目使用粒子系统进行数据渲染，直观地显示出各个地区的疫情分别情况，中国精确到省份，外国精确到全国（以首都为国家位置），疫情数据来源于腾讯新闻疫情实时追踪。</p><p>效果图：</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4sqlx4lsje2o.webp"></p><blockquote><p>在写这篇博客时，发现hexo会渲染所有在source文件夹下的内容，导致不需要被主题渲染的网页无法正确的显示，游戏试玩页面带有博客主题样式，无法正常显示，解决方法：<a href="https://blog.csdn.net/qq_33384402/article/details/107240192">https://blog.csdn.net/qq_33384402/article/details/107240192</a></p></blockquote><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/bear.dsgze71lelc.gif"></p>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity3d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS简介</title>
      <link href="/2022/03/23/css-jian-jie/"/>
      <url>/2022/03/23/css-jian-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h3><p>​CSS是层叠样式表的简称，有时也会称之为CSS样式表或级联样式表，是一种标记语言，主要用来设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。</p><p>​HTML主要用来做结构、显示元素内容；CSS做样式，美化HTML，布局网页。将结构（HTML）与样式（CSS）分离。</p><h4 id="CSS的三种样式表"><a href="#CSS的三种样式表" class="headerlink" title="CSS的三种样式表"></a>CSS的三种样式表</h4><p>按照 CSS 样式书写的位置（或者引入的方式），CSS 样式表可以分为三大类：行内样式表（行内式）、内部样式表（嵌入式）、外部样式表（链接式）。</p><ul><li><p>内部样式表（内嵌样式表）是写到html页面内部. 是将所有的 CSS 代码抽取出来，单独放到一个 <code>&lt;style&gt;</code>标签中。</p><ul><li>eg：</li></ul><pre class="line-numbers language-css"><code class="language-css">&lt;style>     div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>         <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>         <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>     &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>通过此种方式，可以方便控制当前整个页面中的元素样式设置</p></li><li><p><code>&lt;style&gt;</code> 标签理论上可以放在 HTML 文档的任何地方，但一般会放在文档的<code>&lt; head&gt;</code> 标签中</p></li><li><p>代码结构清晰，但是并没有实现结构与样式完全分离</p></li><li><p>使用内部样式表设定 CSS，通常也被称为嵌入式引入</p></li></ul></li><li><p>行内样式表（内联样式表）是在元素标签内部的 style 属性中设定 CSS 样式。适合于修改简单样式。</p><ul><li><p>eg：</p><pre class="line-numbers language-css"><code class="language-css">&lt;div style=<span class="token string">"color: red; font-size: 12px;"</span>>xxxx&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>style 其实就是标签的属性，可以控制当前的标签设置样式</li><li>由于书写繁琐，并且没有体现出结构与样式相分离的思想，所以不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用</li><li>使用行内样式表设定 CSS，通常也被称为行内式引入</li></ul></li></ul></li><li><p>外部样式表：实际开发都是外部样式表. 适合于样式比较多的情况. 核心是:样式单独写到CSS 文件中，之后把CSS文件引入到 HTML 页面中使用。</p><ul><li><p>引入外部样式表分为两步：</p><ol><li>新建一个后缀名为 .css 的样式文件，把所有 CSS 代码都放入此文件中。</li><li>在 HTML 页面中，使用<link> 标签引入这个文件</li></ol></li><li><p>eg：</p><pre class="line-numbers language-css"><code class="language-css">&lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"css文件路径"</span>><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.16ewb7o21yqo.webp"></p><ul><li>使用外部样式表设定 CSS，通常也被称为外链式或链接式引入，这种方式是开发中常用的方式</li></ul></li></ul></li></ul><h4 id="CSS引入方式小总结"><a href="#CSS引入方式小总结" class="headerlink" title="CSS引入方式小总结"></a>CSS引入方式小总结</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.71j1e2gtaf40.webp"></p><h3 id="CSS语法规范"><a href="#CSS语法规范" class="headerlink" title="CSS语法规范"></a>CSS语法规范</h3><p>CSS 规则由两个主要的部分构成：选择器以及一条或多条声明。</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.33uemjqxql1c.webp"></p><ul><li>选择器用于指定CSS样式的HTML标签，花括号对该样式设置具体的样式</li><li>属性和属性值以键值对的形式出现</li><li>属性是对特定的对象设置的样式属性，例如字体大小、文本颜色等</li><li>属性和属性值之间用英文“:” 分开</li><li>多个键值对之间用英文“:”分开</li><li>多个键值对之间用英文“:”进行区分</li></ul><p>所有的样式都包含在 <code>&lt;style&gt;</code> 标签内，表示是样式表。<code>&lt;style&gt;</code> 一般写到 <code>&lt;/head&gt;</code> 上方。 </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span>     h4 <span class="token entity" title="&#123;">&amp;#123;</span>         color: blue;         font-size: 100px;         <span class="token entity" title="&#125;">&amp;#125;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style标签内，表示是样式表。</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h3><p>​<strong>选择器（选择符）就是根据不同需求把不同的标签选出来</strong>，简单来说，就是选择标签用的。选择器分为基础选择器和复合选择器两大类。这里说一下基础选择器，<strong>基础选择器由单个标签组成</strong>，基础选择器又包括：标签选择器、类选择器、id选择器和通配符选择器。</p><h4 id="标签选择器（元素选择器）"><a href="#标签选择器（元素选择器）" class="headerlink" title="标签选择器（元素选择器）"></a>标签选择器（元素选择器）</h4><p>​指用HTML标签名作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式，能快速为页面中同类型的标签统一设置样式。</p><ul><li><p>语法：</p><pre><code>标签名&#123; 属性1: 属性值1;  ...&#125;</code></pre></li></ul><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a><strong>类选择器</strong></h4><p>如果想要差异化选择不同的标签，单独选一个或某几个标签，就可以使用类选择器。</p><ul><li><p><strong>语法：样式点定义，结构类调用，一个或多个，开发最常用</strong>。eg：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token number">.</span>类名<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> 属性<span class="token property">1</span><span class="token punctuation">:</span> 属性值<span class="token number">1</span><span class="token punctuation">;</span>  <span class="token number">...</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>类名<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> 属性<span class="token property">1</span><span class="token punctuation">:</span> 属性值<span class="token number">1</span><span class="token punctuation">;</span>  <span class="token number">...</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&lt;div class=<span class="token string">'类名1 类名2'</span>> 变红色 &lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用“.”进行表示，后面紧跟类名（自定义的）</li><li>在标签class属性中写类名</li><li>多个类名中间用空格分开</li></ul></li><li><p><strong>多类名开发中使用场景</strong></p><ul><li>可以把一些标签元素相同的样式（共同部分）放到一个类中</li><li>这些标签都可以调用这个公共的类，然后调用自己独有的类</li><li>节省CSS代码，统一修改也非常方便</li></ul></li></ul><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>id选择器可以为标有特定id的HTML元素指定特定的样式。HTML 元素以 id 属性来设置 id 选择器，CSS 中 id 选择器以“#” 来定义。</p><ul><li><p><strong>语法：样式#定义,结构id来调用, 只能调用一次, 别人切勿使用。</strong></p><pre><code>#id名 &#123; 属性1: 属性值1;  ...&#125;</code></pre><ul><li>id属性只能在每个HTML文档中出现一次。</li></ul></li></ul><blockquote><p>类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。</p><p>id 选择器好比人的身份证号码，全中国是唯一的，不得重复。 </p><p>类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和JavaScript 搭配使用。</p></blockquote><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><p>在 CSS 中，通配符选择器使用“*”定义，它表示<strong>选取页面中所有元素</strong>（标签）。 </p><ul><li><p>语法：</p><pre><code>* &#123; 属性1: 属性值1;  ...&#125;</code></pre><ul><li>通配符选择器不需要调用，自动给所有元素使用该样式</li></ul></li></ul><h4 id="基础选择器小总结"><a href="#基础选择器小总结" class="headerlink" title="基础选择器小总结"></a>基础选择器小总结</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.33bsodqhzmtc.webp"></p><h3 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h3><p>​复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的。 复合选择器可以更准确、更高效的选择目标元素（标签），常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器等等。</p><ul><li><p>后代选择器</p><p><strong>后代选择器</strong>又称为包含选择器，可以选择父元素里面后代元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><ul><li><p>语法：</p><pre><code>元素1 元素2 &#123; 样式声明 &#125;</code></pre><ul><li>上述语法表示选择元素 1 里面的所有元素 2 (后代元素)。</li></ul></li><li><p>eg：</p><pre class="line-numbers language-css"><code class="language-css">ul li &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> 样式声明 &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 选择 ul 里面所有的 li标签元素 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>子选择器：子元素选择器（子选择器）只能选择作为某元素的最近一级子元素。简单理解就是选亲儿子元素。</p><ul><li><p>语法：</p><pre><code>元素1 &gt; 元素2 &#123; 样式声明 &#125;</code></pre><ul><li>上述语法表示选择元素1 里面的所有直接后代(子元素) 元素2。</li></ul></li><li><p>eg：</p><pre class="line-numbers language-css"><code class="language-css">div > p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> 样式声明 &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 选择 div 里面所有最近一级 p 标签元素 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>并集选择器</p><p>并集选择器可以选择多组标签, 同时为他们定义相同的样式。通常用于集体声明。<strong>并集选择器</strong>是各选择器通过英文逗号（,）连接而成，任何形式的选择器都可以作为并集选择器的一部分。</p><ul><li><p>语法</p><pre><code>元素1,元素2 &#123; 样式声明 &#125;</code></pre><ul><li>上述语法表示选择元素1 和 元素2。</li></ul></li><li><p>eg：</p><pre class="line-numbers language-css"><code class="language-css">ul,div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> 样式声明 &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 选择 ul 和 div标签元素 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>伪类选择器</p><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。</p><p>因为伪类选择器很多，比如有链接伪类、结构伪类等，所以这里先给大家讲解常用的链接伪类选择器。</p><ul><li><p>链接伪类选择器实际工作开发中的写法：</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token comment" spellcheck="true">/* a 是标签选择器 所有的链接 */</span>  a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* :hover 是链接伪类选择器 鼠标经过 */</span> <span class="token property">a</span><span class="token punctuation">:</span>hover &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 鼠标经过的时候，由原来的 灰色 变成了红色 */</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>为了确保生效，请按照 LVHA 的循顺序声明 :link－:visited－:hover－:active。</li><li>因为 a 链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</li></ul></li><li><p>:focus 伪类选择器用于选取获得焦点的表单元素。焦点就是光标，一般情况 <input> 类表单元素才能获取，因此这个选择器也主要针对于表单元素来说。</p></li></ul></li></ul><h4 id="复合选择器小总结"><a href="#复合选择器小总结" class="headerlink" title="复合选择器小总结"></a>复合选择器小总结</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.7gncijvzdrsw.webp"></p><h3 id="CSS字体属性"><a href="#CSS字体属性" class="headerlink" title="CSS字体属性"></a>CSS字体属性</h3><p>​CSS Fonts (字体)属性用于定义字体系列、大小、粗细、和文字样式（如斜体）。</p><h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><p>​CSS 使用 font-size 属性定义字体大小。</p><pre><code>p &#123;      font-size: 20px; &#125;</code></pre><ul><li>px（像素）大小是我们网页的最常用的单位</li><li>谷歌浏览器默认的文字大小为16px</li><li>不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小</li><li>可以给 body 指定整个页面文字的大小</li></ul><h4 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h4><p>​CSS 使用 font-weight 属性设置文本字体的粗细。</p><pre><code>p &#123;      font-weight: bold;&#125;</code></pre><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.gh5vr2utu54.webp"></p><ul><li>学会让加粗标签（比如 h 和 strong 等) 不加粗，或者其他标签加粗 </li><li>实际开发时，我们更喜欢用数字表示粗细</li></ul><h4 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h4><p>​CSS 使用 font-style 属性设置文本的风格。</p><pre><code>p &#123;      font-style: normal;     &lt;!-- normal:默认值，浏览器会显示标准的字体样式 italic:斜体样式--&gt;&#125;</code></pre><ul><li><p><strong>注意：</strong> </p><p>平时我们很少给文字加斜体，反而要给斜体标签（em，i）改为不倾斜字体。</p></li></ul><p><strong>字体复合属性</strong></p><p>字体属性可以把以上文字样式综合来写，节省代码</p><pre class="line-numbers language-css"><code class="language-css">body &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">font</span><span class="token punctuation">:</span> font-style font-weight font-size/line-height font-family<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开</li><li>不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用</li></ul><h4 id="字体属性小总结"><a href="#字体属性小总结" class="headerlink" title="字体属性小总结"></a>字体属性小总结</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.66tvmqaj4ygw.webp"></p><h3 id="CSS文本属性"><a href="#CSS文本属性" class="headerlink" title="CSS文本属性"></a>CSS文本属性</h3><p>​CSS Text（文本）属性可定义文本的<strong>外观</strong>，比如文本的颜色、对齐文本、装饰文本、文本缩进、行间距等。</p><ul><li>color 属性用于定义文本的颜色。</li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4ew6mksrlsao.webp"></p><ul><li><p>text-align 属性用于设置元素内文本内容的水平对齐方式。</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.3bzfnz0g0n40.webp"></p></li><li><p>text-decoration 属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等。</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4s3o04jkuum8.webp"></p></li><li><p>text-indent 属性用来指定文本的第一行的缩进，通常是将段落的首行缩进。</p><pre class="line-numbers language-css"><code class="language-css">div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过设置该属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值。</li><li>em 是一个相对单位，就是当前元素（font-size) 1 个文字的大小, 如果当前元素没有设置大小，则会按照父元素的 1 个文字大小</li></ul></li><li><p>line-height 属性用于设置行间的距离（行高）。可以控制文字行与行之间的距离。</p></li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.ezp3vilw2cw.webp"></p><h4 id="文本属性小总结"><a href="#文本属性小总结" class="headerlink" title="文本属性小总结"></a>文本属性小总结</h4><p>​</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5uuia64w8074.webp"></p><h3 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h3><p>​通过 CSS 背景属性，可以给页面元素添加背景样式。背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p><ul><li><p>背景颜色：background-color 属性定义了元素的背景颜色</p><ul><li>一般情况下元素背景颜色默认值是 transparent（透明），我们也可以手动指定背景颜色为透明色</li></ul></li><li><p>背景图像：background-image 属性描述了元素的背景图像。实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置. (精灵图也是一种运用场景)</p><ul><li><pre><code>background-image : none | url (url)</code></pre><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1vopdlob3vy8.webp"></p></li></ul></li></ul><blockquote><p>​注意：背景图片后面的地址，千万不要忘记加 URL， 同时里面的路径不要加引号。</p></blockquote><ul><li><p>背景平铺:如果需要在 HTML 页面上对背景图像进行平铺，可以使用 background-repeat 属性。</p><ul><li><pre><code>background-repeat: repeat | no-repeat | repeat-x | repeat-y</code></pre><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.71ysjkbswb28.webp"></p></li></ul></li><li><p>背景图片的位置：利用 background-position 属性可以改变图片在背景中的位置。</p><ul><li><pre><code>background-position: x y;</code></pre><ul><li>参数代表的意思是：x 坐标和 y 坐标。 可以使用 方位名词 或者 精确单位</li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5dmz056llta8.webp"></p><ul><li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left top 和 top left 效果一致</li><li>如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</li><li>如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标</li><li>如果只指定一个数值，那该数值一定是 x 坐标，另一个默认垂直居中</li><li>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标</li></ul></li></ul><p></p></li><li><p>背景图片固定：background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。</p><ul><li><pre><code>background-attachment : scroll | fixed</code></pre><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.3lebpsooszk.webp"></p></li></ul><p></p></li><li><p>背景复合写法</p><p>为了简化背景属性的代码，我们可以将这些属性合并简写在同一个属性 background 中。从而节约代码量. 当使用简写属性时，没有特定的书写顺序,一般习惯约定顺序为：<strong>background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</strong>;</p><pre><code>background: transparent url(image.jpg) repeat-y fixed top ;</code></pre></li><li><p>背景色半透明：CSS3 为我们提供了背景颜色半透明的效果。</p><ul><li><pre><code>background: rgba(0, 0, 0, 0.3);</code></pre><ul><li>最后一个参数是 alpha 透明度，取值范围在 0~1之间</li><li>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li><li>CSS3 新增属性，是 IE9+ 版本浏览器才支持的。但是现在实际开发,我们不太关注兼容性写法了,可以放心使用。4</li></ul></li></ul></li></ul><h4 id="背景小总结"><a href="#背景小总结" class="headerlink" title="背景小总结"></a>背景小总结</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6418xz47k39c.webp"></p><h3 id="CSS的元素显示模式"><a href="#CSS的元素显示模式" class="headerlink" title="CSS的元素显示模式"></a>CSS的元素显示模式</h3><p>元素显示模式就是元素（标签）以什么方式进行显示，比如<div>自己占一行，比如一行可以放多个<span>。HTML 元素一般分为块元素和行内元素两种类型。</p><h4 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h4><p>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>等，其中<code> &lt;div&gt;</code> 标签是最典型的块元素。</p><p>块级元素的特点：</p><ul><li><p>自己独占一行</p></li><li><p>高度、宽度、外边距以及内边距都可以控制</p></li><li><p>宽度默认是容器（父级宽度）的100%</p></li><li><p>是一个容器&#x2F;盒子，里面可以放行内或者块级元素（任何标签）</p><blockquote><p><strong>注意：</strong> </p><p>文字类的元素内不能使用块级元素</p><p><code>&lt;p&gt;</code>标签主要用于存放文字，因此<code>&lt;p&gt;</code>里面不能放块级元素，特别是不能放<code>&lt;div&gt;</code></p><p>同理， <code>&lt;h1&gt;~&lt;h6&gt;</code>等都是文字类块级标签，里面也不能放其他块级元素</p></blockquote></li></ul><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>常见的行内元素有 <code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;del&gt;</code>、<code>&lt;s&gt;</code>、<code>&lt;ins&gt;</code>、<code>&lt;u&gt;</code>、<code>&lt;span&gt;</code>等，其中<code>&lt;span&gt;</code> 标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</p><p>行内元素的特点：</p><ul><li><p>相邻行内元素在一行上，一行可以显示多个。</p></li><li><p>高、宽直接设置是无效的。</p></li><li><p>默认宽度就是它本身内容的宽度。</p></li><li><p>行内元素只能容纳文本或其他行内元素</p><blockquote><p><strong>注意：</strong> </p><p>链接里面不能再放链接</p><p>特殊情况链接 <code>&lt;a&gt;</code> 里面可以放块级元素，但是给 <code>&lt;a&gt;</code> 转换一下块级模式最安全</p></blockquote></li></ul><h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><p>在行内元素中有几个特殊的标签 —— <code>&lt;img /&gt;</code>、<code>&lt;input /&gt;</code>、<code>&lt;td&gt;</code>，它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元素</p><p>行内块元素的特点：</p><ul><li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。一行可以显示多个（行内元素特点）。</li><li>默认宽度就是它本身内容的宽度（行内元素特点）。</li><li>高度，行高、外边距以及内边距都可以控制（块级元素特点）。</li></ul><p>特殊情况下，我们需要元素模式的转换，简单理解: 一个模式的元素需要另外一种模式的特性比如想要增加链接 <code>&lt;a&gt; </code>的触发范围。 </p><ul><li>转换为块元素：display:block;</li><li>转换为行内元素：display:inline;</li><li>转换为行内块：display: inline-block;</li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/hh.11v90huh7p9c.gif"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql基础（一）</title>
      <link href="/2022/03/23/mysql-ji-chu-yi/"/>
      <url>/2022/03/23/mysql-ji-chu-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql基础（一）"><a href="#MySql基础（一）" class="headerlink" title="MySql基础（一）"></a>MySql基础（一）</h2><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><p>sql语言在功能上主要分为如下3大类：</p><ul><li><strong>DDL</strong><em><strong>（Data Definition Languages、数据定义语言）</strong></em>*，这些语句定义了不同的数据库、表、视图、索引等数据库对象，还可以用来创建、删除、修改数据库和数据表的结构。<ul><li>主要语句包括<code>CREATE</code>、<code>DROP</code>、<code>ALTER</code>等。</li></ul></li><li><strong>DML</strong>*<strong>（Data Manipulation Language、数据操作语言）</strong>，用于添加、删除、更新和查询数据库记录(eg:表中的某行记录)，并检查数据完整性。<ul><li>主要关键字包括<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>、<code>SELECT</code>等（<code>SELECT</code>最重要）。</li></ul></li><li><strong>DCL</strong><strong><strong>（Data Control Language、数据控制语言）</strong></strong>，用于定义数据库、表、字段、用户的访问权限和安全级别。<ul><li>主要的语句关键字包括 <code>GRANT</code> 、 <code>REVOKE </code>、 <code>COMMIT</code> 、 <code>ROLLBACK</code> 、 <code>SAVEPOINT</code> 等。</li></ul></li></ul><blockquote><p>因为查询语句使用的非常的频繁，所以很多人把查询语句单拎出来一类：DQL（数据查询语言）。</p><p>还有单独将 <code>COMMIT</code> 、 <code>ROLLBACK</code> 取出来称为TCL（Transaction Control Language，事务控制语言）。</p></blockquote><h3 id="SQL语言规则与规范"><a href="#SQL语言规则与规范" class="headerlink" title="SQL语言规则与规范"></a>SQL语言规则与规范</h3><h4 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h4><ul><li>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进。</li><li>每条命令以 ; 或 \g 或 \G 结束。</li><li>关键字不能被缩写也不能分行。</li><li>关于标点符号<ul><li>必须保证所有的()、单引号、双引号是成对结束的。</li><li>必须使用英文状态下的半角输入方式。</li><li>字符串型和日期时间类型的数据可以使用单引号（’ ‘）表示。</li><li>列的别名，尽量使用双引号（” “），而且不建议省略as 。</li></ul></li></ul><h4 id="SQL大小写规范"><a href="#SQL大小写规范" class="headerlink" title="SQL大小写规范"></a>SQL大小写规范</h4><ul><li><strong>MySQL</strong> <strong>在</strong> <strong>Windows</strong> <strong>环境下是大小写不敏感的</strong>。</li><li><strong>MySQL</strong> <strong>在</strong> <strong>Linux</strong> <strong>环境下是大小写敏感的</strong>。<ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的。</li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li></ul></li><li><strong>推荐采用统一的书写规范：</strong><ul><li>数据库名、表名、表别名、字段名、字段别名等都小写。</li><li>SQL 关键字、函数名、绑定变量等都大写。</li></ul></li></ul><h4 id="SQL注释"><a href="#SQL注释" class="headerlink" title="SQL注释"></a>SQL注释</h4><p>可以使用如下格式的注释结构</p><blockquote><p>单行注释：#注释文字(MySQL特有的方式) </p><p>单行注释：– 注释文字(–后面必须包含一个空格。) </p><p>多行注释：&#x2F;* 注释文字 *&#x2F; </p></blockquote><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a><strong>命名规则</strong></h4><ul><li>数据库、表名不得超过30个字符，变量名限制为29个</li><li>必须只能包含 A–Z, a–z, 0–9, _共63个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用&#96;（着重号）引起来</li><li>保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据</li><li>类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul><p>eg：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#以下两句是一样的，不区分大小写 </span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span> <span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#创建表格 </span><span class="token comment" spellcheck="true">#create table student info(...); #表名错误，因为表名有空格 </span><span class="token keyword">create</span> <span class="token keyword">table</span> student_info<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#其中order使用``飘号，因为order和系统关键字或系统函数名等预定义标识符重名了 </span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span><span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>     lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> id <span class="token keyword">as</span> <span class="token string">"编号"</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">as</span> <span class="token string">"姓名"</span> <span class="token keyword">from</span> t_stu<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#起别名时，as都可以省略 </span><span class="token keyword">select</span> id <span class="token keyword">as</span> 编号<span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">as</span> 姓名 <span class="token keyword">from</span> t_stu<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#如果字段别名中没有空格，那么可以省略"" </span><span class="token keyword">select</span> id <span class="token keyword">as</span> 编 号<span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">as</span> 姓 名 <span class="token keyword">from</span> t_stu<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#错误，如果字段别名中有空格，那么不能省略"" </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SQL之SELECT"><a href="#SQL之SELECT" class="headerlink" title="SQL之SELECT"></a>SQL之SELECT</h3><h4 id="基本的SELECT语句"><a href="#基本的SELECT语句" class="headerlink" title="基本的SELECT语句"></a>基本的SELECT语句</h4><h5 id="SELECT…"><a href="#SELECT…" class="headerlink" title="SELECT…"></a>SELECT…</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#没有任何子句</span><span class="token keyword">SELECT</span> <span class="token number">9</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#没有任何子句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="SELECT…FROM"><a href="#SELECT…FROM" class="headerlink" title="SELECT…FROM"></a>SELECT…FROM</h5><ul><li><p>语法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 标识选择哪些列 <span class="token keyword">FROM</span> 标识从哪个表中选择<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>选择全部列</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>一般情况下，除非需要使用表中所有的字段数据，最好不要使用通配符‘*’。使用通配符虽然可以节</p><p>省输入查询语句的时间，但是获取不需要的列数据通常会降低查询和所使用的应用程序的效率。通</p><p>配符的优势是，当不知道所需要的列的名称时，可以通过它获取它们。</p><p>在生产环境下，不推荐你直接使用 SELECT * 进行查询。</p></blockquote></li><li><p>选择特定列</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 列名<span class="token number">1</span><span class="token punctuation">,</span> 列名<span class="token number">2</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h5 id="列的别名"><a href="#列的别名" class="headerlink" title="列的别名"></a>列的别名</h5><ul><li><p>语法</p><p>紧跟列名，也可以<strong>在列名和别名之间加入关键字<strong><strong>AS</strong></strong>，别名使用双引号</strong>，以便在别名中包含空格或特殊的字符并区分大小写。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 列名 <span class="token keyword">AS</span> 别名<span class="token keyword">FROM</span> 表名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 列名 <span class="token string">"别名"</span><span class="token keyword">FROM</span> 表名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h5 id="去除重复行"><a href="#去除重复行" class="headerlink" title="去除重复行"></a>去除重复行</h5><p>默认情况下，查询会返回全部行，包括重复行。<strong>在SELECT语句中使用关键字DISTINCT去除重复行</strong>。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token punctuation">[</span>列名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>列名<span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">FROM</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这里有两点需要注意：</p><ol><li><p>DISTINCT 需要放到所有列名的前面，如果写成 SELECT [列名1], DISTINCT [列名2]  FROM [表名] 会报错。</p></li><li><p>DISTINCT 其实是对后面所有列名的组合进行去重。</p></li></ol></blockquote><h5 id="空值参与运算"><a href="#空值参与运算" class="headerlink" title="空值参与运算"></a>空值参与运算</h5><ul><li><p>所有运算符或列值遇到null值，运算的结果都为null</p><blockquote><p>在 MySQL 里面， 空值不等于空字符串。一个空字符串的长度是 0，而一个空值的长度是空。而且，在 MySQL 里面，空值是占用空间的。</p></blockquote></li></ul><h5 id="查询常数"><a href="#查询常数" class="headerlink" title="查询常数"></a>查询常数</h5><p>SELECT 查询还可以对常数进行查询。对的，就是在 SELECT 查询结果中增加一列固定的常数列。这列的取值是我们指定的，而不是从数据表中动态取出的。</p><p>你可能会问为什么我们还要对常数进行查询呢？</p><p>SQL 中的 SELECT 语法的确提供了这个功能，一般来说我们只从一个表中查询数据，通常不需要增加一个固定的常数列，但如果我们想整合不同的数据源，用常数列作为这个表的标记，就需要查询常数。</p><p>eg：我们想对 employees 数据表中的员工姓名进行查询，同时增加一列字段 <code>corporation</code> ，这个字段固定值为“xxx”，可以这样写:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">'xxx'</span> <span class="token keyword">as</span> corporation<span class="token punctuation">,</span> last_name <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h4><p>使用DESCRIBE 或 DESC 命令，表示表结构。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DESCRIBE</span> 表名<span class="token punctuation">;</span> 或<span class="token keyword">DESC</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>eg:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DESC</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.g5g28g7xpdc.webp" alt=""><p>其中，各个字段的含义分别解释如下：</p><ul><li>Field：表示字段名称。</li><li>Type：表示字段类型，这里 barcode、goodsname 是文本型的，price 是整数类型的。</li><li>Null：表示该列是否可以存储NULL值。</li><li>Key：表示该列是否已编制索引。PRI表示该列是表主键的一部分；UNI表示该列是UNIQUE索引的一</li><li>部分；MUL表示在列中某个给定值允许出现多次。</li><li>Default：表示该列是否有默认值，如果有，那么值是多少。</li><li>Extra：表示可以获取的与给定列有关的附加信息，例如AUTO_INCREMENT等。</li></ul><h4 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h4><ul><li><p>语法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 过滤条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>使用WHERE 子句，将不满足条件的行过滤掉</p></li><li><p>WHERE子句紧随FROM子句</p></li></ul></li></ul><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li><p>使用ORDER BY 字句排序</p><ul><li><pre class="line-numbers language-SQL"><code class="language-SQL">SELECT 列名1、列名2FROM 表名ORDER BY 列名3、列名4 [ASC]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>ASC（ascend)升序</strong></p></li><li><p><strong>DESC（descend）降序</strong></p></li><li><p><strong>ORDER BY</strong> <strong>子句在SELECT语句的结尾</strong></p></li><li><p>可以使用不在SELECT列表中的列排序。</p></li><li><p>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第</p></li></ul><p>一列数据中所有值都是唯一的，将不再对第二列进行排序。</p></li></ul><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p>背景1：查询返回的记录太多了，查看起来很不方便，怎么样能够实现分页查询呢？</p><p>背景2：表里有 4 条数据，我们只想要显示第 2、3 条数据怎么办呢？</p><ul><li><p>分页原理：所谓分页显示，就是将数据库中的结果集，按需求一段一段地显示出来。</p></li><li><p><strong>MySQL****中使用</strong> <strong>LIMIT</strong> <strong>实现分页</strong></p></li><li><p>格式：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">LIMIT</span> <span class="token punctuation">[</span>位置偏移量<span class="token punctuation">,</span><span class="token punctuation">]</span> 行数<span class="token comment" spellcheck="true">#从表中第PageNo行开始显示PageSize条记录</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token keyword">LIMIT</span><span class="token punctuation">(</span>PageNo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>PageSize<span class="token punctuation">,</span>PageSize<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>注意：LIMIT 子句必须放在整个SELECT语句的最后！</strong></li></ul><blockquote><p>第一个“位置偏移量”参数指示MySQL从哪一行开始显示，是一个可选参数，如果不指定“位置偏移量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是0，第二条记录的位置偏移量是1，以此类推）；第二个参数“行数”指示返回的记录条数。</p></blockquote></li></ul><blockquote><p>MySQL 8.0中可以使用“LIMIT 3 OFFSET 4”，意思是获取从第5条记录开始后面的3条记录，和“LIMIT 4,3;”返回的结果相同。</p></blockquote><p><strong>小总结：</strong></p><pre><code>SELECT ...,...,...FROM ...WHERE ... AND/OR/NOT ...ORDER BY ... (ASC/DESC),...LIMIT ...,...</code></pre><h4 id="多表查询（重要）"><a href="#多表查询（重要）" class="headerlink" title="多表查询（重要）"></a>多表查询（重要）</h4><p>多表查询，也称为关联查询，指两个或更多个表一起完成查询操作。</p><p>前提条件：这些一起查询的表之间是有关系的（一对一、一对多），它们之间一定是有关联字段，这个关联字段可能建立了外键，也可能没有建立外键。比如：员工表和部门表，这两个表依靠“部门编号”进行关联。</p><h5 id="等值连接VS非等值连接"><a href="#等值连接VS非等值连接" class="headerlink" title="等值连接VS非等值连接"></a>等值连接VS非等值连接</h5><ul><li><p>等值连接</p><ul><li><p>示例</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">e</span><span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> <span class="token number">e</span><span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id<span class="token punctuation">,</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id<span class="token punctuation">,</span> <span class="token number">d</span><span class="token punctuation">.</span>location_id <span class="token keyword">FROM</span> employees <span class="token number">e</span> <span class="token punctuation">,</span> departments <span class="token number">d</span> <span class="token keyword">WHERE</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>1、省略多个表的连接条件或连接条件失效会产生笛卡尔积错误，为了避免笛卡尔积， 可以在WHERE 加入有效的连接条件。</p><p>2、对于数据库中表记录的查询和变更，只要涉及多个表，都需要在列名前加表的别名（或</p><p>表名）进行限定。</p><p>3、如果我们使用了表的别名，在查询字段中、过滤条件中就只能使用别名进行代替，不能使用原有的表名，否则就会报错。</p></blockquote><ul><li>连接n个表，至少需要n-1个连接条件</li></ul></li></ul></li><li><p>非等值连接</p><ul><li><p>示例</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">e</span><span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token number">e</span><span class="token punctuation">.</span>salary<span class="token punctuation">,</span> j<span class="token punctuation">.</span>grade_level <span class="token keyword">FROM</span> employees <span class="token number">e</span><span class="token punctuation">,</span> job_grades j <span class="token keyword">WHERE</span> <span class="token number">e</span><span class="token punctuation">.</span>salary <span class="token operator">BETWEEN</span> j<span class="token punctuation">.</span>lowest_sal <span class="token operator">AND</span> j<span class="token punctuation">.</span>highest_sal<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h5 id="自连接VS非自连接"><a href="#自连接VS非自连接" class="headerlink" title="自连接VS非自连接"></a>自连接VS非自连接</h5><ul><li><p>自连接：当table1和table2本质上是同一张表，只是用取别名的方式虚拟成两张表以代表不同的意义。然后两</p><p>个表再进行内连接，外连接等查询。</p><ul><li><p>示例</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span>worker<span class="token punctuation">.</span>last_name <span class="token punctuation">,</span><span class="token string">' works for '</span> <span class="token punctuation">,</span> manager<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees worker<span class="token punctuation">,</span> employees manager <span class="token keyword">WHERE</span> worker<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> manager<span class="token punctuation">.</span>employee_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>​非自连接：当table1和table2不是同一张表。</p></li></ul><h5 id="内连接VS外连接"><a href="#内连接VS外连接" class="headerlink" title="内连接VS外连接"></a>内连接VS外连接</h5><ul><li><p>内连接（INNER JOIN）: 合并具有同一列的两个以上的表的行, <strong>结果集中不包含一个表与另一个表不匹配的行</strong>（交集）</p><ul><li><p>​基本语法</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> table1<span class="token punctuation">.</span><span class="token keyword">column</span><span class="token punctuation">,</span> table2<span class="token punctuation">.</span><span class="token keyword">column</span><span class="token punctuation">,</span>table3<span class="token punctuation">.</span><span class="token keyword">column</span> <span class="token keyword">FROM</span> table1     <span class="token keyword">JOIN</span> table2 <span class="token keyword">ON</span> table1 和 table2 的连接条件        <span class="token keyword">JOIN</span> table3 <span class="token keyword">ON</span> table2 和 table3 的连接条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​它的嵌套逻辑类似与FOR循环</p></blockquote><ul><li>可以使用ON字句指定额外的连接条件，这个连接条件和其他条件是分开的</li><li>关键字JOIN、INNER JONI、CROSS JOIN的含义是一样的，都表示内连接</li></ul></li></ul></li><li><p>外连接（OUTER JOIN）：两个表在连接过程中除了返回满足连接条件的行以外<strong>还返回左（或右）表中不满足条件的行 ，这种连接称为左（或右） 外连接</strong>。没有匹配的行时, 结果表中相应的列为空(NULL)。</p><ul><li>左外连接（LEFT OUTER JOIN）语法：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#实现查询结果是A </span><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> A表 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> B表 <span class="token keyword">ON</span> 关联条件 <span class="token keyword">WHERE</span> 等其他子句<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>右外连接（RIGHT OUTER JOIN）语法：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#实现查询结果是B </span><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> A表 <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> B表 <span class="token keyword">ON</span> 关联条件 <span class="token keyword">WHERE</span> 等其他子句<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>满外连接（FULL OUTER JOIN）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> A表 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> B表 <span class="token keyword">ON</span> 关联条件 <span class="token keyword">WHERE</span> 等其他子句<span class="token punctuation">;</span><span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> A表 <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> B表 <span class="token keyword">ON</span> 关联条件 <span class="token keyword">WHERE</span> 等其他子句<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>满外连接的结果 &#x3D; 左右表匹配的数据 + 左表没有匹配到的数据 + 右表没有匹配到的数据。</p></li><li><p>SQL99是支持满外连接的。使用FULL JOIN 或 FULL OUTER JOIN来实现。</p></li><li><p>需要注意的是，MySQL不支持FULL JOIN，但是可以用 LEFT JOIN <strong>UNION</strong> RIGHT JOIN代替</p></li></ul></li></ul></li></ul><blockquote><p>1、LEFT JOIN 和 RIGHT JOIN 只存在于 SQL99 及以后的标准中，在 SQL92 中不存在，只能用 (+) 表示。</p><p>2、在 SQL92 中采用（+）代表从表所在的位置。即左或右外连接中，(+) 表示哪个是从表。</p><p>3、在 SQL92 中，只有左外连接和右外连接，没有满（或全）外连接。</p><p>4、Oracle 对 SQL92 支持较好，而 MySQL 则不支持 SQL92 的外连接。</p></blockquote><h5 id="UNION的使用"><a href="#UNION的使用" class="headerlink" title="UNION的使用"></a>UNION的使用</h5><p><strong>合并查询结果</strong> 利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并</p><p>时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用UNION或UNION </p><p>ALL关键字分隔。</p><ul><li><p>语法格式：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">UNION</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span><span class="token punctuation">]</span> <span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> table2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>UNION操作符</p><ul><li>UNION 操作符返回两个查询的结果集的并集，去除重复记录。</li><li><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1vw38asyr4jk.webp"></li></ul></li><li><p>UNION ALL操作符</p><ul><li>UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，不去重。</li><li><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6gw4liv4yqdc.webp"></li></ul></li></ul><blockquote><p>注意：执行UNION ALL语句时所需要的资源比UNION语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用UNION ALL语句，以提高数据查询的效率。</p></blockquote><h5 id="7种SQL-JOINS的实现"><a href="#7种SQL-JOINS的实现" class="headerlink" title="7种SQL JOINS的实现"></a>7种SQL JOINS的实现</h5><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1g0i80yhhd9c.webp"></p><p>示例：</p><ul><li><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#左中图：A - A∩B </span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>department_name <span class="token keyword">FROM</span> employees <span class="token number">e</span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> departments <span class="token number">d</span> <span class="token keyword">ON</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#左下图：满外连接 # 左中图 + 右上图 A∪B</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>department_name <span class="token keyword">FROM</span> employees <span class="token number">e</span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> departments <span class="token number">d</span> <span class="token keyword">ON</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token comment" spellcheck="true">#没有去重操作，效率高 </span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>department_name <span class="token keyword">FROM</span> employees <span class="token number">e</span> <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> departments <span class="token number">d</span><span class="token keyword">ON</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#右下图 #左中图 + 右中图 A ∪B- A∩B 或者 (A - A∩B) ∪ （B - A∩B） </span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>department_name <span class="token keyword">FROM</span> employees <span class="token number">e</span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> departments <span class="token number">d</span> <span class="token keyword">ON</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span><span class="token keyword">WHERE</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>department_name <span class="token keyword">FROM</span> employees <span class="token number">e</span> <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> departments <span class="token number">d</span> <span class="token keyword">ON</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="子查询（重要）"><a href="#子查询（重要）" class="headerlink" title="子查询（重要）"></a>子查询（重要）</h4><h4 id="MySql中的函数"><a href="#MySql中的函数" class="headerlink" title="MySql中的函数"></a>MySql中的函数</h4><p>​聚合函数作用于一组数据，并对一组数据返回一个值。</p><h5 id="常用聚合函数"><a href="#常用聚合函数" class="headerlink" title="常用聚合函数"></a>常用聚合函数</h5><ul><li><p>语法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">[</span><span class="token keyword">column</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token keyword">group</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span><span class="token keyword">column</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span><span class="token keyword">column</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>AVG(): 求平均值，可以对<strong>数值型数据</strong>使用。</p></li><li><p>SUM(): 求和，可以对<strong>数值型数据</strong>使用。</p></li><li><p>MAX() &#x2F; MIN():求最大&#x2F;小值，可以对<strong>任意数据类型</strong>的数据使用 MIN 和 MAX 函数。</p></li><li><p>COUNT(): COUNT(*)返回表中记录总数，适用于任意类型，COUNT(expr) 返回expr<strong>不为空</strong>的记录总数。</p><ul><li>如果需要统计表中的记录数COUNT(<em>)、COUNT(1)、COUNT(具体字段)，建议使用COUNT(</em>)和COUNT（1）。</li></ul></li></ul><p></p></li><li><p>聚合函数不能嵌套使用。比如不能出现类似“AVG(SUM(字段名称))”形式的调用。</p></li><li><p><strong>GROUP BY</strong>：<strong>将表中的数据分成若干组</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token punctuation">,</span> group_function<span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> group_by_expression<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">column</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在SELECT列表中所有未包含在组函数中的列都应该包含在GROUP BY子句中。GROUP BY中声明的子句可以不出现在SELECT中。</p></li><li><p>GROUP BY 按照分组字段先后顺序依次分组。</p></li><li><p>GROUP BY 后面使用WITH ROLLUP 关键字之后，</p></li><li><p>在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量。</p><blockquote><p>注意：</p><p>当使用ROLLUP时，不能同时使用ORDER BY子句进行结果排序，即ROLLUP和ORDER BY是互相排斥的。</p></blockquote></li></ul></li><li><p><strong>HAVING: 过滤分组</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token punctuation">,</span> group_function<span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> group_by_expression<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">HAVING</span><span class="token keyword">group</span> condition<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">column</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>行已经被分组。</p></li><li><p>使用了聚合函数。</p></li><li><p>满足HAVING 子句中条件的分组将被显示。</p></li><li><p>HAVING 不能单独使用，必须要跟 GROUP BY 一起使用。</p></li></ol><ul><li>WHERE是先筛选数据再关联，执行效率高，但不能使用分组中的计算函数进行筛选。</li><li>HAVING在最后的结果集中进行刷选，执行效率较低，可以使用分组中的计算函数。</li><li>WHERE和HAVING也不是相互排斥的，我们可以在一个查询中同时使用WHERE和HAVING。<strong>包含分组统计函数用HAVING，普通条件用WHERE</strong>。</li></ul></li></ul><p></p><p><strong>小总结：</strong></p><p>SQL92语法：</p><pre><code>SELECT ...,...,...(存在聚合函数)FROM ...,...,...WHERE 多表的连接条件 AND 不包含聚合函数的过滤条件GROUP BY ...,...HAVING 包含聚合函数的过滤条件ORDER BY ...,...(ASC/DESC)LIMIT ...,....</code></pre><p>SQL99语法：</p><pre><code>SELECT ...,...,...(存在聚合函数)FROM ... (LEFT / RIGHT)JOIN ...ON 多表的连接条件(LEFT / RIGHT)JOIN ... ON...WHERE 不包含聚合函数的过滤条件AND / OR 不包含组函数的过滤条件GROUP BY ...,...HAVING 包含聚合函数的过滤条件ORDER BY ...,...(ASC/DESC)LIMIT ...,....</code></pre><blockquote><p>#其中： </p><p>#（1）from：从哪些表中筛选 </p><p>#（2）on：关联多表查询时，去除笛卡尔积 </p><p>#（3）where：从表中筛选的条件 </p><p>#（4）group by：分组依据 </p><p>#（5）having：在统计结果中再次筛选 </p><p>#（6）order by：排序 </p><p>#（7）limit：分页</p></blockquote><pre><code>#关键字顺序：SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ... LIMIT...#SELECT语句执行顺序：FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT</code></pre><h5 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h5><ul><li><p>基本函数</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.68k7fg1jxm9s.webp"></p></li><li><p>角度与弧度互换函数</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.41162e3uycqo.webp"></p></li><li><p>三角函数</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4b4axo7plo3k.webp"></p></li><li><p>指数与对数</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.3zoizdfq1cqo.webp"></p></li><li><p>进制间的转换</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.648tvw4bn4sg.webp"></p></li></ul><h5 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h5><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.o0tpxzzhngg.webp"></p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5n0b5rsk854w.webp"></p><blockquote><p>注意：MySQL中，字符串的位置是从1开始的。</p></blockquote><h5 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h5><ul><li>获取日期、时间</li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.51uovgci3ukg.webp"></p><ul><li><p>日期与时间戳的转换</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.42ys679plwg0.webp"></p></li><li><p>获取月份、星期、星期数、天数等</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6s2cppsn36kg.webp"></p></li><li><p>日期的操作函数</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.46v3diw9mtvk.webp"></p></li><li><p>时间和秒钟转换函数</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6lsyvwzfn0xs.webp"></p></li><li><p>计算日期和时间的函数</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.22dn9oe6q82o.webp"></p></li></ul><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4tpfx5y7860.webp"></p><ul><li><p>日期的格式化与解析</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1zs7cekvcs4g.webp"></p></li></ul><p>​<img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.54f8w8r42yrk.webp"> </p><h5 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h5><p>​流程处理函数可以根据不同的条件，执行不同的处理流程，可以在SQL语句中实现不同的条件选择。</p><p>MySQL中的流程处理函数主要包括IF()、IFNULL()和CASE()函数。</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6trhz4etu3r4.webp"></p><h5 id="加密与解密函数"><a href="#加密与解密函数" class="headerlink" title="加密与解密函数"></a>加密与解密函数</h5><p>加密与解密函数主要用于对数据库中的数据进行加密和解密处理，以防止数据被他人窃取。这些函数在保证数据库安全时非常有用。在实际开发中数据安全问题在客户端就已经解决，该函数在数据库中用的较少。</p><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.24zvjtp9g0kg.webp"></h5><h5 id="MySql信息函数"><a href="#MySql信息函数" class="headerlink" title="MySql信息函数"></a>MySql信息函数</h5><p>MySQL中内置了一些可以查询MySQL信息的函数，这些函数主要用于帮助数据库开发或运维人员更好地对数据库进行维护工作。</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1kt437sz9d7k.webp"></p><h5 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h5><p>MySQL中有些函数无法对其进行具体的分类，但是这些函数在MySQL的开发和运维过程中也是不容忽视的。</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.2zbjookb0szk.webp"></p><h4 id="子查询（重要）-1"><a href="#子查询（重要）-1" class="headerlink" title="子查询（重要）"></a>子查询（重要）</h4><p>​子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。</p><p>SQL 中子查询的使用大大增强了 SELECT 查询的能力，因为很多时候查询需要从结果集中获取数据，或者需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集</p><p>合）进行比较。</p><ul><li><p>子查询的基本语法结构</p><ul><li><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> select_list<span class="token keyword">FROM</span>   <span class="token keyword">table</span><span class="token keyword">WHERE</span>  expr operator                    <span class="token punctuation">(</span><span class="token keyword">SELECT</span>select_list                     <span class="token keyword">FROM</span><span class="token keyword">table</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子查询（内查询）在主查询之前一次执行完成，子查询的结果被主查询（外查询）使用。</p><ul><li>注意：1、子查询要包含在括号内2、将子查询放在比较条件的右侧3、单行操作符对应单行子查询，多行操作符对应多行子查询。</li></ul></li></ul></li><li><p>子查询的分类</p><ul><li><p>我们按内查询的结果返回一条还是多条记录，将子查询分为 单行子查询 、 多行子查询 。</p><ul><li><p>单行比较操作符：</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.64q5r515uu80.webp"></p></li><li><p>多行比较操作符：</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1lyyl6wjsd9c.webp"></p></li></ul></li><li><p>我们按内查询是否被执行多次，将子查询划分为 相关(或关联)子查询 和 不相关(或非关联)子查询 。</p><ul><li><p>eg：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id</span><span class="token comment" spellcheck="true">#方式一：相关子查询</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>department_id<span class="token keyword">FROM</span> employees <span class="token keyword">outer</span><span class="token keyword">WHERE</span> salary <span class="token operator">></span>                <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>                 <span class="token keyword">FROM</span> employees                 <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span>                        <span class="token keyword">outer</span><span class="token punctuation">.</span>department_id<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">#方式二：from中使用子查询</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>salary<span class="token punctuation">,</span><span class="token number">e1</span><span class="token punctuation">.</span>department_id <span class="token keyword">FROM</span> employees <span class="token number">e1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> dept_avg_sal <span class="token keyword">FROM</span> employees <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token punctuation">)</span> <span class="token number">e2</span> <span class="token keyword">WHERE</span> <span class="token number">e1</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">e2</span><span class="token punctuation">.</span>department_id <span class="token operator">AND</span> <span class="token number">e2</span><span class="token punctuation">.</span>dept_avg_sal <span class="token operator">&lt;</span> <span class="token number">e1</span><span class="token punctuation">.</span><span class="token punctuation">`</span>salary<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>from型的子查询：子查询是作为from的一部分，子查询要用()引起来，并且要给这个子查询取别名， 把它当成一张“临时的虚拟的表”来使用。</p></blockquote></li><li><p>EXISTS 与 NOT EXISTS关键字</p><ul><li><p>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</p><ul><li>如果在子查询中不存在满足条件的行：条件返回FALSE,继续在子查询中查找。</li><li>如果在子查询中存在满足条件的行：不在子查询中查找,条件返回TRUE。</li></ul></li><li><p>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</p></li></ul></li></ul></li></ul><h3 id="SQL之运算符"><a href="#SQL之运算符" class="headerlink" title="SQL之运算符"></a>SQL之运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>​算术运算符主要用于数学运算，其可以连接运算符前后的两个数值或表达式，对数值或表达式进行加（+）、减（-）、乘（*）、除（&#x2F;）和取模（%）运算。</p><ul><li><p>一个整数类型的值对整数进行加法和减法操作，结果还是一个整数；</p></li><li><p>一个整数类型的值对浮点数进行加法和减法操作，结果是一个浮点数；</p></li><li><p>在Java中，+的左右两边如果有字符串，那么表示字符串的拼接。但是在MySQL中+只表示数值相加。如果遇到非数值类型，先尝试转成数值，如果转失败，就按0计算。（补充：MySQL中字符串拼接要使用字符串函数CONCAT()实现）</p></li><li><p>一个数乘以整数1和除以整数1后仍得原数；</p></li><li><p>一个数乘以浮点数1和除以浮点数1后变成浮点数，数值与原数相等；</p></li><li><p>一个数除以整数后，不管是否能除尽，结果都为一个浮点数；</p></li><li><p>一个数除以另一个数，除不尽时，结果为一个浮点数，并保留到小数点后4位；</p></li><li><p>乘法和除法的优先级相同，进行先乘后除操作与先除后乘操作，得出的结果相同。</p></li><li><p>在数学运算中，0不能用作除数，在MySQL中，一个数除以0为NULL。</p></li></ul><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>​比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回1，比较的结果为假则返回0，其他情况则返回NULL。比较运算符经常被用来作为SELECT查询语句的条件来使用，返回符合条件的结果记录。</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.7lgjne6kcd4w.webp"></p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>​逻辑运算符主要用来判断表达式的真假，在MySQL中，逻辑运算符的返回结果为1、0或者NULL。 MySQL中支持4种逻辑运算符如下：</p><ul><li>逻辑非（NOT或!）运算符表示当给定的值为0时返回1；当给定的值为非0值时返回0；当给定的值为NULL时，返回NULL。 </li><li>逻辑与（AND或&amp;&amp;）运算符是当给定的所有值均为非0值，并且都不为NULL时，返回1；当给定的一个值或者多个值为0时则返回0；否则返回NULL。 </li><li>逻辑或（OR或||）运算符是当给定的值都不为NULL，并且任何一个值为非0值时，则返回1，否则返回0；当一个值为NULL，并且另一个值为非0值时，返回1，否则返NULL；当两个值都为NULL时，返回NULL。</li><li>逻辑异或（XOR）运算符是当给定的值中任意一个值为NULL时，则返回NULL；如果两个非NULL的值都是0或者都不等于0时，则返回0；如果一个值为0，另一个值不为0时，则返回1。</li></ul><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>​位运算符是在二进制数上进行计算的运算符。位运算符会先将操作数变成二进制数，然后进行位运算，最后将计算结果从二进制变回十进制数。</p><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5ybcytksdts0.webp"></p><h4 id="正则表达式查询"><a href="#正则表达式查询" class="headerlink" title="正则表达式查询"></a>正则表达式查询</h4><p>​正则表达式通常被用来检索或替换那些符合某个模式的文本内容，根据指定的匹配模式匹配文本中符合要求的特殊字符串。例如，从一个文本文件中提取电话号码，查找一篇文章中重复的单词或者替换用户输入的某些敏感词语等，这些地方都可以使用正则表达式。正则表达式强大而且灵活，可以应用于非常复杂的查询。MySQL中使用REGEXP关键字指定正则表达式的字符匹配模式。下表列出了REGEXP操作符中常用字符匹配列表：</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.3apju0fa0juo.webp"></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树刷题总结</title>
      <link href="/2022/03/18/er-cha-shu-shua-ti-zong-jie/"/>
      <url>/2022/03/18/er-cha-shu-shua-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>​     本篇总结主要来源于<a href="https://labuladong.gitee.io/algo/]">https://labuladong.gitee.io/algo/]</a></p><h4 id="二叉树递归遍历框架"><a href="#二叉树递归遍历框架" class="headerlink" title="二叉树递归遍历框架"></a>二叉树递归遍历框架</h4><p>​<strong>二叉树的遍历分为前中后序三种，这三种遍历方式分别代表遍历二叉树过程中处理每个结点的三个特殊时间点：</strong></p><ul><li>前序位置的代码在刚进入一个二叉树节点的时候执行；</li><li>后序位置的代码在将要离开一个二叉树节点的时候执行；</li><li>中序位置的代码在一个二叉树节点左子树都遍历完，即将开始遍历右子树的时候执行。</li></ul><p>二叉树遍历框架：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 前序位置</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 中序位置</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后序位置</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>eg:在二叉树中搜索target：</p><pre class="line-numbers language-java"><code class="language-java">TreeNode <span class="token function">search</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前节点没找到就递归地去左右子树寻找</span>    TreeNode left <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode right <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> left <span class="token operator">!=</span> null <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​在解题过程中，<strong>你只需要知道每个节点应该做什么，在什么时候做，然后根据函数定义，选择合适的位置，通过二叉树遍历框架，递归调用子节点，递归会对所有节点做相同的操作。</strong></p><blockquote><p>注意：</p><p>有时候我们需要设置辅助函数，增加函数参数列表，在参数中携带额外的信息，将这种约束传递给子树的所有节点。</p></blockquote><h4 id="二叉树题目思路"><a href="#二叉树题目思路" class="headerlink" title="二叉树题目思路"></a>二叉树题目思路</h4><p>​<strong>关于应该做什么，通常来说有两种思路：①遍历一遍二叉树得出答案；②分解子问题，通过计算得到答案。</strong></p><p>eg ：力扣104题 <a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree">二叉树的最大深度</a>，最大深度就是根节点到最远叶子节点的路径上的节点数，两种思路都可以解决。</p><p>思路①遍历一遍二叉树得出答案：可以遍历一遍二叉树，用一个外部变量记录每个节点所在的深度，取最大值就可以得到二叉树的最大深度。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 记录最大深度</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 记录遍历到的节点的深度</span><span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 主函数</span><span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 二叉树遍历框架</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 到达叶子节点，更新最大深度</span>        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 前序位置，进入一个节点</span>    depth<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后序位置，离开一个节点</span>    depth<span class="token operator">--</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路②分解子问题，通过计算得到答案：二叉树的最大深度也可以通过子树的最大高度+1计算出来。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义：输入根节点，返回这棵二叉树的最大深度</span><span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 利用定义，计算左右子树的最大深度</span>    <span class="token keyword">int</span> leftMax <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rightMax <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 整棵树的最大深度等于左右子树的最大深度取最大值，</span>    <span class="token comment" spellcheck="true">// 然后再加上根节点自己</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftMax<span class="token punctuation">,</span> rightMax<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>综上，<strong>遇到一道二叉树题，可以这样思考：是否可以通过遍历一遍二叉树得到答案？如果不能，是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案？</strong></p><h4 id="二叉树题解时机"><a href="#二叉树题解时机" class="headerlink" title="二叉树题解时机"></a>二叉树题解时机</h4><p>​关于在什么时候做，如前文所述，处理二叉树结点有三个时间点：前、中、后，不同时间点由于其所处位置的特性不同，处理问题的效果也不尽相同。</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6drhgfd5ovpc.webp" alt="二叉树遍历顺序"></p><ul><li><p>前序位置为刚刚进入节点的时刻，意味着前序位置的代码只能从函数参数中获取父节点传递来的数据。</p><ul><li>前序位置本身其实没有什么特别的性质，之所以你发现好像很多题都是在前序位置写代码，实际上是因为我们习惯把那些对前中后序位置不敏感的代码写在前序位置。</li></ul></li><li><p>中序位置在左子树遍历完，开始遍历右子树的时刻，意味着中序位置不仅可以获取父节点传递来的参数，调整左右子树遍历顺序，还可以获取到左子树或右子树通过函数返回值传递回来的数据。</p><ul><li><strong>中序位置主要用在二叉搜索树（BST ）场景中，鉴于BST‘左小右大’的性质，BST 的中序遍历相当于遍历有序数组，可以升序或降序遍历BST。</strong></li></ul></li><li><p>后序位置为离开节点的时刻，意味着后续位置的代码不仅可以获取父节点传递来的参数数据，还可以获取到左右子树通过函数返回值传递回来的数据。</p><ul><li>由于递归利用了堆栈先进后出的性质，二叉树递归遍历，前序位置的代码执行是自顶向下的，而后序位置的代码执行是自底向上的。</li><li>当题目需要用到左右子树函数的返回值，那大概率要给函数设置合理的定义和返回值，<strong>在后序位置写代码。很多时候通过后续位置获取左右子树的返回值可以少写很多步骤，提高运行效率。</strong></li></ul></li></ul><p>eg：力扣543题 <a href="https://leetcode-cn.com/problems/diameter-of-binary-tree">二叉树的直径</a>，二叉树的直径长度就是任意两个节点之间的路径长度，最长直径并不一定要穿过根节点。</p><p>思路：每一条二叉树的直径长度就是一个节点的左右子树的最大深度之和，最直接的就是遍历整棵树中每个节点，通过求出每个节点的左右子树的最大深度之和算出每个节点的直径，然后比较得到最大直径即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 记录最大直径的长度</span><span class="token keyword">int</span> maxDiameter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对每个节点计算直径，求最大直径</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maxDiameter<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 遍历二叉树</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对每个节点计算直径</span>    <span class="token keyword">int</span> leftMax <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rightMax <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> myDiameter <span class="token operator">=</span> leftMax <span class="token operator">+</span> rightMax<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新全局最大直径</span>    maxDiameter <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxDiameter<span class="token punctuation">,</span> myDiameter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 计算二叉树的最大深度</span><span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> leftMax <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rightMax <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftMax<span class="token punctuation">,</span> rightMax<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个解法递归函数traverse遍历每个节点时都会调用递归函数maxDepth遍历子树的所有节点，最坏的时间复杂度为O(N^2)。traverse中，在前序位置无法获取子树信息，得到左右子树最大深度，只能让每个节点都调用maxDepth函数去计算子树的深度。而我们发现，在maxDepth函数中已经算出了左右子树的最大深度，那么只需要在maxDepth函数的后序位置通过已知的左右子树深度算出直径，通过比较即可得到最大直径。</p><p>改良：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 记录最大直径的长度</span><span class="token keyword">int</span> maxDiameter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maxDiameter<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> leftMax <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rightMax <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后序位置顺便计算最大直径</span>    <span class="token keyword">int</span> myDiameter <span class="token operator">=</span> leftMax <span class="token operator">+</span> rightMax<span class="token punctuation">;</span>    maxDiameter <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxDiameter<span class="token punctuation">,</span> myDiameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftMax<span class="token punctuation">,</span> rightMax<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改良后，时间复杂度只有maxDepth函数的O(N)了。</p><p>​综上：<strong>遇到子树问题，首先想到的是给函数设置返回值，然后在后序位置做文章。如果写出了递归套递归的解法，大概率需要反思是不是可以通过后序遍历优化。</strong></p><h4 id="二叉树的层序（迭代）遍历"><a href="#二叉树的层序（迭代）遍历" class="headerlink" title="二叉树的层序（迭代）遍历"></a>二叉树的层序（迭代）遍历</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 输入一棵二叉树的根节点，层序遍历这棵二叉树</span><span class="token keyword">void</span> <span class="token function">levelTraverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从上到下遍历二叉树的每一层</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sz <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从左到右遍历每一层的每个节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TreeNode cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将下一层节点放入队列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="经典试题"><a href="#经典试题" class="headerlink" title="经典试题"></a>经典试题</h4><p>​力扣 <a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></p><p>​力扣 <a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106. 从中序与后序遍历序列构造二叉树</a></p><p>​力扣 <a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/">889. 根据前序和后序遍历构造二叉树</a></p><p>本次就只讲解从前序与中序遍历序列构造二叉树，另外两题思路差不多（以前写过好像）。</p><p>我们先来回顾一下前序遍历和中序遍历：</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.2feflsdwnvr4.webp"></p><p>解决本题需要考虑：①如何得到根节点，②如何确定左右子树。然后通过递归对每个结点做相同的事，最终构造出整棵二叉树。</p><p>①如何找到根节点：前序遍历的第一个值 <code>preorder[0]</code> 就是根节点的值。</p><p>②如何确定左右子树：前序序列获得根节点值，在中序序列找到根节点所在的索引下标index,index两端分别是左右子树，即可得到左右子树的前序序列和中序序列。</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.o6ty434d08g.webp"></p><p>解法代码：</p><pre class="line-numbers language-java"><code class="language-java">TreeNode <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span> preStart<span class="token punctuation">,</span> <span class="token keyword">int</span> preEnd<span class="token punctuation">,</span>             <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> inStart<span class="token punctuation">,</span> <span class="token keyword">int</span> inEnd<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//序列为空    </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>preStart <span class="token operator">></span> preEnd<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// root 节点对应的值就是前序遍历数组的第一个元素</span>    <span class="token keyword">int</span> rootVal <span class="token operator">=</span> preorder<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// rootVal 在中序遍历数组中的索引</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> inStart<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> inEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> rootVal<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> leftSize <span class="token operator">=</span> index <span class="token operator">-</span> inStart<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 先构造出当前根节点</span>    TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 递归构造左右子树</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preStart <span class="token operator">+</span> leftSize<span class="token punctuation">,</span>                    inorder<span class="token punctuation">,</span> inStart<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart <span class="token operator">+</span> leftSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preEnd<span class="token punctuation">,</span>                    inorder<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而从中序和后序序列构造二叉树思路相同，只不过后序遍历和前序遍历相反，根节点对应的值为 <code>postorder</code> 的最后一个元素。</p><p>​通过前序或者后序遍历结果找到根节点，然后在根据中序遍历结果确定左右子树，所以你可以通过前序中序，或者后序中序遍历结果可以唯一确定一棵原始二叉树，但是通过前序后序遍历结果无法确定原始二叉树。因为遍历结果没有记录空的左右子节点，你可以确定根节点，但是无法确切的知道左右子树有哪些节点。</p><blockquote><p>eg：根据前后序序列构造二叉树中，我们假设前序遍历的第二个元素是左子树的根节点，但实际上左子树可能是空指针，这个元素可能是右子树的根节点。由于这里无法确切进行判断，所以导致了最终答案的不唯一。</p></blockquote><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/dog.3pyl3rpl47pc.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 力扣刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 力扣刷题、二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表刷题总结</title>
      <link href="/2022/03/13/lian-biao-shua-ti-zong-jie/"/>
      <url>/2022/03/13/lian-biao-shua-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>单链表刷题总结</title></head><body><h3>虚拟头结点</h3><p>&nbsp;&nbsp;&nbsp;&nbsp; 链表中需要删除结点时常用到虚拟头结点，删除头结点与删除其他结点操作不同，删除其他结点需要该结点的前驱结点指针，而头结点没有前驱结点，为了避免空指针及减少分类操作，设置一个虚拟结点作为头结点的前驱结点，返回链表时返回虚拟结点的next指针。 </p><h3>双指针技巧</h3><p>&nbsp;&nbsp;&nbsp;&nbsp; 双指针技巧在链表中很常见，通过设置两个指针指向链表结点，可以实现对链表不同位置的操作，从而解决相应问题。</p><h4>拉拉链</h4><p>eg：力扣21题：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">合并两个有序链表</a><br><br>我们来看解法：<br></p><pre class="line-numbers language-java"><code class="language-java">ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 虚拟头结点</span>    ListNode dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    ListNode p1 <span class="token operator">=</span> l1<span class="token punctuation">,</span> p2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 比较 p1 和 p2 两个指针</span>        <span class="token comment" spellcheck="true">// 将值较小的的节点接到 p 针</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>val <span class="token operator">></span> p2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// p 指针不断前进</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题解法逻辑类似于拉拉链，p1、p2相当于拉链的两侧锯齿，p是拉链的拉索，每次while循环将较小结点接入结果链表。</p><h4>错位双指针</h4><p>eg:剑指Offer22题：<a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">链表中倒数第k个节点</a><br><br>遍历一次链表解法：<br></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 返回链表的倒数第 k 个节点</span>ListNode <span class="token function">findFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ListNode p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// p1 先走 k 步</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    ListNode p2 <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// p1 和 p2 同时走 n - k 步</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// p2 现在指向第 n - k 个节点即倒数第 k 个结点</span>    <span class="token keyword">return</span> p2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题设置两个指针 p1、p2 ,让 p1、p2 指向链表头结点。p1 走 k 步，p2 不动。然后让 p1、p2 同时走，这样当 p1 走到链表末尾空指针时 p2 就走了 n - k 步，还剩k步走完整个链表，p2此时指向链表的倒数第 k 个结点。(ps:其实链表可以看成只有父节点和一个子节点的树，通过后序遍历方式可以倒序遍历链表)</p><h4>快慢指针</h4><p>&nbsp;&nbsp;&nbsp;&nbsp; 快慢指针由于两个指针前进的速度不同可导致两指针前进的路程成倍数关系，可用于遍历一次链表找到链表中点、判断链表是否含环等问题。</p> eg：力扣142题：<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">判断链表是否包含环并返回环的起点</a><br>解法：<br><pre class="line-numbers language-java"><code class="language-java">ListNode <span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ListNode fast<span class="token punctuation">,</span> slow<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//快慢指针初始化指向 head</span>    fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//快指针走到链表末尾时停止</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//慢指针走一步，快指针走两步</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//快慢指针相遇，说明含环</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> null <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// fast 遇到空指针说明没有环</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重新指向头结点</span>    slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 快慢指针同步前进，相交点就是环起点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>快指针的速度是慢指针的两倍，慢指针走k步则快指针走2k步，快指针比慢指针多走k步，若含环，快慢指针最终会相遇，快指针多走的k步就是在环里面打圈，这k步是整个环步数的整数倍，一定可以将整个环不多也不少地刚刚走完。如果相遇点距环起点为m步，那么从相遇点开始，再走 k-m 步就可以到达环的起点。</p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.3k6c1yms46yo.webp" alt=""><br><h3>链表的递归</h3><p>&nbsp;&nbsp;&nbsp;&nbsp; 链表是一种兼具迭代和递归性质（可以将原问题分解为相同结构的子问题）的数据结构。对于递归算法，最重要的是明白整个递归函数的定义，根据定义解决具有递归性质的题目。(ps:递归需要堆栈，相比迭代而言，需要更多的空间，使用递归操作链表并不高效。)</p><p>eg:反转链表前n个结点<br><br>解法：<br></p><pre class="line-numbers language-java"><code class="language-java">ListNode successor <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 后驱节点</span><span class="token comment" spellcheck="true">// 反转以 head 为起点的 n 个节点，返回新的头结点</span>ListNode <span class="token function">reverseN</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记录第 n + 1 个节点</span>        successor <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 以 head.next 为起点，需要反转前 n - 1 个节点</span>    ListNode last <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 让反转之后的 head 节点和后面的节点连起来</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> successor<span class="token punctuation">;</span>    <span class="token keyword">return</span> last<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法过程：<br><br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/7.72vkxgs33o1s.gif" alt=""><br></p><h3>链表的迭代</h3><p>&nbsp;&nbsp;&nbsp;&nbsp; 链表有next指针域可以很方便找到下一个结点，对每个结点进行重复操作，它是可迭代的。<p>eg：力扣92题：<a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">反转部分链表</a><br>迭代解法：<br><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 反转区间 [a, b) 的元素，注意是左闭右开 */</span>ListNode <span class="token function">reverse</span><span class="token punctuation">(</span>ListNode a<span class="token punctuation">,</span> ListNode b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ListNode pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span>    pre <span class="token operator">=</span> null<span class="token punctuation">;</span> cur <span class="token operator">=</span> a<span class="token punctuation">;</span> nxt <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        nxt <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//逐个结点反转</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更新指针位置</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> nxt<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回反转后的头结点</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法过程：<br><br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/8.6whyogo3thq8.gif" alt=""></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 力扣刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 力扣刷题、单链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的进程</title>
      <link href="/2021/12/01/xian-cheng-gai-shu/"/>
      <url>/2021/12/01/xian-cheng-gai-shu/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Java中的进程</title></head><body><h3>进程简述</h3>    <p>        &nbsp;&nbsp;&nbsp;&nbsp 进程是一个应用程序，线程是一个进程中的执行场景/执行单元。进程和进程的内存独立不共享，线程和线程堆内存和方法区内存共享，但是栈内存不共享，一个线程一个栈，栈和栈之间互不干扰，这就是多线程并发。多线程机制就是为了提高工作效率。<br>        &nbsp;&nbsp;&nbsp;&nbsp eg：对于java程序来说，当在DOS命令窗口中输入:        java HelloWorld回车之后，会先启动JVM,而JVM就是一个进程，JVM再启动一个主线程调用main方法，        同时再启动一个垃圾回收线程负责看护，回收垃圾。最起码，现在的java程序中至少有两个线程并发：        一个是垃圾回收线程，一个是执行main方法的主线程。      </p>    <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4mqrxea145ts.webp" alt="">    <br>    <br><h3>线程的实现</h3><h4>要点</h4><pre><code>1、实现线程的第一种方式:编写一个类，直接继承java.lang.Thread,重写run方法。    //定义线程类    public class MyThread extends Thread &#123;        public void run () &#123;        &#125;    &#125;    //创建线程对象    MyThread t = new MyThread();    //启动线程    t.start();2、实现线程的第二种方式:编写一个类，实现java.lang.Runnable接口，实现run方法。    //定义一个可运行的类    public class MyRunnable implements Runnable &#123;        public void run() &#123;        &#125;    &#125;    //创建线程对象    Thread t = new Thread (new MyRunnable ());    //启动线程    t.start();     第二种方式实现接口比较常用，因为一个类实现了接口，它还可以去继承其它的类，更灵活。3、线程的生命周期（重要 必会）注意:亘古不变的道理:方法体当中的代码永远都是自上而下的顺序依次逐行执行的。</code></pre><h4>实例一</h4><pre><code>public class ThreadTest02 &#123;    public static void main(String[] args) &#123;    //这里是main方法，这里的代码属于主线程，在主栈中运行。    //新建一个分支线程对象        MyThread myThread = new MyThread();        // myThread.run();//不会启动线程，没有新的分枝栈，还是在主栈中，没有并发。        //启动线程        //start()方法的作用是:启动一个分支线程，在JVM中开辟一个新的栈空间，只要新的栈空间开出来，start()方法就结束了。线程就启动成功了。        //启动成功的线程会自动调用run方法，并且run方法在分支根的栈底部(压根)。        // run方法在分支根的根底部, main方法在主根的根底部。run和main是平级的。        myThread.start();        //这里的代码还是运行在主线程中。        for(int i = 0; i &lt; 1000; i++)&#123;            System.out.println(&quot;主线程---&gt;&quot; + i);        &#125;    &#125;&#125;class MyThread extends Thread &#123;    @Override    public void    run() &#123;        // 编写程序,这段程序运行在分支线程中(分支栈)。        for(int i = 0; i &lt; 1000; i++)&#123;            System.out.println(&quot;分支线程---&gt;&quot; + i);        &#125;    &#125;&#125;</code></pre><h4>内存图</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.39kos4drso8w.webp" alt=""><br><h4>实列二</h4><pre><code>public class ThreadTest01 &#123;    public static void main(String[] args) &#123;        //创建一个可运行的对象        //MyRunnable r = new MyRunnable();        //将可运行的对象封装成一个线程对象        //Thread t = new Thread(r); .        Thread t = new Thread(new MyRunnable()); //合并代码        //启动线程        t. start();        /*        //创建线程对象，采用匿名内部类方式        Thread t = new Thread(new Runnable()&#123;            @Override            public void run() &#123;                for(int i = 0; i &lt; 100; i++)&#123;                    System.out.println(&quot;t线程---&gt; &quot;+ i);            &#125;        &#125;        &#125;);        */        //这里的代码还是运行在主线程中。        for(int i = 0; i &lt; 1000; i++)&#123;            System. out . println(&quot;主线程---&gt;&quot; + i);        &#125;    &#125;    &#125;    //这并不是一个线程类，是一个可运行的类。它还不是一个线程。class MyRunnable implements Runnable &#123;    @Override    public void run() &#123;        for(int i = 0; i &lt; 100; i++)&#123;            System.out.println(&quot;分支线程2---&gt;&quot;+ i);        &#125;    &#125;&#125;</code></pre><br><h4>线程生命周期</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5nrhhxw5zmdc.webp" alt="线程的生命周期"><br><br><h3>线程的常用方法</h3><h4>要点</h4><pre><code>1、获取当前线程对象    Thread t = Thread.currentThread();    返回值t就是当前线程。2、获取线程对象的名字    String name = 线程对象.getName();3、修改线程对象的名字    线程对象.setName(&quot;线程名字&quot;);4、当线程没有设置名字的时候,默认的名字有什么规律? (了解)    Thread-0    Thread-1    Thread-2    Thread-35、线程休眠sleep()    static void sleep(long millis)    1)、静态方法: Thread.sleep(1000);    2)、参数是毫秒    3)、作用:让当前线程进入休眠,进入“阻塞状态”，放弃占有CPU时间片，让给其它线程使用。        这行代码出现在A线程中, A线程就会进入休眠。        这行代码出现在B线程中, B线程就会进入休眠。    4)、Thread.sleep()方法 ，可以做到这种效果:        间隔特定的时间，去执行一段特定的代码, 每隔多久执行一次。6、终止睡眠interupt()    void interrupt()     t.interrupt();7、强行终止线程stop(),直接将线程杀死，不安全，如果数据未保存，会丢失数据，已弃用。java中和线程调度相关方法（了解）：    实例方法:    void setPriority(int newPriority) 设置线程的优先级    int getPriority()获取线程优先级        最低优先级1        默认优先级是5        最高优先级10    优先级比较高的获取CPU时间片可能会多一些。(但也不完全是，大概率是多的)    静态方法:    static void yield()     线程让位        暂停当前正在执行的线程对象，并执行其他线程        yield()方法不是阻塞方法。让当前线程让位，让给其它线程使用。        yield()方法的执行会让当前线程从运行状态回到就绪状态。        注意:在回到就绪之后，有可能还会再次抢到。    实例方法:    void join()    合并线程        class MyThread1 extends Thread &#123;            public void doSome () &#123;            MyThread2 t = new MyThread2() ;             t.join(); // 当前线程进入阻塞，t线程执行，直到t线程结束，当前线程才可以继续            &#125;        &#125;</code></pre><h4>实例</h4><pre><code>public class ThreadTest03 &#123;    public static void main(String[] args) &#123;        //让当前线程进入休眠,睡眠5秒        //当前线程是主线程! ! !        /*try &#123;        Thread.sleep(1000 * 5);        &#125; catch (InterruptedException e) &#123;        e.printStackTrace();        &#125;*/        //5秒之后执行这里的代码        Thread t = new Thread(new MyRunnable2()); .        t.setName(&quot;t&quot;);        t.start();        try &#123;            Thread.sleep(1000 * 5);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        //终断t线程的睡眠(这种终断睡眠的方式依靠了java的异常处理机制中断线程)        t.interrupt();    &#125;&#125;class MyRunnable2  implements Runnable &#123;    //重点:run() 当中的异常不能throws，只能try catch    //因为run()方法在父类中没有抛出任何异常，子类不能比父类抛出更多的异常。    @Override    public void run() &#123;        System.out.println(Thread.currentThread().getName() + &quot;---&gt; begin&quot;);        try &#123;            //睡眠1年            Thread.sleep(1000 * 60 * 60 * 24 * 365);        &#125; catch (InterruptedException e) &#123;            //打印异常信息            e.printStackTrace();        &#125;        //1年之后才会执行这里        System.out.println(Thread.currentThread().getName() + &quot;---&gt; end&quot;);    &#125;&#125;</code></pre><h4>实例二（合理终止线程）</h4><pre><code>public class ThreadTest02 &#123;    public static void main(String[] args) &#123;        MyRunable4 r = new MyRunable4();        Thread t = new Thread(r);        t.setName(&quot;t&quot;);        t.start();        //模拟5秒        try &#123;            Thread.sleep( 5000);        &#125; catch (InterruptedException e) &#123;            e. printStackTrace();        &#125;        //终止线程        //你想要什么时候终止的执行,那么你把标记修改为false ,就结束了。        r.isRunning = false;    &#125;&#125;class MyRunable4 implements Runnable &#123;    //打一个布尔标记    boolean isRunning = true;    @Override    public void run() &#123;        for (int i = 0; i &lt; 10; i++) &#123;            if (isRunning) &#123;                System.out.println(Thread.currentThread().getName() + &quot;---&gt;&quot; + i);                try &#123;                    Thread.sleep(1000);                &#125; catch (InterruptedException e) &#123;                    e.printStackTrace();                &#125;            &#125; else &#123;                //终止 当前线程                //在结束之前需要保存的可以在这里保存save...                return;            &#125;        &#125;    &#125;&#125;</code></pre><br><h3>线程安全（重点）</h3><h4>要点</h4><pre><code>1、为什么这个是重点?    以后在开发中，我们的项目都是运行在服务器当中,而服务器已经将线程的定义，    线程对象的创建，线程的启动等，都已经实现了。这些代码我们都不需要自己编写。    最重要的是:你要知道，你编写的程序需要放到一个多线程的环境下运行，    你更需要关注的是这些数据在多线程并发的环境下是否是安全的。2、什么时候数据在多线程并发的环境下会存在安全问题呢?    三个条件:    条件1:多线程并发。    条件2:有共享数据。    条件3:共享数据有修改的行为。满足以上3个条件之后，就会存在线程安全问题。3、怎么解决线程安全问题呢?    当多线程并发的环境下，有共享数据，并且这个数据还会被修改，此时就存在线程安全问题。    怎么解决这个问题?    线程排队执行。(不能并发)。这种机制被称为:线程同步机制。    线程同步就是线程排队了，线程排队了就会牺牲一部分效率换取数据安全。4、Java中有三大变量(重要)    实例变量:在堆中。    静态变量:在方法区。    局部变量:在栈中。    以上三大变量中:        局部变量永远都不会存在线程安全问题，        因为局部变量在栈中，永不共享。(一个线程一个栈。)    实例变量在堆中，堆只有1个。    静态变量在方法区中，方法区只有1个。    堆和方法区都是多线程共享的，所以可能存在线程安全问题。    局部变量+常量:不会有线程安全问题。    成员变量:可能会有线程安全问题。5、如果使用局部变量的话:    建议使用: stringBuilder    因为局部变量不存在线程安全问题，stringBuilder是线程不安全的，效率较高。    stringBuffer是线程安全的，效率较低。    ArrayList是非线程安全的。    Vector是线程安全的。    HashMap、Hashset是非线程安全的。    Hashtable是线程安全的。    ...   6、synchronized有三种写法:第一种:同步代码块    灵活    synchronized(线程共享对象) &#123;        同步代码块;    &#125;第二种:在实例方法上使用synchronized    表示共享对象一定是this    并且同步代码块是整个方法体。第三种:在静态方法上使用synchronized    表示找类锁。    一个类一把类锁。    就算创建了100个对象，那类锁也只有一把 。    （对象锁: 一个对象一把对象锁，100个对象100把对象锁。）7、我们以后开发中应该怎么解决线程安全问题?    是一上来就选择线程同步吗? synchronized    不是，synchronized会让程序的执行效率降低，用户体验不好。    系统的用户吞吐量降低，体验差。在不得已的情况下再选择线程同步机制。    第一种方案:尽量使用局部变量代替“实例变量和静态变量”。    第二种方案:如果必须是实例变量，那么可以考虑创建多个对象，这样    实例变量的内存就不共享了。(一个线程对应1个对象，100个 线程对应100个对象,    对象不共享，就没有数据安全问题了。)    第三种方案:如果不能使用局部变量，对象也不能创建多个，这个时候    就只能选择synchronized了。线程同步机制。    </code></pre><h4>synchronized同步机制</h4><pre><code>public class Account &#123;    private  String actno;    private  double balance;    //取款    public void withdraw(double money)&#123;        //以下这几行代码必须是线程安全的，不能并发        //同步代码块越小效率越高        synchronized (this)&#123;//synchronized方法参数为需要排队线程的共享数据，不能为null            double before= this.getBalance();            double after=before-money;            //模拟网络延迟            try &#123;                Thread.sleep(1000);            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;            this.setBalance(after);        &#125;        &#125;    public Account() &#123;    &#125;    public Account(String actno, double balance) &#123;        this.actno = actno;        this.balance = balance;    &#125;&#125;public class AccountThread  extends  Thread&#123;    //共享账户    private Account act;    public AccountThread(Account act)&#123;        this.act=act;    &#125;    public  void run()&#123;        //取款    double money=5000;    act.withdraw(money);        System.out.println(Thread.currentThread().getName()+&quot;取款成功,余额&quot;+act.getBalance());    &#125;&#125;public class AccountTest &#123;    public static void main(String[] args) &#123;        Account act = new Account(&quot;act-001&quot;,10000);        Thread t1 = new AccountThread(act);        Thread t2=new AccountThread(act);        t1.setName(&quot;t1&quot;);        t2.setName(&quot;t2&quot;);        t1.start();        t2.start();    &#125;&#125;</code></pre><h4>synchronized原理</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6gcj7947hgqo.webp" alt=""><br><br><h4>死锁</h4><pre><code>/*死锁情况并没有语法错误，一旦发生，既没有报错也没有异常，一直等待，很难检查。*/public class DeadLock &#123;    public static void main(String[] args) &#123;        Object o1 = new Object();        Object o2=new Object();        MyThread t=new MyThread(o1,o2);        MyThread2 t2=new MyThread2(o1,o2);        t.start();        t2.start();    &#125;    &#125;class MyThread2 extends  Thread&#123;    Object o1;    Object o2;    public  MyThread2(Object o1,Object o2)&#123;        this.o1=o1;        this.o2=o2;    &#125;    public  void run()&#123;        synchronized (o1)&#123;            try &#123;                Thread.sleep(1000);            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;            synchronized (o2)&#123;            &#125;        &#125;    &#125;&#125;class MyThread extends  Thread&#123;    Object o1;    Object o2;    public  MyThread(Object o1,Object o2)&#123;        this.o1=o1;        this.o2=o2;    &#125;    public  void run()&#123;        synchronized (o2)&#123;            try &#123;                Thread.sleep(1000);            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;            synchronized (o1)&#123;            &#125;        &#125;    &#125;&#125;</code></pre><br><h3>线程补充</h3><h4>要点</h4><pre><code>1、守护线程    java语言中线程分为两大类:        一类是:用户线程        一类是:守护线程(后台线程)    其中具有代表性的就是:垃圾回收线程(守护线程)。    守护线程的特点:        一般守护线程是一个死循环，所有的用户线程只要结束，守护线程自动结束。    注意:主线程main方法是一个用户线程。    守护线程用在什么地方呢?    每天00:00的时候系统数据自动备份。    这个需要使用到定时器，并且我们可以将定时器设置为守护线程，一直在那里看着，    没到00:00的时候就备份一次。所有的用户线程如果结束了，守护线程自动退出，没有必要进行数据备份了。        守护线程实现方法：        setDaemon(true);        //一旦线程对象调用该方法，该线程就变成守护线程，哪怕是死循环也会在主线程结束时结束。2、定时器    在java的类库中已经写好了一个定时器: java.util.Timer,可以直接拿来用。    不过，这种方式在目前的开发中也很少用，因为现在有很多高级框架都是支持定时任务的。    在实际的开发中，目前使用较多的是spring框架中提供的SpringTask框架,    这个框架只要进行简单的配置，就可以完成定时器的任务，底层其实还是用的Timer。3、实现线程的第三种方式: FutureTask方式， 实现Callable接口。 ( JDK8新特性。)    这种方式实现的线程可以获取线程的返回值。    之前讲解的那两种方式是无法获取线程返回值的，因为run方法返回void。思考:    系统委派一个线程去执行一个任务，该线程执行完任务之后，可能会有一个执行结果，    我们怎么能拿到这个执行结果呢?使用第三种方式:实现callable接口方式，call()方法相当于run()方法，只不过它有返回值。4、关于Object类中的wait和notify方法。（生产者和消费者模式!）    第一: wait和notify方法不是线程对象的方法，是java中任何一个java对象都有的方法，    因为这两个方式是Object类中自带的。wait方法和notify方法不是通过线程对象调用，    不是这样的: t.wait(), 也不是这样的: t.notify()...不对。    第二: wait()方法作用?        Object O =  new Object();        o.wait();        表示:        让正在o对象上活动的线程进入等待状态，无期限等待，直到被喚醒为止。        o.wait()方法的调用，会让&quot;当前线程(正在o对象上活动的线程)进入等待状态。    第三: notify()方法作用?        Object O = new Object();        o.notify();        表示:        唤醒正在o对象上等待的线程。    还有一个notifyAll()方法:    这个方法是唤醒o对象上处于等待的所有线程。    o.wait()方法让正在o对象上活动的当前线程进入等待状态,并且释放之前占有的o对象的锁。    o.notify()方法唤醒正在o对象上等待的线程，只是通知，不会释放之前占有的o对象的锁。    </code></pre><h4>实例一</h4><pre><code>public class TimerTest &#123;    public static void main(String[] args) throws ParseException &#123;        //创建一个定时器对象        Timer timer= new Timer();//timer相当于一个线程        //Timer timer = new Timer(true);//守护线程的方式        //指定定时任务        //timer.schedule(定时任务,第一次执行时间,间隔多久执行一次);        SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);        Date firstTime=sdf.parse(&quot;2021-03-14 18:46:30&quot;);        timer.schedule(new  LogTimerTask(),firstTime,1000*10);//第一个参数可以用匿名内部类    &#125;&#125;//编写一个定时任务类//假设这是一个记录日志的定时任务class LogTimerTask extends TimerTask &#123;    public  void run()&#123;        //编写需要执行的任务        SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);        String strTime = sdf.format(new Date());        System.out.println(strTime+&quot;:成功完成了一次数据备份！&quot;);    &#125;&#125;</code></pre><h4>实例二</h4><pre><code>public class ThreadTest &#123;    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;    //创建一个“未来人物类”对象    //参数非常重要，需要给一个Callable接口实现类对象    FutureTask task=new FutureTask(new Callable()&#123;        public  Object call() throws Exception&#123;//call()方法相当于run方法，只不过有返回值            //线程执行一个任务，执行之后可能会有一个执行结果            //模拟执行            System.out.println(&quot;call method begin&quot;);            Thread.sleep(1000*10);            System.out.println(&quot;call method end!&quot;);            int a =100;            int b=200;            return a+b;        &#125;    &#125;);    //创建一个线程对象    Thread t=new Thread(task);    //启动线程    t.start();    //这里是main方法,这是在主线程中。    //在主线程中，怎么获取t线程的返回结果?get()方法    // get()方法的执行会导致“当前线程阻塞”    Object obj=task.get();    System.out.println(&quot;线程执行结果：&quot;+obj);    // main方法这里的程序要想执行必须等待get()方法的结束    //而get()方法可能需要很久，因为get()方法是为了拿另一个线程的执行结果    //另一个线程执行是需要时间的，效率较低。    System.out.println(&quot;hello world!&quot;);    &#125;&#125;</code></pre><br><h4>生产者和消费者模式</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.7ied4itwmdq8.webp" alt=""><strong>模拟生产者和消费者模式</strong><pre><code>public class ThreadTest04 &#123;    /*    * 使用wait方法和notify方法实现生产者和消费者模式    * */    public static void main(String[] args) &#123;        List list=new ArrayList();        //创建两个线程对象：生产者线程和消费者线程        Thread t1=new Thread(new Producer(list));        Thread t2=new Thread(new Consumer(list));        t1.setName(&quot;生产者线程&quot;);        t2.setName(&quot;消费者线程&quot;);        t1.start();        t2.start();    &#125;&#125;//生产线程class Producer implements Runnable&#123;    private List list;    public Producer(List list) &#123;        this.list = list;    &#125;    @Override    public void run() &#123;        //一直生产        while (true) &#123;            synchronized (list) &#123;                if (list.size() &gt; 0) &#123;                    //当前线程进入等待状态并释放list集合的锁                    try &#123;                        list.wait();                    &#125; catch (InterruptedException e) &#123;                        e.printStackTrace();                    &#125;                &#125;            //程序能执行到这里说名明仓库是空的，可以生产            Object obj = new Object();            list.add(obj);            System.out.println(Thread.currentThread().getName() + &quot;----&gt;&quot; + obj);            //唤醒消费者进行消费            list.notifyAll();        &#125;    &#125;&#125;&#125;//消费线程class Consumer implements Runnable&#123;    private List list;    public Consumer(List list) &#123;        this.list = list;    &#125;    @Override    public void run() &#123;        //一直消费        while (true)&#123;            synchronized (list)&#123;                if(list.size()==0)&#123;                    //仓库已经空了，消费者线程等待，释放掉list集合的锁                    try &#123;                        list.wait();                    &#125; catch (InterruptedException e) &#123;                        e.printStackTrace();                    &#125;                &#125;                //程序执行到此处说明仓库中有数据，消费者消费            Object obj= list.remove(0);                System.out.println(Thread.currentThread().getName()+&quot;----&gt;&quot;+obj);                //唤醒生产者进行生产                list.notifyAll();            &#125;        &#125;    &#125;&#125;</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射机制</title>
      <link href="/2021/11/15/fan-she-ji-zhi-he-zhu-jie-jian-jie/"/>
      <url>/2021/11/15/fan-she-ji-zhi-he-zhu-jie-jian-jie/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>反射机制和注解简介</title></head><body><h3>反射机制简介</h3><p>    &nbsp; &nbsp; &nbsp; &nbsp;通过java语言中的反射机制可以操控（读/写）字节码文件。反射机制相关类在java.lang.reflect.*下，相关重要类包括：java.lang.Class（代表整个字节码，代表整个类）；java.lang.reflect.Method（代表字节码中的方法字节码，代表类中的方法）；java.lang.reflect.Constructor（代表字节码中的构造方法字节码，代表类中的构造方法）；java.lang.reflect.Field（代表字节码中的属性字节码，代表类中的属性）...</p><h3>获取类的三种方式</h3><p>&nbsp; &nbsp; &nbsp; &nbsp;要操作一个类的字节码，需要首先获取到这个类的字节码，获取java.lang.Class实例有三种方式。</p><h4>要点</h4><pre><code>第一种：Class c = Class.forName()    1、静态方法    2、方法的参数是一个字符串。    3、字符串需要的是一个完整类名（必须带有整个包名）第二种：Class c = 对象.getClass()//getClass方法是Object类中的方法，任何对象都有。第三种：Class c = 数据类型.class //Java语言中任何一种类型都有class属性。</code></pre><h4>实例一</h4><pre><code>    public class ReflectTest01 &#123;        public static void main(String[] args) &#123;            Class c = null;            try &#123;                c=Class.forName(&quot;java.lang.String&quot;);//c指向String.Class文件            &#125; catch (ClassNotFoundException e) &#123;                e.printStackTrace();            &#125;                String s =&quot;abc&quot;;            Class x = s.getClass();            System.out.println(c==x);//true，c和x内存地址相同都指向String.class                Class z = String.class;//z指向String.class文件            System.out.println(x == z);//true,x和z内存地址相同都指向                        Class c1 = Class.forName(com.Reflect.User);//获取User类型字节码    Object o =c1.newInstance();//newInstance()方法调用User类的无参构造方法，完成对象                       &#125;    &#125;</code></pre><br><h3>反射机制的作用</h3><h4>要点</h4><pre><code>1、通过反射机制，java代码写一遍,在不改变java源代码的基础之上，可以做到不同对象的实例化，非常灵活。2、如果你只是希望一个类的静态代码块执行，其它代码一律不执行，你可以使用:Class.forName(&quot;完整类名&quot;);这个方法的执行会导致类加载，类加载时，静态代码块执行。3、当文件在类的根路径（src)下时，以下路径比较通用，不受文件移植的影响    获取文件的绝对路径：        String path = Thread.currentThread().getContextClassLoader().getResource(name: &quot;文件名.后缀&quot;).getPath();    更简单的方式直接返回文件流：        InputStream reader = Thread.currentThread().getContextClassLoader()    .getResourceAsStream( name: &quot;文件名.后缀&quot;);4、java.util包下提供了一个资源绑定器ResourceBundle，便于获取属性配置文件中的内容。    资源绑定器，只能绑定xxx.properties文件。并且这个文件必须在类路径下。    文件扩展名也必须是properties，但在写路径的时候，路径后面的扩展名不能写。</code></pre><h4>实例一</h4><pre><code>public class ReflectTest02 &#123;    public static void main(String[] args) throws Exception &#123;        //这种方式就写死了        //User user = new User();        //使用反射机制，不改动代码，通过配置文件动态获取类名，可以创建出不同的类        //通过IO流读取classinfo.properties文件（className=“java.util.Date”）        //这种方式的路径缺点是:移植性差,在IDEA中默认的当前路径是project的根，假设离开IDEA，路径发生变化就找不到了。        //FileReader reader = new FileReader(&quot;chaper23/classinfo.properties&quot;);    /**        //当文件在类的根路径（src)下时，以下路径比较通用，不受文件移植的影响        String path = Thread.currentThread().getContextClassLoader()        .getResource(name: &quot;classinfo.properties&quot;).getPath();        //采用以上的代码可以拿到一个文件的绝对路径。        System.out.println(path);         FileReader reader = new FileReader(path);        /*        解释:            Thread.currentThread()  当前线程对象            getContextClassloader()  线程对象的方法，可以获取到当前线程的类加载器对象。            getResource()  这是类加载器对象的方法，当前线程的类加载器默认从类的根路径下加载资源。        */    **/                //直接以流的形式返回，文件要在类路径（src）当中        InputStream reader = Thread.currentThread().getContextClassLoader()            .getResourceAsStream( name: &quot;classinfo.properties&quot;);        //创建属性类对象Map;        Properties pro = new Properties();        //加载        pro.load(reader);        //关闭流        reader.close();        //通过key获取value        String className = pro.getProperty();        System.out.println(className);        //通过反射机制实例化对象        Class c = Class.forName(className);        Object obj = c.newInstance();        System.out.println(obj);    &#125;&#125;</code></pre><h4>实例二</h4><pre><code>public class ReflectTest03 &#123;    public static void main(String[] args) &#123;        try &#123;            Class.forName(&quot;reflect.MyClass&quot;);        &#125; catch (ClassNotFoundException e) &#123;            e. printStackTrace();        &#125;    &#125;public Class MyClass &#123;    //静态代码块在类加载时执行,并且只执行一次。    static &#123;        System.out.println(&quot;MyClass类的静态代码块执行了! &quot;);    &#125;&#125;   </code></pre><h4>实例三</h4><pre><code>public class ResourceBundleTest &#123;    public static void main(String[] args) &#123;        //资源绑定器，只能绑定xxx.properties文件。并且这个文件必须在类路径下。        //文件扩展名也必须是properties,但在写路径的时候，路径后面的扩展名不能写。        ResourceBundle bundle = ResourceBundle.getBundle(&quot;classinfo&quot;);        String className = bundle.getString(key: &quot;className&quot;);        System.out.println(className);    &#125;&#125;</code></pre><br><h3>类加载器（了解）</h3><h4>要点</h4><pre><code>1、什么是类加载器?    专门负责加载类的命令/工具（ClassLoader）2、JDK中自带了3个类加载器    启动类加载器（父加载器）    扩展类加载器（母加载器）    应用类加载器 3、假设有这样一段代码:    String s = &quot;abc&quot;;    代码在开始执行之前，会将所需要类全部加载到JVM当中。    通过类加载器加载，看到以上代码类加载器会找String.class文件，找到就加载，    那么是怎么进行加载的呢?        首先通过&quot;启动类加载器&quot;加载。            注意:启动类加载器专门加载: C:\Program Files\Java\jdk1.8.0_ 101\jre\lib\rt.jar，rt.jar中都是JDK最核心的类库。        如果通过“启动类加载器”加载不到的时候,会通过&quot;扩展类加载器&quot;加载。            注意:扩展类加载器专门加载: C:\Program Files\Java\jdk1.8.0_ 101\jre\lib\ext.jar。        如果&quot;扩展类加载器”没有加载到，那么会通过&quot;应用类加载器&quot;加载。            注意:应用类加载器专门加载:classpath中的类。4、java中为了保证类加载的安全，使用了双亲委派机制。    优先从启动类加载器中加载，这个称为&quot;父&quot;,&quot;父&quot;无法加载到，再从扩展类加载器中加载,这个称为&quot;母&quot;。双亲委派,如果都加载不到，才会考虑从应用类加载器中加载。直到加载到。到为止。</code></pre><br><h3>反射属性Field</h3><h4>要点</h4>    相关方法查文档。<h4>实例</h4><pre><code>/*通过反射机制访问一个java对象的属性* */public class ReflectTest03 &#123;    public static void main(String[] args) throws Exception &#123;        //获取类        Class studentClass = Class.forName(&quot;Reflect.Student&quot;);        //new类的对象        Object obj = studentClass.newInstance();        //获取对象no属性对象        Field noField = studentClass.getDeclaredField(&quot;no&quot;);        //给no对象赋值（no为public）        noField.set(obj,1000);        //读取no对象属性值        System.out.println(noField.get(obj));        //访问私有属性name        Field nameField = studentClass.getDeclaredField(&quot;name&quot;);        //打破封装(反射机制缺点)，在外部也可以访问private属性        nameField.setAccessible(true);        //获取name属性值        System.out.println(nameField.get(obj));    &#125;&#125;</code></pre><h3>反射方法Method</h3><h4>要点</h4>1、可变长度参数    1、int.. . args这就是可变长度参数        语法是:类型...（注意:一定是3个点。)    2、可变长度参数要求的参数个数是:0~N个。    3、可变长度参数在参数列表中必须在最后一个位置上，而且可变长度参数只能有1个。    4、可变长度参数args有length属性，可以当做一个数组看待，也可以传一个数组进去。<p>2、常用方法查文档</p><h4>实例一</h4><pre><code>public class ReflectTest04 &#123;    public static void main(String[] args) throws Exception &#123;        //使用反射机制调用一个对象的方法        Class studentClass = Class.forName(&quot;Student&quot;);        //无参构造(JDK9已过时)        Object obj = studentClass.newInstance();        System.out.println(obj);//Student&#123;no=0, name=&#39;null&#39;&#125;        //获取无参数构造方法        Constructor con2 = studentClass.getDeclaredConstructor();        Object nobj2 = con2.newInstance( );        System.out.println(nobj2);//Student&#123;no=0, name=&#39;null&#39;&#125;        //有参构造        Constructor con = studentClass.getConstructor(int.class,String.class);        Object nobj=con.newInstance(1001,&quot;wangwu&quot;);        System.out.println(nobj);//Student&#123;no=1001, name=&#39;wangwu&#39;&#125;        //获取方法        Method setNameMethod = studentClass.getDeclaredMethod(&quot;setName&quot;,String.class);        //调用方法        Object retValue = setNameMethod.invoke(obj,&quot;zhangsan&quot;);        System.out.println(retValue);    &#125;&#125;</code></pre><h4>实例二</h4><pre><code>/*重点:给你一个类，怎么获取这个类的父类，已经实现了哪些接口?*/public class ReflectTest05 &#123;    public static void main(String[] args) throws Exception&#123;        // String举例        Class stringClass = Class.forName( &quot;java.lang.String&quot;);        //获取String的父类        Class superClass = stringClass.getSuperclass();        System.out.println(superClass.getName( ));        //获取String类实现的所有接口(一个类可以实现多个接口。)        Class[] interfaces = stringClass.getInterfaces();        for(Class in : interfaces)&#123;            System.out.println(in.getName());        &#125;    &#125;&#125;</code></pre><br><h3>注解</h3><h4>要点</h4><pre><code>1、注解，或者叫做注释类型，英文单词是: Annotation2、注解Annotation是一种引用数据类型。编译之后也是生成xxx.class文件。3、怎么自定义注解呢?语法格式?    [修饰符列表] @interface 注解类型名&#123;    &#125;4、注解怎么使用，用在什么地方?    第一:注解使用时的语法格式是:@注解类型名    第二:注解可以出现在类上、属性上、方法上、变量上等....注解还可以出现在注解类型上5、JDK内置了哪些注解呢?    java.lang包下的注释类型:    掌握:        Deprecated用@Deprecated注释的程序元素，不鼓励程序员使用这样的元素，通常是因为它很危险或存在更好的选择。        源代码∶        public @interface Deprecated &#123;//JDK8        &#125;        表示被注解方法已弃用，暂时可用，但不会再更新，以后可能会删除，        提示其他程序员尽量不要调用此方法。    掌握:        Override表示一个方法声明打算重写超类中的另一个方法声明。        源代码∶        public @interface Override &#123;        &#125;        标识性注解，给编译器做参考的。只能注解方法。        编译器看到方法上有这个注解的时候，编译器会自动检查该方法是否重写了父类的方法，        如果没有重写，报错。这个注解只是在编译阶段起作用，和运行期无关。    不用掌握:        SuppressWarnings指示应该在注释元素（以及包含在该注释元素中的所有程序元素)中        取消显示指定的编译器警告。    6、元注解        用来标注 注解类型 的注解叫元注解，常见的元注解有：Target、Retention。            Target注解用来标注 被注解的注解 可以出现的位置。 eg：                Target(ElementType.METHOD):表示 被标注的注解 只能出现在方法上。            Retention注解用来标注 被注解的注解 最终保存的位置。 eg：                @Retention(RetentionPolicy.SOURCE):表示该注解只被保留在java源文件中。                @Retention(RetentionPolicy.CLASS):表示该注解被保存在class文件中。                @Retention(RetentionPolicy.RUNTIME):表示该注解被保存在class文件中，并且可以被反射机制读取。            Retention源码：            //元注解            public @interface Retention &#123;                //属性                RetentionPolicy value();            &#125;            RetentionPolicy的源代码:            public enum RetentionPolioy &#123;                SOURCE,                CLASS,                RUNTIME            &#125;            7、注解属性我们通常在注解当中可以定义属性，着着像1个方法，但实际上我们称之为属性。属性的类型可以是:    byte short int long float double boolean char String Class 枚举类型    以及以上每一种的数组形式。如果注解中有属性，必须给属性赋值，除非该注解有默认值如果注解中只有一个属性并且属性名为value，则属性名可以省略，直接写属性值</code></pre><h4>实例</h4><pre><code>//只允许该注解可以标注类、方法@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)//希望这个注解可以被反射@Retention(RetentionPolicy.RUNTIME)public @interface MyAnnotation &#123;    String name();    String  color();    int age()   default 18;//指定默认值    String[] email();&#125;</code></pre><br><pre><code>@MyAnnotation(name=&quot;zs&quot;,color = &quot;red&quot;,email = &quot;zhangsan@123.com&quot;)public class AnnotationTest &#123;    public static void main(String[] args) &#123;        doSome();//已过时    &#125;    //@Override这个注解只能注解方法。    //@Override这个注解是给编译器参考的，和运行阶段没有关系。    //凡是java中的方法带有这个注解的，编译器都会进行编译检查，如果这个方法不是重写父类的方法，编译器报错。        @Override        public String toString()&#123;            return &quot;toString&quot;;        &#125;    //Deprecated这个注解标注的元素已过时。    //这个注解主要是向其它程序员传达一个信息，告知已过时，有更好的解决方案存在。    @Deprecated        public  static  void  doSome()&#123;        &#125;        //@MyAnnotation(属性名1=属性值1,属性名2=属性值2,...)        //如果注解中有属性，必须给属性赋值，除非该注解有默认值        //如果注解中只有一个属性并且属性名为value，则属性名可以省略，直接写属性值        //如果注解属性为数组且数组中只有一个元素则该属性值可以不加大括号        @MyAnnotation(name=&quot;ww&quot;,color = &quot;yellow&quot;,email = &quot;ww@456.com&quot;)        public  void doOther()&#123;        &#125;&#125;</code></pre><br><pre><code>public class ReflectAnnotationTest &#123;    public static void main(String[] args) throws Exception&#123;        //获取类        Class c = Class.forName(&quot;AnnotationTest&quot;);        //判断这个类上是否有@MyAnnotation        System.out.println(c.isAnnotationPresent(MyAnnotation.class));//true        if(c.isAnnotationPresent(MyAnnotation.class))&#123;            //获取该注解对象            MyAnnotation myAnnotation = (MyAnnotation) c.getAnnotation(MyAnnotation.class);            System.out.println(&quot;类上面的注解对象：&quot;+myAnnotation);            //获取该类注解对象上的属性        String name= myAnnotation.name();            System.out.println(name);            //获取AnnotationTest的doOther()方法上的注解信息            //获取方法doOther()            Method doOtherMethod = c.getDeclaredMethod(&quot;doOther&quot;);            //判断该方法上是否存在MyAnnotation注解            if(doOtherMethod.isAnnotationPresent(MyAnnotation.class))&#123;                MyAnnotation myAnnotation1 = doOtherMethod.getAnnotation(MyAnnotation.class);                System.out.println(myAnnotation1.name()+&quot; &quot;+myAnnotation1.age());            &#125;        &#125;    &#125;&#125;</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/2021/11/12/io-liu-cao-zuo-jian-shu/"/>
      <url>/2021/11/12/io-liu-cao-zuo-jian-shu/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>IO流简述</title></head><body>    <h3>IO流简述</h3>    <p>&nbsp;&nbsp;&nbsp;&nbsp; IO流即输入输出流，通过IO可以完成硬盘文件的读和写，输入输出是相对于内存而言的。</p>    <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1za349phoqe8.webp" alt=""><br><h4>IO流的分类</h4>    <pre><code>有多种分类方式:    一种方式是按照流的方向进行分类:        以内存作为参照物,        往内存中去，叫输入(Input)读(Read)         从内存中出来，叫输出(output)或者写(Write)    另一种方式是按照读取薮据方式不同进行分类:        有的流是按照字节的方式读取数据，一次读取1个字节byte（8bit），这种流是万能的，        什么类型的文件都可以读取。包括:文本文件，图片，声音文件，视频等        假设文件file.txt，采用字节流的话是这样读的:            a中国bc张三fe            第一次读:一个字节,正好读到&#39;a&#39;            第二次读:一个字节,正好读到&#39;中&#39;字符的一半            第三次读:一个字节,正好读到&#39;中&#39;字符的另外一半        有的流是按照字符的方式读取数据的，一次读取一个字符，这种流是为了方便读取普通文本文件而存在的，        这种流不能读取:图片、声音、视频等文件。只能读取纯文本文件,连word文件都无法读取。            假设文件file.txt，采用字符流的话是这样读的:            a中国bc张三fe            第一次读:&#39;a&#39;字符（&#39;a&#39;字符在windows系统中占用1个字节。）            第二次读:&#39;中&#39;字符（中字符在windows系统中占用2个字节。）</code></pre><br><h3>Java中的IO流</h3><p>&nbsp;&nbsp;&nbsp;&nbsp; Java中IO流都已经写好了，我们需要掌握java中的各种流及其操作。java中IO流主要有四大家族（都是抽象类）：java.io.InputStream(字节输入流)、java.io.OutputStream(字节输出流)、java.io.Reader(字符输入流)、java.io.Writer(字符输入流)。以Reader、Writer结尾的都是字符流，以Stream结尾的都是字节流。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 所有的流都实现了java.io.Closeable接口，都有close()方法，都是可关闭的。<strong>流是内存和硬盘之间的通道，用完一定要关，减少资源损耗。</strong>所有输出流都实现了java.io.Flushable接口，都有flush()方法，都是可刷新的。刷新表示将通道中剩余未输出的数据强行输出完（清空管道）。<strong>输出流在最终输出之后一定要flush(),避免数据丢失。</strong></p><p>java.io包下需要掌握的流有16个：<br></p><pre><code>文件专属:    java.io.FileInputStream    java.io.FileOutputStream    java.io.FileReader    java.io.FileWriter转换流:(将字节流转换成字符流)    java.io.InputStreamReader    java.io.OutputStreamWriter缓冲流专属:    java.io.BufferedReader    java.io.BufferedWriter    java.io.BufferedInputStream    java.io.BufferedOutputStream数据流专属:    java.io.DataInputStream    java.io.DataOutputStream标准输出流:    java.io.PrintWriter    java.io.PrintStream对象专属流:    java.io.ObjectInputStream    java.io.ObjectOutputStream***重点掌握 FileInputStream和FileOutputStream,其余查文档。</code></pre><br><h3>FileInputStream</h3><h4>要点</h4><pre><code>java.io.FileInputStream：文件输入流，万能的，任何文件类型都可以读，以字节方式完成输入操作（硬盘--&gt;内存）。int read()：一次读一个字节int read(byte[] b)：一次最多读取b.length个字节，减少硬盘和内存的交互，提高程序效率。int available():返回流当中剩余的没有读到的字节数量long skip(long n):跳过n个字节不读</code></pre><h4>实例一</h4><pre><code>public class FileInputStreamTest01 &#123;    public static void main(String[] args) &#123;        //创建文件字节输入流对象        FileInputStream fis=null;        //文件绝对路径：E:\java\test(IDEA会自动将\编程\\转义        try &#123;            // fis=new FileInputStream(&quot;E:\\java\\test.txt&quot;);            //写成这样也可以            fis=new FileInputStream(&quot;E:/java/test.txt&quot;);            //开始读            /*            int readData=0;            //read()返回值尾-1则读到文件末尾，一个字节一个字节地读            //返回值是读到的字节            //内存和硬盘交互过于频繁，大量时间都花费在数据传输上            while((readData=fis.read())!=-1)&#123;                System.out.println(readData);            &#125;        */            byte[] bytes=new byte[4];//准备一个4个字节长度的byte数组abcdef            //这个方法返回值是读字节数量，不是文件数据本身。            //没读到数据则返回-1            /*            int readCount=fis.read(bytes);            System.out.println(readCount);//4            System.out.println(new String(bytes));//abcd            System.out.println(new String(bytes,0,readCount));//abcd            readCount=fis.read(bytes);            System.out.println(readCount);//2            //将bytes数组中所有数据转成字符串            System.out.println(new String(bytes));//efcd            //读多少转多少            System.out.println(new String(bytes,0,readCount));//ef    */            int readCount=0;            while((readCount=fis.read(bytes)) != -1)&#123;                System.out.println(new String(bytes,0,readCount));            &#125;        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125; finally &#123;        //确保流关闭            if(fis!=null)&#123;                try &#123;                    fis.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h4>实例二</h4><pre><code>public class FileInputStreamTest02 &#123;    public static void main(String[] args) &#123;        FileInputStream fis=null;        try &#123;            fis=new FileInputStream(&quot;E:/java/test.txt&quot;);        /*            int readByte = fis.read();            System.out.println(&quot;剩下多少个字节没有读：&quot;+fis.available());//5            //这种方式不太适合太大的文件，应为byte[]数组不能太大            byte[] bytes = new byte[fis.available()];            //不需要循环，一次读完文件所有剩下数据            int readCount=fis.read(bytes);            System.out.println(new String(bytes));//bcdef        */            //skip跳过几个字节不读            fis.skip(3);            System.out.println(fis.read());//100        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><br><h3>FileOutputStream</h3><h4>要点</h4><h4>实例</h4><pre><code>public class FileOutputStreamTest01 &#123;    public static void main(String[] args) &#123;        FileOutputStream fos=null;        try &#123;            //文件不存在会新建            //这种方式会将文件清空然后再写，谨慎使用！            //fos=new FileOutputStream(&quot;tempfile.txt&quot;);            //以追加的方式在文件末尾写入，不会清空原文件内容。            fos = new FileOutputStream(&quot;Chapter23/src/tempfile&quot;,true);            byte[] bytes =&#123;97,98,99,100&#125;;            //将bytes数组的全部写入            fos.write(bytes);            //将bytes数组的一部分写入            fos.write(bytes,0,2);            String s = &quot;我是一个中国人，我骄傲！！&quot;;            //将字符串转换成字符串数组            byte[] bs = s.getBytes();            fos.write(bs);            //写完一定要刷新            fos.flush();        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125; finally &#123;            //关闭文件        if (fos!=null)&#123;            try &#123;                fos.close();            &#125; catch (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;        &#125;    &#125;&#125;</code></pre><br><h3>文件复制</h3><h4>要点</h4><p>使用FileInputeStream + FileOutputStream完成文件拷贝，拷贝过程是一边读一边写    使用以上的字节流拷贝文件的时候，文件类型随意。</p> <br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4mip9feadtvk.webp" alt=""><br><h4>拷贝文件</h4><pre><code>public class Copy01 &#123;    public static void main(String[] args) &#123;        FileInputStream fis = null;        FileOutputStream fos = null;        try &#123;            //创建一个输入流对象            fis=new FileInputStream(&quot;E:\\动漫剪辑素材\\场景\\studio_video_1626758642687.mp4&quot;);            //创建一个输出流对象            fos = new FileOutputStream(&quot;E:\\java\\dom.mp4&quot;);            //边读边写            byte[] bytes = new byte[1024*1024];//1MB            int readCount=0;            while((readCount=fis.read(bytes))!=-1)&#123;                fos.write(bytes,0,readCount);            &#125;            //刷新            fos.flush();        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;finally &#123;            //分开try catch，一起try其中一个出异常可能影响另一个的关闭            if(fos!=null)&#123;                try &#123;                    fos.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            if(fis!=null)&#123;                try &#123;                    fis.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><br><h3>FileReader和FileWriter</h3><h4>要点</h4><pre><code>FileReader:    文件输入流，只能读取普通文本，一次读取一个字符，用法和FileInputStream相同，只不过存储数据用char[]数组，而不是byte[]数组。读取文本内容时，比较方便快捷。FileWriter:    文件输出流，只能输出普通文本，一次输出一个字符，用法和FileOutputStream相同，只不过存储数据用char[]数组，而不是byte[]数组。写入文本内容时，比较方便快捷。能用记事本打开编辑的都是普通文本文件不仅限于.txt文件。</code></pre><br><h3>缓冲流</h3><h4>要点</h4><pre><code>BufferedReader:    带有缓冲区的输入流，使用这个流时不需要自定义char数组或byte数组，自带缓冲区。BufferedWriter:    带有缓冲的字符输出流。OutputStreamWriter和OutputStreamReader：转换流</code></pre><h4>实例一</h4><pre><code>public class BufferedReaderTest01 &#123;    public static void main(String[] args) throws IOException &#123;        //当一个流的构造方法中需要一个流的时候，这个北传进来的流叫节点流        //外部负责包装的流叫包装流/处理流        //FileReader是结点流，BufferReader是包装流/处理流        FileReader reader=new FileReader(&quot;Copy01.java&quot;);        BufferedReader br = new BufferedReader(reader);        String s=null;        while((s =br.readLine())!=null)&#123;            System.out.println(s);//默认读一个文本行但不带换行符            System.out.println(&quot;\n&quot;);        &#125;        //关闭流        //对于包装流来说，只需要关闭最外层流，里面的流会自动关闭。（可以看源码）        br.close();        /*        //字节流        FileInputStream in = new FileInputStream(&quot;Copy01.java&quot;);        //通过转换流转换        InputStreamReader reader1 = new InputStreamReader(in);        //这个构造方法只能传一个字符流，不能传字节流        BufferedReader br1 =  new BufferedReader(reader);*/        BufferedReader br1=new BufferedReader(new InputStreamReader(new FileInputStream(&quot;Copy1.java&quot;)));        String line=null;        while(((line=br1.readLine())!=null))&#123;            System.out.println(line);        &#125;        br1.close();;    &#125;&#125;</code></pre><h4>实例二</h4><pre><code>public class BufferWriterTest &#123;    public static void main(String[] args) throws IOException &#123;        //带有缓冲区的字符输出流        //BufferedWriter out = new BufferedWriter(new FileWriter(&quot;copy&quot;));        //以追加方式写        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(&quot;copy&quot;,true)) );        //开始写        out.write(&quot;hello world&quot;);        out.write(&quot;\n&quot;);        out.write(&quot;hello kitty&quot;);        //刷新        out.flush();        //关闭最外层流        out.close();    &#125;&#125;</code></pre><br><h3>数据流</h3><p>java.io.DataOutputStream:数据专属流。<br>    DateOutputStream写的文件，只能使用DataInputStream去读，并且读的时候需要知道写入的顺序，按写入的顺序读，才可以正常取出数据，可用于加密（用的少）。</p><h3>标准输出流</h3><h4>要点</h4>java.io.PrintStream:标准的字节输出流，默认输出到控制台。标准输出流不需要手动关闭。<h4>实例</h4><pre><code>public class Logger &#123;    /*    记录日志    * */    public  static void log(String msg)&#123;        try &#123;            //指向一个日志文件            PrintStream out=new PrintStream(new FileOutputStream(&quot;log.txt&quot;,true));            //改变输出方向            System.setOut(out);            //日期当前时间            Date nowTIme = new Date();            SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd HH:ss SSS&quot;);            String strTime = sdf.format(nowTIme);            System.out.println(strTime+&quot;:&quot;+msg);        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;public class LogTest &#123;    public static void main(String[] args) &#123;        Logger.log(msg:&quot;调用了System类的gc()方法，建议启动垃圾回收&quot;)        Logger.log(msg:&quot;用户尝试登录，验证失败&quot;);    &#125;&#125;</code></pre><br>   <h3>File类简述</h3>   <h4>要点</h4><p>   File类的常用方法：<br>        方法很多，查文档就好了。listFiles()方法获取当前目录下所有的子文件。</p>   <h4>实例</h4><p>   public class FileTest01 {<br>    public static void main(String[] args) throws Exception {<br>        &#x2F;&#x2F;创建一个File对象<br>        File f1 &#x3D; new File( pathname: “D:\file”);<br>        &#x2F;&#x2F;判断是否存在<br>        System.out.println(f1.exists());</p><pre><code>    //如果:\file不存在,则以文件的形式创建出来    /*if(!f1.exists()) &#123;        //以文件形式新建        f1. createNewFile();    &#125;*/    //如果D:\file不存在 ,则以目录的形式创建出来    /*if(!f1. exists()) &#123;        //以目录的形式新建。        f1. mkdir();    &#125;*/    //创建多重目录    File f2 = new File( pathname: &quot;D:/a/b/c/d/e/f&quot;);    /*if(!f2.exists()) &#123;        //多重目录的形式新建。        f2. mkdirs();    &#125;*/    File f3 = new File( pathname: &quot;D:\\course\\学习方法.txt&quot;);    //获取文件的父路径    String parentPath = f3.getParent();    System.out.println(parentPath); //D: \course    File parentFile = f3.getParentFile();    System.out.prihtln(&quot;获取绝对路径:&quot;+ parentFile.getAbsolutePath());    File f4 = new File( pathname: &quot;copy&quot;);    System.out.println(&quot;绝对路径:&quot;+ f4.getAbsolutePath());    File f5 = new File(&quot;pathname: &quot;D:\\course\\asdf.txt&quot;);    System.out.println(f5.getName());//asdf    //判断是否是一个目录    System.out.println(f5.isDirectory()); // false    //判断是否是一个文件    System.out.println(f5.isFile()); // true    //获取文件最后一次修改时间    long haoMiao = f5.lastModified(); //这个毫秒是从1970年到现在的总毫秒数。    //将总毫秒数转换成日期    Date time = new Date(haoMiao);     SimpleDateFormat sdf = new SimpleDateFormat( pattern: &quot;yyyy-MM-dd HH:mm:ss SSs&quot;);    String strTime = sdf.format(time);    System.out.println(strTime);    //获取文件大小    System.out.println(f5.length());    // File[] listFiles()    //获取当前目录下所有的子文件。    File f= new File( pathname: &quot;D:\\course&quot;);    File[] files = f.listFiles();    // foreach    for(File file : files)&#123;    //System.out.println(file.getAbsolutePath());    System.out.println(file.getName());    &#125;&#125;&#125;</code></pre><br><h3>对象流</h3><h4>序列化和反序列化</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5my56cpqh3eo.webp" alt=""><br><p><strong>要点</strong></p><pre><code>1、参与序列化和反序列化的对象，必须实现Serializable接口。2、注意:通过源代码发现，Serializable接口只是一个标志接口:public interface Serializable &#123;&#125;这个接口当中什么代码都没有。那么它起到一个什么作用呢?    起到标识的作用，标志的作用，Serializable这个标志接口是给java虚拟机参考的，    java虚拟机看到这个接口之后，会为该类自动生成一个序列化版本号。序列化版本号有什么用？    Java语言区分类机制：        ①首先通过类名进行比对，如果类名不同则不是同一个类        ②如果类名相同，则通过序列化版本号区分，如果序列化版本号不同则不是同一个类，否则为同一个类。    不同人开发编写了类名相同的不同类（这两个了类都实现了Serializable接口），这时候就可以通过序列化版本号来区分这两个类。自动生成序列化版本号的缺陷？    一旦代码确定之后不能进行后续的修改，因为只要修改，必然会重新编译生成全新的序列化版本号，    这个时候java虚拟机会认为这是一个全新的类。凡是一个类实现了Serializable接口，建议将该类的序列号版本号手动写死（ private static final long  serialVersionUID = ），不建议自动生成。Idea可以为类生成固定的序列化版本号。序列化版本号不一致报错：InvalidClassException: Student; local class incompatible: stream classdesc serialVersionUID = 412425857988772568, local class serialVersionUID = 38913900383145716303、序列化多个对象：将对象放在集合当中，序列化集合。4、transient关键字：游离的，不参与序列化。在对象属性前加transient关键字表示该属性不参与序列化操作，反序列化时该属性值为null。</code></pre><br><strong>序列化的实现</strong><pre><code>public class ObjectOutputStreamTest &#123;    public static void main(String[] args) throws IOException &#123;        //创建java对象        Student s = new Student(1111,&quot;zhangsan&quot;);        //序列化对象        ObjectOutputStream oos= new ObjectOutputStream(new FileOutputStream(&quot;students&quot;));        oos.writeObject(s);        oos.flush();        oos.close();        List&lt;Student&gt; studentList = new ArrayList&lt;&gt;();        studentList.add(new Student(001,&quot;wangwu&quot;));        studentList.add((new Student(002,&quot;lisi&quot;)));        studentList.add(s);        //序列化studentList（List已经实现Serializable接口)，批量序列化student对象        ObjectOutputStream oos1 = new ObjectOutputStream(new FileOutputStream(&quot;students2&quot;));        oos1.writeObject(studentList);        oos1.flush();        oos1.close();    &#125;&#125;</code></pre><br><strong>反序列化</strong><pre><code>public class ObjectInputStreamTest &#123;    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois=new ObjectInputStream(new FileInputStream(&quot;students&quot;));        //开始反序列化,读        Object obj=ois.readObject();        //反序列化回来是一个学生对象        System.out.println(obj);//Student&#123;no=1111, name=&#39;zhangsan&#39;&#125;        ois.close();        //反序列化集合        ObjectInputStream ois1=new ObjectInputStream(new FileInputStream(&quot;students2&quot;));        //Object obj1=ois.readObject();    // System.out.println(obj1 instanceof  List);//true        List&lt;Student&gt; studentList = (List&lt;Student&gt;) ois1.readObject();        for (Student student : studentList)&#123;            System.out.println(student);        &#125;        ois1.close();    &#125;&#125;</code></pre><br><h3>IO + Properties</h3><h4>要点</h4><pre><code>经常改变的数据可以单独写到一个文件中，使用程序动态读取。将来只需呀修改这个文件的内容，不需要改动java代码，不需要重新编译，服务器也不需要重启，就可以拿到动态的信息。以上机制的文件称为配置文件。并且当配置文件的内容格式为：    key=value;时，这种配置文件叫属性配置文件。属性配置文件以.properties结尾，但这不是必须的。属性配置文件中#代表注释，key重复则value会自动覆盖，等号两端不要有空格。Properties对象专门存放属性配置文件数据。</code></pre><h4>实例</h4><pre><code>public class IOPropertiesTest &#123;    public static void main(String[] args) throws IOException &#123;        /*        Properties是一个Map集合，key和value都是String类型。        将userinfo文件中的数据加载到Properties对象中。        * */        //新建一个输入流        FileReader reader = new FileReader(&quot;chapter23/userinfo&quot;);        //新建一个map集合        Properties pro=new Properties();        //调用Properties对象的load方法将文件中数据加载到map集合中        pro.load(reader);//文件中的数据顺着管道以键值对的方式加载到map集合        String username=pro.getProperty(&quot;username&quot;);        System.out.println(username);        //有更简单的方法：直接用Bundle属性类，这里不说了    &#125;&#125;</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中集合(Map部分)</title>
      <link href="/2021/10/24/java-zhong-de-ji-he-map-bu-fen/"/>
      <url>/2021/10/24/java-zhong-de-ji-he-map-bu-fen/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>java中集合(Map部分)</title></head><body><h3>集合的继承结构</h3><h4>要点</h4><pre><code>集合在java中是一个容器，一个对象。集合不能直接存储基本数据类型，也不能直接存储java对象，集合当中存储的都是java对象的内存地址（引用）    list.add(100);//100自动装箱成Integer类型java中每一个不同的集合底层对应不同的数据结构，往不同集合中存储元素就是将数据放到了不同的数据结构中。数据结构是数据存储的结构，不同数据结构，数据存储方式不同。java已经将常见的数据结构实现了封装成集合类，我们只需要学会怎么调用集合类即可在java中集合分为两大类:一类是单个方式存储元素:    这一类集合中超级父接口:java.util.Collection;一类是以键值对的方式存储元素    这一类集合中超级父接口:java.util.Map;Collection集合和Map集合没有关系，二者独立存在。</code></pre><h4>Collection继承结构图(常用部分)<h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1ejc2t4pian4.png" alt="Collection的继承结构图"><br><h4>Map继承结构图(常用部分)：<h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.547v1dewazk0.png" alt="Map的继承结构图"><br><br><h3>Map接口中常用方法</h3><h4>要点</h4><pre><code>java.util.Map接口特点和常用方法:    1、Map和Collection没有继承关系。    2、Map集合以key和value的方式存储数据:键值对        key和value都是引用数据类型，都是存储对象的内存地址。        key起到主导的地位，value是key的一个附属品。    3、Map接口中常用方法:        V put(K key, V value)   向Map集合中添加键值对        V get(Object key)   通过key获取value        void clear()    清空vap集合        boolean containsKey(Object key) 判断Map中是否包含某个key        boolean containsValue(Object value) 判断Map中是否包含某个value            containsKey和containsValue方法在底层调用equals方法进行比对判断集合中是否包含某个元素。        boolean isEmpty()   判断Map集合中元素个数是否为空        V remove(Object key)    通过key删除键值对            remove方法在底层调用equals方法进行比对判断集合中是否包含某个元素。        int size()  获取Map集合中键值对的个数。        Collection&lt;V&gt; values()  获取Map集合中所有的值并返回一个Collection        Set&lt;K&gt; keySet() 获取Map集合所有的key (所有的键是一个set集合)        Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()  将Map集合转换成Set集合                eg：假设现在有一个Map集合，如下所示:            map1集合对象            key           value            1             zhangsan            2             lisi            3             wangwu            4             zhaoliu            Set set = map1.entrySet();            set集合对象：            1=zhangsan            2=lisi            3=wangwu            4=zhaoliu ---&gt;这个东西是个什么? Map.Entry类型的对象            注意:Map集合通过entrySet()方法转换成的这个Set集合，Set集合中元素的类型是Map.Entry&lt;K,V&gt;,                Map.Entry和String一样，都是一种类型的名字，只不过Map.Entry是Map中的静态内部类</code></pre><p>Map.Entry源码：<br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1dpzr889zuf4.png" alt=""><br></p><h4>Map集合的遍历(重要！！！)</h4><pre><code>public class MapTest&#123;public static void main(String[] args) &#123;//第一种方式:获取所有的key，通过遍历key ，来遍历valueMap&lt;Integer,String&gt; map = new HashMap&lt;&gt;();map.put(1,&quot;zhangsan&quot;);map.put(2,&quot;lisi&quot;);map.put(3,&quot;wangwu&quot;);map.put(4,&quot;zhaoliu&quot; );//遍历Map集合//第一种方式：获取所有的key,通过key获取value//所有的key是一个Set集合Set&lt;Integer&gt; keys = map.keySet();//遍历key ，通过key获取value//迭代器可以/*  Iterator&lt;Integer&gt; it = keys.iterator();    while(it.hasNext())&#123;    //取出其中一个key    Integer key = it.next();//通过key获取value    String value = map.get(key );      System.out.println(key + &quot;=&quot; + value);&#125;*///foreach也可以for(Integer key : keys)&#123;    System.out.println(key+&quot;=&quot;+map.get(key));&#125;//第二种方式: Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()//把Map集合直接全部转换成Set集合,Set集合中元素的类型是:Map.EntrySet&lt;Map.Entry&lt;Integer,String&gt;&gt; set = map.entrySet( );//遍历Set集合，每一次取出一个Node//迭代器/*Iterator&lt;Map.Entry&lt;Integer,String&gt;&gt; it2 = set.iterator();while(it2.hasNext())&#123;    Map.Entry&lt;Integer,String&gt; node = it2.next( );    Integer key = node.getKey( );    String value = node.getVaLue( );    System.out.println(key + &quot;=&quot; + value);&#125;*/ //这种方式效率比较高，因为获取key和value都是直接从node对象中获取的属性值。//这种方式比较适合于大数据量for(Map.Entry&lt;Integer,String&gt; node : set)&#123;    System.out.println(node.getKey() + &quot;---&gt;&quot; + node.getvalue());    &#125;&#125;&#125;</code></pre><br><h3>HashMap</h3><h4>要点</h4><pre><code>HashMap集合：1、HashMap集合底层是哈希表/散列表的数据结构，是非线程安全的。2、哈希表是―个怎样的数据结构呢?    哈希表是一个数组和单向链表的结合体。    数组∶在查询方面效率很高，随机增删方面效率很低。    单向链表:在随机增删方面效率较高，在查询方面效率很低。    哈希表将以上的两种数据结构融合在一起，充分发挥它们各自的优点。3、 HashMap集合底层的源代码:    public class HashMap&#123;        //HashMap底层实际上就是一个数组。(一维数组)        Node&lt;K,V&gt;[] table;        //静态的内部类HashMap.Node        static class Node&lt;K,V&gt;&#123;            final int hash;//哈希值（哈希值是key的hashCode()方法的执行结果。hash值通过哈希函数/算法得到数组下标            final K key;//存储到Map集合中的那个key            V value;//存储到Map集合中的那个value            Node&lt;K,V&gt; next; //下一个节点的内存地址。        &#125;    &#125;    哈希表/散列表︰一维数组，这个数组中每一个元素是一个单向链表。（数组和链表的结合体。)4、最主要掌握的是:    map.put(k,v)    v=map.get(k)    以上这两个方法的实现原理，是必须掌握的。    1）map.put(k,v)实现原理:    第一步:先将k、v封装到Node对象当中。    第二步∶底层会调用k的hashCode()方法得出hash值，    然后通过哈希函数/哈希算法，将hash值转换成数组的下标，下标位置上如果没有任何元素，就把Node添加到这个位置上。    如果说下标对应的位置上有链表，此时会拿着k和链表上每一个节点中的k进行equals比较，        如果所有的equals方法返回都是false，那么这个新节点将会被添加到链表的末尾。        如果其中有一个equals返回了true，那么这个节点的value将会被覆盖。        重点:HashMap集合的key,会先后调用hashCode()和equals()两个方法（数组下标位置上如果没有任何元素就不用调用equals方法）,    这两个方法都需要重写。hashCode()和equals()两个方法直接idea同时生成。        2）v = map.get(k)实现原理∶    先调用k的hashCode方法得出哈希值，通过哈希算法转换成数组下标，通过数组下标快速定位到某个位置上，    如果这个位置上什么也没有，返回null。    如果这个位置上有单向链表，那么会拿着参数k和单向链表上的每个节点中的k进行equals比较 ，        如果所有equals方法返回false，那么get方法返回null，只要其中有一个节点的k和参数k equals的时候返回true，        那么此时这个节点的value就是我们要找的value，get方法最终返回这个要找的value。5、为什么哈希表的随机增删,以及查询效率都很高?        增删是在链表上完成。        查询也不需要都扫描，只需要部分扫描。    6、HashMap集合的key部分特点:    无序，不可重复。key值可以为null，但是null值只能有一个。    为什么无序?因为根据hash算法得到的数组下标决定挂到哪个单向链表上，该顺序不是线性顺序。    不可重复是怎么保证的? equals方法保证HashMap集合的key不重复。如果key重复了, value会覆盖。    放在HashMap集合key部分的元素其实就是放到HashSet集合中了。    所以HashSet集合中的元素也需要重写hashCode()和equals()方法。7、哈希表HashMap使用不当时无法发挥性能!    注意:同一个单向链表上所有节点的hash值可以不同，但他们经过hashCode方法算出的的数组下标是一样的（哈希碰撞）。    但同一个链表上k和k的equals方法肯定返回的是false,都不相等。    假设将所有的hashCode()方法返回值固定为某个值,那么会导致底层哈希表变成了纯单向链表。    这种情况我们成为:散列分布不均匀。        假设将所有的hashCode()方法返回值都设定为不一样的值会导致底层哈希表就成为一维数组了，没有链表的概念了。    也是散列分布不均匀。    什么是散列分布均匀?        假设有100个元素, 10个单向链表，那么每个单向链表上有10个节点,这是最好的,是散列分布均匀的。            散列分布均匀需要你重写hashCode()方法时有一定的技巧。        8、HashMap集合的默认初始化容量是16，默认加载因子是0.75    这个默认加载因子是当HashMap集合底层数组的容量达到75%的时候,数组开始扩容，扩容之后的容量是原容量的2倍。    重点，记住: HashMap集合初始化容量必须是2的倍数,这也是官方推荐的，    这样有助于达到散列均匀，提高HashMap集合的存取效率。    在JDK8之后，如果哈希表单向链表中元素超过8个，单向链表会变成红黑树结构，    当红黑树上的结点数量小于6时，会重新把红黑树变成单向链表。这样缩小扫描范围，提高检索效率。</code></pre><p>HashMap中Node的结构：<br><br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1eml1x8o0zls.png" alt="Node"><br><br>HashMap中Node的源码：<br><br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1dpzr889zuf4.png" alt=""><br></p><h4>实例</h4><pre><code>public class HashMapTest01 &#123;    public static void main(String[] args) &#123;        //测试HashMap集合key部分的元素特点        // Integer是key，Integer的hashCode和equals方法官方都重写了。        // String是value，String的hashCode和equals方法官方都重写了。        Map&lt;Integer,String&gt; map = new HashMap&lt;&gt;();        map.put(1111,&quot;zhangsan&quot;);        map.put(6666,&quot;lisi&quot;);        map.put(7777,&quot;wangwu&quot;);        map.put (2222,&quot;zhaoliu&quot;);        map.put(2222,&quot;king&quot;); //key 重复的时候value会自动覆盖。        System.out.println(map.size()); // 4        //遍历Map集合        Set&lt;Map.Entry&lt;Integer, String&gt;&gt;set = map.entrySet();        for(Map.Entry&lt;Integer,String&gt; entry:set)&#123;            //验证结果:HashMap集合key部分元素:无序不可重复。            System.out.println(entry.getKey() + &quot;=&quot; + entry.getValue());        &#125;    &#125;</code></pre><br><p>关于ConcurrentHashMap：</p><h3>Hashtable</h3><h4>要点</h4><pre><code>Hashtable的key可以为null吗?Hashtable的key和value都是不能为null的。HashMap集合的key和value都是可以为null的。Hashtable方法部带有synchronized是线程安全的。线程安全有其它的方案，这个Hashtable对线程的处理导致效率较低，使用较少了。Hashtable和HashMap一样，底层都是哈希表数据结构。Hashtable的初始化容量是11，默认加载因子是:0.75f。Hashtable的扩容是:原容量*2 +1。   Properties是一个Map集合，继承Hashtable，Properties的key和value都是String类型。Properties被称为属性类对象，是线程安全的，用得较多。Properties中的两个方法：setProperty(String,String)  存Properties对象，底层调用Hashtable的put(key,value)方法。getProperty(key)    通过键取Properties对象的值</code></pre><h4>Properties</h4><pre><code>public class PropertiesTest01 &#123;    public static void main(String[] args) &#123;        //创建一个Properties对象        Properties pro = new Properties();        //需要掌握Properties的两个方法，一个存，一个取。        pro.setProperty(&quot;url&quot;, &quot;jdbc :mysql://localhost:3306/bjpowernode&quot;);        pro.setProperty(&quot;driver&quot; , &quot; com.mysq1.jdbc.Driver&quot; );        pro.setProperty (&quot;username&quot; , &quot;root&quot;);        pro.setProperty(&quot;password&quot; , &quot;123&quot;);        //通过key获取value        String url = pro.getProperty( &quot;ur1&quot;);        String driver = pro.getProperty(&quot;driver&quot; );        String username = pro.getProperty( &quot;username&quot;) ;        String password = pro.getProperty( &quot;password&quot;);        System.out.print1n(url );        System.out.println(driver);        System.out.println(username);        System.out.println(password);    &#125;&#125;   </code></pre><br><h3>SortedMap</h3><h4>TreeSet</h4><h4>要点</h4><pre><code>1、TreeSet集合底层实际上是一个TreeMap,TreeMap集合底层是一个自平衡二叉树，遵循左小右大原则存放。2、到TreeSet集合中的元素，等同于放到TreeMap集合key部分了。3、TreeSet集合中的元素:无序不可重复，但是可以按照元素的大小顺序自动排序，放的时候按顺序放，取得时候顺序取。称为:可排序集合。    TreeSet集合、TreeMap集合、Iterator迭代器采用的是中序遍历方式。4、对自定义的类型来说，TreeSet可以排序吗?自定义类没有实现java.lang.Comparable接口，没有指定自定义类型对象之间的比较规则，TreeSet无法对自定义类型对象排序，但是程序员可以通过两种方法指定比较规则：    ① 实现java.lang.Comparable接口(实现compareTo方法。)    ② 单独编写java.util.Comparator比较器。    当比较规则不会发生变化或比较规则只有一个的时，建议实现Comparable接口    当比较规则有多个并且需要多个比较规则之间频繁切换时，建议使用Comparator接口Integer和String类默认实现了Comparable接口，TreeSet可以对Integer和String进行排序并存储。以下实例一程序运行的时候出现了这个异常:Exception in thread &quot;main&quot; java.lang.ClassCastException: Person cannot be cast to java.lang.Comparable出现这个异常的原因是：    Person类没有实现java.lang.Comparable接口，没有指定Person类对象之间的比较规则</code></pre><h4>实例一</h4><pre><code>public class TreeSetTest01&#123;public static void main(String[] args) &#123;    //创建一个TreeSet集合    TreeSet&lt;String&gt; ts = new TreeSet&lt;&gt;();//添加String    ts.add(&quot;zhangsan&quot;);    ts.add(&quot;lisi&quot;);    ts.add(&quot;wangwu&quot;);    ts.add(&quot;zhangsi&quot;);    ts.add(&quot;wangliu&quot;);    for(String s : ts)&#123;    //按照字典顺序，升序        System.out.println(s);    &#125;    TreeSet&lt;Integer&gt; ts2 = new TreeSet&lt;&gt;();    ts2.add(100);    ts2.add(200);    ts2.add(90);    ts2.add(800);    ts2.add(600);    ts2.add(10);    for(Integer elt : ts2)&#123;        //升序输出        System.out.println(elt);    &#125;    Person p1=new Person(32);    Person p2=new Person(20);    Person p3=new Person(30);    Person p4=new Person(25);    TreeSet&lt;Person&gt; persons=new TreeSet&lt;&gt;();    persons.add(p1);    //没有指定Person类型对象之间的排序规则，比完才知道怎么排序，p2对象无法加入persons    //报错：java.lang.ClassCastException: Person cannot be cast to class java.lang.Comparable    persons.add(p2); &#125;</code></pre><p>}<br>class Person{<br>    int age;<br>    public  Person(int age){<br>        this.age&#x3D;age;<br>    }</p><h4>实例二</h4><pre><code>public class TreeSetTest02 &#123;public static void main(String[] args) &#123;    Person p1=new Person(32);    Person p2=new Person(20);    Person p3=new Person(30);    Person p4=new Person(25);    TreeSet&lt;Person&gt; persons=new TreeSet&lt;&gt;();    persons.add(p1);    persons.add(p2);    persons.add(p3);    persons.add(p4);    for (Person p:persons)&#123;        System.out.println(p);    &#125;&#125;&#125;class Person implements  Comparable&lt;Person&gt;&#123;    int age;    public  Person(int age)&#123;        this.age=age;    &#125;    //实现Comparable接口中的compareTo方法，编写比较规则    //k.compareTo(t.key)    //拿着参数k和集合中的每一个k进行比较，返回值可能是&gt;0 &lt;0 =0    //比较规则最终还由程序员指定的    //按照年龄降序排序    public  int compareTo(Person p)&#123;//p1.compareTo(p2)        return p.age -  this.age;    &#125;    @Override    public String toString() &#123;        return &quot;Person&#123;&quot; +                &quot;age=&quot; + age +                &#39;&#125;&#39;;    &#125;&#125;</code></pre><h4>实例三<h4><pre><code>public class TreeMapTest03 &#123;public static void main(String[] args) &#123;    //TreeSet&lt;Animal&gt; animals=new TreeSet&lt;&gt;();///这样不行没有通过构造方法传一个比较器进去。    //创建TreeSet集合时需要使用比较器，给构造方法传一个比较器    //TreeSet&lt;Animal&gt; animals = new TreeSet&lt;&gt;(new AnimalComparator());    //可以使用匿名内部类的方式,直接new Comparoter接口并实现    TreeSet&lt;Animal&gt; animals = new TreeSet&lt;&gt;(new Comparator&lt;Animal&gt;()&#123;        @Override        public int compare(Animal o1, Animal o2) &#123;            return o1.age - o2.age;        &#125;    &#125;);    animals.add(new Animal(300));    animals.add(new Animal(50));    animals.add(new Animal(100));    for (Animal animal:animals)&#123;        System.out.println(animal);    &#125;&#125;&#125;class Animal&#123;    int age;    public  Animal(int age)&#123;        this.age=age;    &#125;    @Override    public String toString() &#123;        return &quot;Animal&#123;&quot; +                &quot;age=&quot; + age +                &#39;&#125;&#39;;    &#125;    &#125;/*//单独编写一个比较器，实现java.util.Comparator接口//Comparator是java.util包下的，Comparable是java.lang包下的class AnimalComparator implements  Comparator&lt;Animal&gt;&#123;    @Override    public int compare(Animal o1, Animal o2) &#123;        //指定比较规则        return o1.age-o2.age;    &#125;&#125;*/</code></pre><br><h3>Collections</h3><h4>要点</h4><pre><code>Collections是一个集合工具类，提供线程安全、排序等多个方法方便集合操作。Collections在java.util包下，与java.lang.Collection 没有继承关系。</code></pre><h4>实例</h4><pre><code>public class CollectionsTest &#123;    public static void main(String[] args) &#123;        //ArrayList集合不是线程安全        List&lt;String&gt; list=new ArrayList&lt;&gt;();        //将ArrayList变成线程安全的        Collections.synchronizedList(list);        //排序        list.add(&quot;abf&quot;);        list.add(&quot;abx&quot;);        list.add(&quot;abc&quot;);        Collections.sort(list);        for (String s:list)            System.out.println(s);        List&lt;Animal2&gt; animals = new ArrayList&lt;&gt;();        animals.add(new Animal2(10));        animals.add(new Animal2(20));        animals.add((new Animal2(30)));        //注意：对list集合中元素排序需要实现Comparable接口        Collections.sort(animals);        for (Animal2 a:animals)&#123;            System.out.println(a);        &#125;        //对Set集合排序        Set&lt;String &gt; set=new HashSet&lt;&gt;();        set.add(&quot;king&quot;);        set.add(&quot;kingsort&quot;);        set.add(&quot;king2&quot;);        //将Set集合转换成List集合        List&lt;String&gt; myList=new ArrayList&lt;&gt;(set);        Collections.sort(myList);    &#125;    //Collections.sort(list集合，比较器对象);也可以对list排序&#125;class  Animal2 implements  Comparable&lt;Animal2&gt;&#123;    int age;    public Animal2(int age) &#123;        this.age = age;    &#125;    @Override    public String toString() &#123;        return &quot;Animal2&#123;&quot; +                &quot;age=&quot; + age +                &#39;&#125;&#39;;    &#125;    @Override    public int compareTo(Animal2 o) &#123;        return this.age-o.age;    &#125;&#125;</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中集合(Collection部分)</title>
      <link href="/2021/10/18/java-zhong-de-ji-he-collection-bu-fen/"/>
      <url>/2021/10/18/java-zhong-de-ji-he-collection-bu-fen/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>java中集合(Collection部分)</title></head><body><h3>集合的继承结构</h3><h4>要点</h4><pre><code>集合在java中是一个容器，一个对象。集合不能直接存储基本数据类型，也不能直接存储java对象，集合当中存储的都是java对象的内存地址（引用）    list.add(100);//100自动装箱成Integer类型java中每一个不同的集合底层对应不同的数据结构，往不同集合中存储元素就是将数据放到了不同的数据结构中。数据结构是数据存储的结构，不同数据结构，数据存储方式不同。java已经将常见的数据结构实现了封装成集合类，我们只需要学会怎么调用集合类即可在java中集合分为两大类:一类是单个方式存储元素:    这一类集合中超级父接口:java.util.Collection;一类是以键值对的方式存储元素    这一类集合中超级父接口:java.util.Map;Collection集合和Map集合没有关系，二者独立存在。</code></pre><h4>Collection继承结构图(常用部分)<h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1ejc2t4pian4.png" alt="Collection的继承结构图"><br><h4>Map继承结构图(常用部分)：<h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.547v1dewazk0.png" alt="Map的继承结构图"><br><br><h3>Collection中的常用方法</h3><h4>要点</h4><pre><code>1、Collection能存放什么类型?没有使用“泛型”之前, Collection中可以存储Object的所有子类型。(集合中不能直接存储基本数据类型,也不能存java对象,只是存储java对象的内存地址。)使用了“泛型”之后, Collection中只能存储某个具体的类型。2、Collection 中的常用方法boolean add(Object e)   向集合中添加元素int size()  获取集合中元素的个数void clear()    清空集合boolean contains(Object o)  判断当前集合中是否包含元素o ,包含返回true，不包含返回false    contains方法在底层调用equals方法进行比对判断集合中是否包含某个元素。boolean remove(Object o)    删除集合中的某个元素。    remove方法在底层调用equals方法进行比对判断集合中是否包含某个元素。boolean isEmpty()   判断该集合中元素的个数是否为0Object[] toArray()  调用这个方法可以把集合转换成数组。[作为了解，使用不到]</code></pre><h4>实例一</h4><pre><code>public class CollectionTest01 &#123;    public static void main(String[] args) &#123;        //创建一个集合对象        //Collection c = new Collection(); //接口是抽象的,无法实例化。        //多态        //Collection c = new ArrayList();        //测试collection 接口中的常用方法        c.add(1200); //自动装箱(java5的新特性。),实际上是放进去了一个对象的内存地址。Integer x = new Integer(1200)        c.add(3.14); //自动装箱        c.add(new Object());        c.add(new Student());        c.add(new Object());        c.add(new Student());        c.add(true); //自动装箱        //获取集合中元素的个数        System.out.println(&quot;集合中元素个数是:&quot;+ c.size()); // 5        //清空集合        c.clear();        System.out.println(&quot;集合中元素个数是:&quot;+ c.size()); //0        //再向集合中添加元素        c.add(&quot;hello&quot;);// &quot;hello&quot;对象的内存地址放到了集合当中。        c.add(&quot;wor1d&quot;);        c.add(&quot;浩克&quot;);        c.add(&quot;绿巨人&quot;);        c.add(1);        boolean flag2 = c.contains(&quot;绿巨人2&quot;)        System.out.println(flag2); // false        System.out.print1n(c. contains(1)); // true        System.out.println(&quot;集合中元素个数是:&quot;+ c.size()); // 5.        //删除集合中某个元素        c.remove(1);        System.out.println(&quot;集合中元素个数是:&quot;+ c.size()); // 4        //判断集合是否为空(集合中是否存在元素)        System.out.println(c.isEmpty()); // false        //清空        c.clear();        System.out.println(c.isEmpty()); // true( true表示集合中没有元素了! )        c.add(&quot;abc&quot;);        c.add(&quot;def&quot;);        c.add(100);        c.add(&quot;hellowor1d!&quot;);        //转换成数组        Object[] objs = c.toArray();        for(int i = 0; i &lt; objs.1ength; i++)&#123;            //遍历数组            Object o= objs[i];            System.out.print1n(o);        &#125;    &#125;&#125;class Student &#123;    //todo...&#125;</code></pre><h4>关于集合当中的遍历/迭代</h4><pre><code>Iterator iterator(); 获取集合所依赖的迭代器对象通过迭代器中方法完成集合的迭代(遍历)。boolean hasNext() 如果还有元素可以迭代，则返回true。Object next()返回迭代的下一个元素。    注意：这种方式是所有集合子类通用的遍历方式。关于集合元素的remove    重点:当集合的结构发生改变时，迭代器必须重新获取，如果还是用以前老的迭代器，会出现异常:     java.util.ConcurrentModificationException    重点:在迭代集合元素的过程中，一定要使用迭代器Iterator的remove方法，删除元素，    不能调用集合对象的remove方法删除元素，会出现: java.util.ConcurrentModificationException    </code></pre><h4>实例一</h4><pre><code>public class CollectionTest02&#123;        public static void main(String[] args)&#123;                //创建集合对象        Collection c = new ArrayList();                //添加元素        c.add(100); //自动装箱        c.add(3.14); //自动装箱        c.add(false);//自动装箱                        //迭代,遍历        //1.获取迭代器对象        //不需要关心底层集合的具体类型，所有集合依赖的迭代器都实现了java.util.Iterator;接口        Iterator it = c.iterator();        //迭代器是面向接口编程.        //it是引用，保存了内存地址，指向堆中的“迭代器对象”                //2.开始调用方法，完成遍历，迭代。        //while循环        /*        while(it.hasNext())&#123;            Object element = it.next();            System.out.println(element); //100 3.14 false        &#125;        */                /*            boolean b = it.hasNext(); 判断是否有更多的元素，如果有返回true            Object o = it.next(); 将迭代器向下移动一位，并且取出指向的元素.                        原则：调用it.next()方法之前必须调用it.hasNext();        */                            //for循环        for(Iterator it = c.iterator())&#123;            if(it.hasNext())&#123;                Object o = it.next();                System.out.println(o);        &#125;          &#125;&#125;</code></pre><h4>实例二</h4><pre><code>public class CollectionTest03&#123;    public static void main(String[] args) &#123;        //创建集合        Collection c = new ArrayList();        //注意:此时获取的迭代器，指向的是那是集合中没有元素状态下的迭代器。        //注意:集合结构只要发生改变，迭代器必须重新获取。        //当集合结构发生了改变，迭代器没有重新获取时，调用next()方法时:java.util.ConcurrentModificationException        Iterator it = c.iterator();        //添加元素        c.add(1); // Integer类型        C.add(2);        c.add(3);        Collection c2 = new ArrayList();        c2.add(&quot;abc&quot;);        c2.add(&quot;def&quot;);        c2.add(&quot;xyz&quot;);        Iterator it2 = c2.iterator();        while(it2.hasNext())&#123;            Object o = it2.next();            //删除元素            //删除元素之后,集合的结构发生了变化,应该重新去获取迭代器            //但是,循环下一次的时候并没有重新获取迭代器,所以会出现异常:java.util.ConcurrentModificationException            //出异常根本原因是:集合中元素删除了,但是没有更新迭代器(迭代器不知道集合变化了)            //c2.remove(o); //直接通过集合去删除元素,没有通知迭代器。( 导致迭代器的快照和原集合状态不同。)            //使用迭代器来删除可以吗?            //用迭代器删除时，会自动更新迭代器，并且更新集合(删除集合中的元素)。            it2.remove(); //删除的一定是迭代器指向的当前元素。            System.out.println(o);        &#125;        System.out.println(c2.size()); //0    &#125;&#125;    </code></pre><h4>迭代器迭代原理</h4><strong>集合中不能直接存储基本数据类型，只能存储引用数据类型。为了方便理解迭代器原理，下图所画的在集合中直接存储了数据，其实存储的是引用。<strong><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5azr9qbpe1s0.png" alt=""><br><h4>contains方法的原理</h4><pre><code>boolean contains(Object o)判断集合中是否包含某个对象o如果包含返回true，如果不是包含返回false。contains方法在底层调用equals方法进行比对判断集合中是否包含某个元素。注意：remove方法在底层也调用equals方法进行比对判断集合中是否包含某个元素。所以存放在一个集合中的类型一定要重写equals()方法！！！因为Object中的equals方法比较内存地址，在现实的业务逻辑当中应该比较内容。</code></pre><h4>实例</h4><pre><code>public class CollectionTest03&#123;    public static void main(String[] args) &#123;        //创建集合对象        Collection C = new ArrayList();        //向集合中存储元素        String s1 = new String(&quot;abc&quot;); // s1 = 0x1111        c.add(s1); //放进去了一个&quot;abc&quot;        String s2 = new String(&quot;def&quot;); // s2 = 0x2222        c.add(s2);        //集合中元素的个数        System.out.println(&quot;元素的个数是:&quot;+ c.size()); // 2        //新建的对象String        String x = new String(&quot;abc&quot;); // x = 0x5555        // c集合中是否包含x?结果猜测一下是true还是false?        System.out.println(c.contains(x)); //判断集合中是否存在&quot;abc&quot; true    &#125;&#125;</code></pre><h4>内存图分析</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6j904m4kc934.png" alt=""><br><br><h3>List</h3><h4>List中的常用接口</h4><pre><code>测试List接口中常用方法    1、List集合存储元素特点:有序可重复        有序:List集合中的元素有下标，从0开始,依次递增。        可重复:存储一个1,还可以再存储1。    2、List既然是Collection接口的子接口,那么肯定list接口有自己“特色”的方法:        以下只列出List接口特有的常用的方法:            void add(int index, Object element)            Object set(int index, Object element)            Object get(int index)            int indexOf(Object o)            int lastIndexOf(Object o)            Object remove(int index)</code></pre><h4>实例一</h4><pre><code>public class CollectionTest03&#123;    public static void main(String[] args) &#123;        //创建List类型的集合。        //List myList = new LinkedList();        //List myList = new Vector();        List myList = new ArrayList();        //添加元素        myList.add(&quot;A&quot;); //默认都是向集合未尾添加元素。        myList.add(&quot;B&quot;);        myList.add(&quot;C&quot;);        myList.add(&quot;C&quot;);        myList.add(&quot;D&quot;);                //在列表的指定位置插入指定元素(第一个参数是下标)        //这个方法使用不多，因为对Arraylist集合来说效率比较低。        myList.add(1,&quot;KING&quot; );        //迭代        Iterator it = myList.iterator();        while(it.hasNext())&#123;        Object elt = it.next();        System.out.println(elt);        &#125;        //根据下标获取元素        Object firstObj = myList.get(0);        System.out.println(firstObj);        //因为有下标，所以List集台有自己比较特殊的遍历方式        //通过下标遍历，List集合特有的方式，Set没有。        for(int i = 0; i &lt; myList.size(); i++)&#123;            Object obj = myList.get(i);            System.out.println(obj);        &#125;        //获取指定对象第一次出现处的索引。        System.out.println(myList.indexOf(&quot;C&quot;)); // 3        //获取指定对象最后一次出现处的索引。        System.out.println(myList.lastIndexOf(&quot;C&quot;)); // 4        //删除指定下标位置的元素        //删除下标为0的元素        myList.remove(0);        System.out.println(myList.size()); // 5        System.out.println(&quot;=============================&quot;);        //修改指定位置的元素        myList.set(2, &quot;Soft&quot;);        //遍历集合        for(int i = 0; i &lt; myList.size(); i++)&#123;            Object obj = myList.get(i);            System.out.println(obj);        &#125;    &#125;&#125;</code></pre> <h4>ArrayList</h4><pre><code>ArrayList集合: 1、默认初始化容量10(底层先创建了一个长度为0的数组，当添加第一个元素的时候，初始化容量10。)2、集合底层是一个Object[]数组。3、构造方法:    new ArrayList();     new ArrayList(int);4、ArrayList集合的自动扩容:    增长到原容量的1.5倍。    ArrayList集合底层是数组,怎么优化?        尽可能少的扩容。因为扩容需要数组拷贝。数组拷贝很耗内存，数组扩容效率比较低。        建议在使用ArrayList集合的时候预估计元素的个数，给定一个初始化容量。5、数组优点:    检索效宰比较高。( 每个元素占用空间大小相同，内存地址是连续的，知道首元素内存地址，    然后知道下标，通过数学表达式计算出元素的内存地址，所以检索效率最高。)6、数组缺点:    随机增删元素效率比较低。    数组无法存储较大数据量（很难找到一块巨大的连续的内存空间。）7、向数组末尾添加元素，效率很高，不受影响。8、面试官经常问的一个问题?    这么多的集合中，你用哪个集合最多?        答:ArrayList集合。        因为往数组末尾添加元素，效率不受影响。        另外，我们检索/查找某个元素的操作比较多。9、ArrayList是非线程安全的。</code></pre><h4>LinkedList</h4><pre><code>LinkedList底层是双向链表链表的优点:由于链表上的元素在空间存储上内存地址不连续。所以随机增删元素的时候不会有大量元素位移，因此随机增删效率较高。在以后的开发中，如果遇到随机增删集合中元素的业务比较多时，建议使用Linkedlist。链表的缺点:不能通过数学表达式计算被查找元素的内存地址，每一次查找都是从头节点开始遍历，直到找到为止。所以LinkedList集合检索/查找的效率较低。ArrayList: 把检索发挥到极致。（末尾添加元素效率还是比较高的）LinkedList: 把随机增删发挥到极致。加元素一般都是往末尾添加，所以ArrayList用的比LinkedList多。</code></pre><h4>实例</h4><pre><code>public class LinkedListTest01 &#123;    public static void main(String[] args) &#123;        // LinkedList集合底层也是有下标的。        // 注意:ArrayList之所以检索效率比较高,不是单纯因为下标的原因。是因为底层数组发挥的作用。        // Linkedlist 集合照样有下标，但是检索/查找某个元素的时候效率比较低,因为只能从头节点开始一个一个遍历。        // LinkedList集合有初始化容量吗?没有。        //最初这个链表中没有任何元素。first和last引用都是null。        //不管是LinkedList还是Arraylist，以后写代码时不需要关心具体是哪个集合。        //因为我们要面向接口编程，调用的方法都是接口中的同名方法。        //List list2 = new ArrayList(); //这样写表示底层你用了数组。        List list2 = new LinkedList(); //这样写表示底层你用了双向链表。        //以下这些方法你面向的都是接口编程。        list2.add(&quot;123&quot;);        list2.add(&quot;456&quot;);        list2.add(&quot;789&quot;);         for(int i = 8; i &lt; list2.size(); i++)&#123;            System.out.println(list2.get(i));&#125;&#125;</code></pre><h4>Vector</h4><pre><code>Vector :    1、底层也是一个数组。    2、初始化容量:10    3、怎么扩容的?：扩容之后是原容量的2倍。10--&gt;20 --&gt;40 --&gt; 80    4、ArrayList集合扩容特点: ArrayList集合扩容是原容量1.5倍。    5、Vector中所有的方法都是线程同步的，都带有synchronized关键字是线程安全的。效率比较低，使用较少了。    6、怎么将一个线程不安全的ArrayList集合转换成线程安全的呢?        使用集合工具类:        java.util.Collections;        java.util.Collection是集合接口。        java.util.Collections是集合工具类。        eg：将ArrayList对象myList变成线程安全的： Collections.synchronizedList(myList);</code></pre><h4>实例<h4><pre><code>public class VectorTest &#123;public static void main(String[] args) &#123;    //创建一个Vector集合    List vector = new Vector();    //Vector vector = new Vecotr();    //添加元素，默认容量10个,满了以后扩容为原容量的两倍    vector.add(1);    vector.add(2);    vector.add(3);    vector.add(4);    vector.add(5);    vector.add(6);    Iterator it = vector.iterator();    while (it.hasNext()) &#123;        Object obj=it.next();        System.out.println(obj);    &#125;    //这个可能以后要使用！！！！    List myList=new ArrayList();//非线程安全的    Collections.synchronizedList(myList);//变成线程安全的    //myList集合现在是线程安全的了    myList.add(&quot;111&quot;);    myList.add(&quot;222&quot;);&#125;&#125;</code></pre><br><h3>Set</h3>Set和 <a href="https://icecream-tu.cn/2021/10/24/java-zhong-de-ji-he-map-bu-fen/">Map</a> 密不可分<h4>HashSet要点</h4><pre><code>1.HashSet底层实际上是一个HashMap,HashMap底层采用了哈希表数据结构。2.哈希表又叫做散列表，哈希表底层是一个数组，这个数组中每一个元素是一个单向链表。每个单向链表都有一个独一无二的hash值，代表数组的下标。hash值实际上是key调用hashCode方法，在通过&quot;hash function&quot;转换成的值。3.HashSet其实是HashMap中的key部分，往HashSet添加元素其实是将元素添加到map的key部分了。HashSet有什么特点，HashMap中的key应该不同。HashMap中有一个put方法，put(key,value) key是无序不可重复的。    public boolean add(E e)&#123;        return map.put(e,PRESENT)==null;    &#125;重要：存储在HashSet集合或者HashMap集合key部分的元素，需要同时重写hashCode+equals方法</code></pre><h4>实例</h4><pre><code>public class SetTest01&#123;        public static void main(String[] args)&#123;                //创建集合        Set es = new HashSet();                Employee e1 = new Employee(&quot;1000&quot;,&quot;JACK&quot;);        Employee e2 = new Employee(&quot;1000&quot;,&quot;JACK&quot;);        Employee e3 = new Employee(&quot;1000&quot;,&quot;SCOTT&quot;);        Employee e4 = new Employee(&quot;2001&quot;,&quot;SUN&quot;);        Employee e5 = new Employee(&quot;3000&quot;,&quot;JIM&quot;);        Employee e6 = new Employee(&quot;3001&quot;,&quot;COOK&quot;);                System.out.println(e1.hashCode());        System.out.println(e2.hashCode());                //添加元素        es.add(e1);        es.add(e2);        es.add(e3);        es.add(e4);        es.add(e5);        es.add(e6);                //查看集合元素个数        System.out.println(es.size()); //5                    &#125;&#125;//根据现实的业务逻辑得知：该公司员工编号是: 1000 - 9999class Employee&#123;        //编号    String no;        //姓名    String name;        //Constructor    Employee(String no,String name)&#123;        this.no = no;        this.name = name;    &#125;        //重写equals方法.    //如果员工编号相同，并且名字相同，则是同一个对象    public boolean equals(Object o)&#123;        if(this==o)&#123;            return true;        &#125;        if(o instanceof Employee)&#123;            Employee e = (Employee)o;            if(e.no.equals(this.no) &amp;&amp; e.name.equals(this.name))&#123;                return true;            &#125;        &#125;                return false;    &#125;               //重写hashCode方法.    public int hashCode()&#123;        //以员工编号分组.        return no.hashCode();    &#125;&#125;</code></pre><h4>TreeSet要点</h4><pre><code>TreeSet集合存储元素特点：    1. 无序不可重复，但是可以按照元素的大小顺序自动排序，称为：可排序集合。        这里的无序指的是存进去的顺序和取出来的顺序不同，没有下标。</code></pre><h4>实例</h4><pre><code>public class TreeSetTest &#123;    public static void main(String[] args) &#123;        Set&lt;String&gt; strs =new TreeSet&lt;&gt;();        strs.add(&quot;A&quot;);        strs.add(&quot;B&quot;);        strs.add(&quot;Z&quot;);        strs.add(&quot;Y&quot;);        strs.add(&quot;Z&quot;);        strs.add(&quot;M&quot;);        //遍历        /*            A            B            M            Y            Z        */        for (String s : strs)&#123;            System.out.println(s);        &#125;&#125;</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中的异常</title>
      <link href="/2021/10/18/java-zhong-de-yi-chang/"/>
      <url>/2021/10/18/java-zhong-de-yi-chang/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>java中的异常</title></head><body>    <h3>示例一</h3><h4>要点</h4><pre><code>1、什么是异常，java提供异常处理机制有什么用?1）程序执行过程中发生了不正常的情况，而这种不正常的情况叫做:异常2）java语言是很完善的语言，提供了异常的处理方式：    JVM把该异常信息打印输出到控制台，供程序员参考。程序员看到异常信息之后，可以对程序进行修改，让程序更加的健壮。异常的作用:增强程序的健壮性。2、java语言中异常是以什么形式存在的呢?1）异常在java中以类的形式存在，每一个异常类都可以创建异常对象。3、异常对应的现实生活中是怎样的?    火灾(异常类):        2008年8月8日,小明家着火了(异常对象)        2008年8月9日,小刚家着火了(异常对象)        2008年9月8日，小红家着火了（异常对象)    类是:模板。    对象是:实际存在的个体。</code></pre><h4>实例</h4><pre><code>public static void main(String[] args)&#123;    int a = 10;    int b = 0;    //实际上JVM在执行到此处的时候，会new异常对象:new ArithmeticException(&quot;/ by zero&quot; );    //并且JVM将new的异常对象抛出，打印输出信息到控制台了。    int c = a / b;    System.out.println(a + &quot;/&quot;+ b +&quot;=&quot; + c);    //我观察到异常信息之后，对程序进行修改，更加健壮。    /*    int a = 10;    int b = 2;    if(b == 0)&#123;        System.out.println(&quot;除数不能为0&quot;);        return;    &#125;    //程序执行到此处表示除数一定不是0    int c = a / b;    System.out.println(a + &quot;/&quot;+ b + &quot;=&quot; + c);    */    //通过“异常类”实例化“异常对象”    NumberFormatException nfe = new NumberFormatException(&quot;数字格式化异常!&quot;);    //java.Lang.NumberFormatException:数字格式化异常!    System.out.println(nfe);    //通过“异常类”创建异常对象    NullPointerException npe = new NullPointerException(&quot;空指针异常发生了!&quot;);    //java.Lang.NullPointerException:空指针异常发生了!    System.out.println(npe);    &#125;</code></pre><br>   <h3>示例二</h3>    <h4>要点</h4><pre><code>1、异常的继承结构ObjectObject下有Throwable(可抛出的)Throwable下有两个分支: Error(不可处理，直接退出JVM)和Exception(可处理的)    Exception下有两个分支:    Exception的直接子类:编译时异常(要求程序员在编写程序阶段必须预先对这些异常进处理)    RuntimeException:运行时异常。(在编写程序阶段程序员可以预先处理，也可以不管)2、编译时异常和运行时异常，都是发生在运行阶段。编译阶段异常是不会发生的。3、编译时异常必须在编译(编写)阶段预先处理，如果不处理编译器报错，    因为只有程序运行阶段才可以new对象，异常的发生就是new异常对象.4、编译时异常和运行时异常的区别?    编译时异常发生概率较高需要在运行之前进行预处理，运行时异常发生概率较低不需要在运行之前进行预处理。5、编译时异常还有其他名字:  受检异常（CheckedException）、受控异常    运行时异常还有其它名字:  未受检异常（UnCheckedException）、非受控异常6、Java语言中对异常的处理包括两种方式:    第一种方式:在方法声明的位置上，使用throws关键字，抛给上一级（调用者）。         异常发生之后，如果我选择了上抛，抛给了我的调用者，调用者需要对这个异常继续处理，那么调用者处理这个异常同样有两种处理方式。    第二种方式:使用try..catch语句进行异常的捕捉并处理。 </code></pre> <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.lfdshx0ksps.png" alt="">           <h4>实例</h4><pre><code>public class ExceptionTest02 &#123;        public static void main(String[] args) &#123;        // 第一种处理方式:在方法声明的位置上继续使用: throws,来完成异常的继续上抛。抛给调用者。        /*        public static void main(String[] args) throws ClassNotFoundException &#123;            doSome();        &#125;        */        //第二种处理方式: try...catch进行捕捉。        //捕捉等于将异常拦下来真正解决（调用者是不知道的）        public static void main(String[] args) &#123;            try &#123;                doSome();            &#125; catch (ClassNotFoundException e) &#123;                e.printStackTrace();            &#125;        &#125;          // main方法中调用doSome()方法        //因为doSome()方法声明位置上有: throws ClassNotFoundException        //我们在调用doSome()方法的时候必须对这种异常进行预先的处理。        //如果不处理，编译器就报错。        //编译器报错信息: Unhandled exception: java.lang.ClassNotFoundException        // doSome();    &#125;    /**    * doSome 方法在方法声明的位置上使用了: throws ClassNotFoundException    *这个代码表示doSome()方法在执行过程中，有可能会出现ClassNotFoundException异常。    *这个异常直接父类是: Exception,所以ClassNotFoundException属于编译时异常。    * @throws ClassNotFoundException    */    public static void doSome() throws ClassNotFoundException&#123;        System.out.println(&quot;doSome!!!&quot;);&#125;</code></pre><br>   <h3>示例三（try...catch、throws）</h3>    <h4>要点</h4><pre><code>    1、只要异常没有捕捉，采用抛出异常的方式，此方法的后续代码不会执行        另外需要注意，try语句块中的某一行出现异常，该行后面的代码不会执行    2、throws 后面也可以写多个异常，使用逗号隔开    3、可以直接抛出该抛出异常类对象的父对象异常类对象    4、catch后面的小括号中的类型可以是具体的异常类型，也可以是该异常类型的父类型。       catch可以写多个。建议catch的时候,精确的一个一个处理，这样有利于程序的调试。       catch写多个的时候，从上到下，必须遵守从小到大。    </code></pre>   <h4>实例</h4><pre><code>public class ExceptionTest03 &#123;        //一般不建议在main方法上使用throws，因为这个异常如果真正的发生了，一定会抛给JVM，JVM只有终止。        //异常处理机制的作用就是增强程序的健壮性，做到异常发生也不影响程序的执行。        // 一般main方法中的异常建议使用try...catch进行捕捉，main就不要继续上抛了。        /*        public static void main(String[] args) throws FileNotFoundException &#123;            System.out.println( &quot;main begin&quot;);            m1();            System.out.println( &quot;main over&quot;);        &#125;        */        public static void main(String[] args) &#123;            // 100/e 这是算术异常,这个异常是运行时异常，你在编译阶段，可以处理,也可以不处理，编译器不管。            //System.out.println(100/0); //不处理编译器也不管            //你处理也可以            /*            try &#123;                System.out.println(100/0);            &#125; catch(ArithmeticException e)&#123;                System.out.println(&quot;算术异常了! ! ! !&quot;);            */            System.out.println(&quot;main begin&quot;);            try &#123;                //try尝试                m1();                //以上代码出现异常,直接进catch语句块中执行。                System.out.println(&quot;hello world!&quot;) ;            &#125; catch (FileNotFoundException e)&#123; //catch后面的好像一个方法的形参。                //这个分支中可以使用e引用, e引用保存的内存地址是那个new出来异常对象的内存地址。                //catch是捕捉异常之后走的分支。                //在catch分支中于什么?处理异常。                System.out.println(&quot;文件不存在,可能路径错误,也可能该文件被删除了! &quot;);            &#125; catch(IOException e)&#123;                System.out.println(&quot;读文件报错了！&quot;);            &#125;                //try...catch处理完异常后，这里的代码会继续执行                System.out.println(&quot;main over&quot;);            &#125;            private static void m1() throws FileNotFoundException &#123;                System.out.print1n(&quot;m1 begin&quot;);                m2();                //以上代码出异常,这里是无法执行的。                System.out.println(&quot;m1 over&quot;) ;            &#125;            //抛别的不行，抛ClassCastException说明你还是没有对FileNotFoundException进行处理            //private static void m2() throws ClassCastException&#123;            //抛FileNotFoundException的父对象I0Exception，这样是可以的，因为IOException包括FileNotfoundException            //private static void m2() throws IOException &#123;            //这样也可以，因为Exception包括所有的异常。            //private static void m2() throws Exception&#123;            //throws 后面也可以写多个异常，可以使用逗号隔开。            //private static void m2() throws ClassCastException, FileNotFoundException&#123;                        private static void m2() throws FileNotFoundException &#123;                System.out.println(&quot;m2 begin&quot;);                //编译器报错原因是:m3()方法声明位置上有: throws FileNotFoundException                //我们在这里调用m3()没有对异常进行预处理,所以编译报错。                m3();                //以上如果出现异常,这里是无法执行的!                System.out.println(&quot;m2 over&quot;);             &#125;            private static void m3() throws FileNotFoundException &#123;                //调用SUN jdk中某个类的构造方法。                //创建一个输入流对象，该流指向一个文件。                /*                编译报错的原因是什么?                    第一:这里调用了一个构造方法:FileInputStream(String name)                    第二:这个构造方法的声明位置上有: throws FileNotFoundException                    第三:通过类的继承结构看到：FileNotFoundException父类是I0Exception,IOException的父类是Exception                    最终得知，FileNotFoundException是编译时异常。                    错误原因?编译时异常要求程序员编写程序阶段必须对它进行处理,不处理编译器就报错。                */                new FileInputStream( &quot;D: \\course\\\\javaSE.txt&quot;);                System.out.println(&quot;如果以上代码出异常,这里会执行吗????????????????不会!!! &quot;);            &#125;        &#125;</code></pre><br>   <h3>示例四(getMessage()、printStackTrace())</h3>    <h4>要点</h4><pre><code>1、异常对象有两个非常重要的方法:    获取异常简单的描述信息:    String msg = exception.getMessage();     打印异常追踪的堆栈信息:    exception.printStackTrace();（一般都是使用它）2、我们以后查看异常的追踪信息，我们应该怎么看，可以快速的调试程序呢?    异常信息追踪信息,从上往下一行一行看。    但是需要注意的是: SUN写的代码就不用看了(看包名就知道是自己的还是SUN的)。    主要的问题是出现在自己编写的代码上。</code></pre><h4>实例</h4><pre><code>pub1ic class ExceptionTest04 &#123;    public static void main(String[] args) &#123;    //这里只是为了测试getMessage()方法和printStackTrace()方法。    //这里只是new了异常对象，但是没有将异常对象抛出，JVM会认为这是一个普通的java对象。    NullPointerException e = new NullPointerException( &quot;空指针异常fdsafdsafdsafds&quot;);        //获取异常简单描述信息:这个信息实际上就是构造方法上面String参数。    String msg = e.getMessage(); // 空指针异常fdsafdsafdsafds    System.out.println(msg);        //打印异常堆栈信息    // java后台打印异常堆栈追踪信息的时候，采用了异步线程的方式打印的。    e.printStackTrace();    try &#123;        m1();        &#125; catch (FileNotFoundException e) &#123;        //打印异常堆栈追踪信息! ! !        //在实际的开发中，建议使用这个。养成好习惯!        //e.printStackTrace();         /*        java.io.FileNotFoundException: C:\jetns-agent.jar(系统找不到指定的文件。)        at java.base/java.io.FileInputStream.open(Native Method)        at java.base/java.io.FileInputStream.open(FileInputStream.java:213)        at java.base/java.io.FilenputStream.&lt;init&gt;(FileInputStream.java:155)        at java.base/java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:110)        at com.bjpowernode.javase.exception.ExceptionTest09.m3(Except ionTest09.java:31)        at com.bjpowernode.javase.exception.ExceptionTest09.m2(ExceptionTest09.java:27)        at com.bjpowernode.javase.exception.ExceptionTest09.m1(ExceptionTest09.java:23)        at com. bipowernode.javase.exception.ExceptionTest09.main(ExceptionTest09.java:14)        因为31行出问题导致了27行        27行出问题导致23行        23行出问题导致14行。        应该先查看31行的代码。31行是代码错误的根源。        */    &#125;    //这里程序继续执行，程序try...catch处理了异常，很健壮，服务器不会因为遇到异常而宕机。    System.out.println(&quot;He11o Wor1d!&quot;);&#125;    private static void m1() throws FileNotFoundException &#123;            m2();        &#125;    private static void m2() throws FileNotFoundException &#123;        m3();    &#125;    private static void m3() throws FileNotFoundException &#123;        new FileInputStream(name: &quot;C:\\jetns-agent.jar&quot;);    &#125;&#125;</code></pre><br><h3>示例五（finally）</h3><h4>要点</h4><pre><code>关try.. catch中的finally子句:1、在finally子句中的代码是最后执行的，并且是一定会执行的，即使try语句块中的代码出现了异常。    finally子句必须和try一起出现，不能单独编写。2、finally语句通常使用在哪些情况下呢?    通常在finally语句块中完成资源的释放/关闭。因为finally中的代码比较有保障。    即使try语句块中的代码出现异常, finally中代码也会正常执行，除非退出JVM虚拟机。3、try finally,没有catch可以吗?可以。    try不能单独使用。    try finally可以联合使用。    finally中的代码一般会执行，除非退出JVM虚拟机，return语句最后执行，return语句执行方法必然结束。4、System.exit(0) 退出JVM虚拟机，程序执行到此就结束了。</code></pre><h4>实例</h4><pre><code>public class ExceptionTest05 &#123;    public static void main(String[] args) &#123;        FileInputStream fis = null; //声明位置放到try外面，这样在finally中才能用。        try &#123;            //创建输入流对象            fis = new FileInputStream(name: &quot;D:\\course\\02-JavaSE\\document&quot;);            //开始读文件....            String s = null; .            //这里一定会出现空指针异常!            s.toString();            System.out.println(&quot;he11o world!&quot;);            //流使用完需要关闭，因为流是占用资源的。            //即使以上程序出现异常，流也必须要关闭!            //放在这里有可能流关不了。            //fis.close();        &#125; catch (FileNotFoundException e) &#123;                e.printStackTrace();            &#125; catch(IOException e)&#123;                e.printStackTrace();            &#125; catch(NullPointerException e) &#123;                e.printStackTrace();            &#125; finally &#123;            System.out.println(&quot;hello浩克! &quot;);            //流的关闭放在这里比较保险。            // finally中的代码是一定会执行的。            //即使try中出现了异常!            if (fis != null) &#123; //避免空指针异常!                try &#123;                // close()方法有异常,采用捕捉的方式。                    fis.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            &#125;                System.out.println(&quot;hello kitty!&quot;);    &#125;&#125; </code></pre><h4>实例</h4><pre><code>public class ExceptionTest06 &#123;    public static void main(String[] args) &#123;        /*         以下代码的执行顺序:        先执行try...        再执行finally...        最后执行return(return语句只要执行方法必然结束。)        try &#123;            System.out.println(&quot;try...&quot;);            return;        &#125; finally &#123;            // finally中的语句会执行。能执行到。            System.out.println(&quot;finally...&quot;);        &#125;                //这里不能写语句，因为这个代码是无法执行到的。        //System.out.println( &quot;Hello world!&quot;);&#125;    </code></pre>  <br><h3>finally面试题</h3><h4>程序输出结果</h4>        /*            以下程序输出result是多少？？？        */        public class ExceptionTest07 {            public static void main(String[] args) {                int result = m();                System.out.println(result); //100            }<pre><code>        /*        java语法规则(有一些规则是不能破坏的):        java中有两条这样的规则:            方法体中的代码必须遵循自上而下顺序依次逐行执行(亘古不变的语法! )            return语句一旦执行，整个方法必须结束(亘古不变的语法! )        */        public static int m()&#123;            int i = 100;            try &#123;                // 这行代码出现在int i = 100;的下面， 所以最终结果必须是返回100                // return语句还必须保证是最后执行的，一旦执行,整个方法结束。                return i;            &#125; finally &#123;                i++;            &#125;        &#125;    &#125;    /*    反编译之后的效果    public static int m()&#123;        int i = 100;        int j=i;        i++;        return j;     &#125;*/</code></pre><h4>final、finally、finalize有什么区别？？</h4><pre><code>final finally finalize有什么区别?    final关键宇        final修饰的类无法继承        final修饰的方法无法覆盖        final修饰的变量不能重新赋值。    finally关键宇        和try一起联合使用。        finally语句块中的代码是必须执行的。    finalize标识符        是一个object类中的方法名。        这个方法是由垃圾回收器GC负责调用的。</code></pre><br><h3>自定义异常</h3><h4>要点</h4><pre><code>1. SUN提供的JDK内置的异常是不够用的。在实际的开发中，很多业务出现异常之后，JDK中没有相应的异常来处理。    所以需要程序员自定义异常。2. Java中怎么自定义异常呢?    第一步:编写一个类继承Exception或RuntimeException.    第二步:提供两个构造方法，一个无参数的，一个带有String参数的。</code></pre><h4>实例</h4><pre><code>//自定义栈操作异常public class StackOperationException extends Exception&#123;    public StackOperationException()&#123;&#125;    public StackOperationException(String msg)&#123;        super(msg);    &#125;&#125;//栈：后进先出public class Stack&#123;        //使用数组存储数据    //栈可以存储多个引用类型的元素    Object[] elements;        //指向栈顶元素上方的一个帧.    int index;        //栈默认的初始化容量是5    //Constructor    Stack()&#123;        this(5);    &#125;        Stack(int max)&#123;        elements = new Object[max];    &#125;        //栈应该对外提供一个压栈的方法    public void push(Object element) throws StackOperationException&#123;        /*        elements[index] = element;        index++;        */        if(index==elements.length)&#123;            //异常            throw new StackOperationException(&quot;栈已满！&quot;);        &#125;                elements[index++] = element;    &#125;        //栈应该对外提供一个弹栈的方法    public Object pop() throws StackOperationException&#123; //栈顶的元素往外弹        /*        index--;        return elements[index];        */        if(index==0)&#123;            throw new StackOperationException(&quot;栈已空！&quot;);        &#125;        return elements[--index];    &#125;    &#125;</code></pre><br><h3>异常与方法覆盖</h3><p>    <strong>重写之后的方法不能比重写之前的方法抛出更多或是更宽泛的异常，可以更少</strong></p><pre><code>class Animal &#123;    public void doSome()&#123;&#125;    public void doOther() throws Exception&#123;&#125;class Cat extends Animal &#123;            //编译正常。    public void doSome() throws RuntimeException&#123;&#125;        /*    //编译报错。    public void doSome() throws Exception&#123;    &#125;    //编译正常。    public void doOther() &#123;    &#125;    //编泽正常。    public void doOther() throws Exception&#123;    &#125;    */        //编译正常。    public void doOther() throws NullPointerException&#123;    &#125;&#125;    </code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中常用类</title>
      <link href="/2021/10/11/java-zhong-de-chang-yong-lei/"/>
      <url>/2021/10/11/java-zhong-de-chang-yong-lei/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>java中常用类</title></head><body>    <h3>日期类</h3><h4>示例一</h4><pre><code>public class DateTest01 &#123;    public static void main(String[] args) throws Exception &#123;        //获取系统当前时间(精确到毫秒的系统当前时间)        //直接调用无参数构造方法就行。        Date nowTime = new Date();        // java.util.Date类的toString()方法已经被重写了。        //输出的应该不是一个对象的内存地址,应该是一个日期宇符申。        //System.out.println(nowTime); //Thu Mar 05 10:51:06 CST 2020        //日期可以格式化吗?        //舟日期类型bate ,按照指定的格式进行转换:Date -- 转换成具有-定格式的日期字符串- -&gt;String        // SimpleDateFormat是java. text包下的。专门负责日期格式化的。        /*        yyyy年(年是4位)        MM月(月是2位)        dd日        HH时        mm分        ss秒        SSS毫秒(毫秒3位,最高999。1000毫秒代表1秒)        注意:在日期格式中，除了y M d H m s S这些字符不能随使写之外,剩下的符号格式自已随意组织。    */        SimpleDateFormat sdf = new SimpleDateFormat( pattern: &quot;yyyy-MM-dd HH:mm:ss sss&quot;);        //SimpleDateFormat sdf = new SimpleDateFormat( &quot;dd/MM/yyyy&quot;);        //SimpleDateFormat sdf = new SimpleDateFormat( &quot;yy/MM/dd HH:mm:ss&quot;);        String nowTimeStr = sdf.format(nowTime);        System.out.println( nowTimeStr);        //假设现在有一个日期字符串string，怎么转换成bate类型?        // String --&gt; Date        String time = &quot;2008-08-08 08:08:08 888&quot;;        //SimpleDateFormat sdf2 = new SimpleDateformat(&quot;格式不能随便写，要和日期宇符串格式相同&quot;);        //注意:字符串的日期格式和SimpleDateFormat对象指定的日期格式要-致。不然会出现异常: java.text.ParseException        SimpleDateFormat sdf2 = new SimpleDateFormat( pattern: &quot;yyyy-MM-dd HH:mm:ss SSS&quot;);        Date dateTime = sdf2.parse(time);        System.out.println(dateTime); //Fri Aug 08 08:08:08 CST 2008        &#125;    &#125;</code></pre><h4>示例二</h4><pre><code>简单总结一下System类的相关属性和方法:System.out           【out 是System类的静态变量】System.out.println() 【println()方法 不是System类的，是PrintStream类的方法。】System.gc()           建议启动垃圾回收器System.currentTimeMillis()获取自1970 年11日到系统当前时间的总毫秒数。System.exit(0)        退出VM。public class DateTest02 &#123;    public static void main(String[] args) &#123;        //获取自1970年1月1日00:00:00 000到当前系统时间的总毫秒数。        1ong nowTimeMillis = System.currentTimeMillis();        System.out.println( nowTimeMillis); //1583377912981        //统计一个方法耗时        //在调用目标方法之前记录一个毫秒数        1ong begin = System.currentTimeMillis();        print();        //在执行完目标方法之后记录一个毫秒数        1ong end = System.currentTimeMillis();        System.out.println(&quot;耗费时长&quot;+(end - begin)+&quot;毫秒&quot;);        &#125;        //需求:统计一个方法执行所耗费的时长        public static void print()&#123;            for(int i = 0; i &lt; 1000; i++)&#123;            System.out.println(&quot;i=”+ i);            &#125;        &#125;    &#125;</code></pre><br><h3>数字类</h3><h4>示例一（数字格式化）</h4><pre><code>public static void main( String[ ] args)&#123;    // java.text.DecimaLFormat专门负责数字格式化。    / / DecimalFormat df = new DecimaLFormat(&quot;数宁格式”);    /*数字格式有哪些?# 代表任意数字，代表千分位．代表小数点代表0 不够时补0###，###.##表示加入千分位并保留2个小数。*/DecimalFormat df = new DecimalFormat( pattern:&quot;###,###.##&quot;);// String s = df.format(1234.56);String s = df.format( number: 1234.561232);System.out.println(s);// &quot;1,234.56”DecimalFormat df2 = new DecimalFormat( pattern:&quot;###,###.0000&quot;);//保留4个小数位，不够补上0String s2 = df2.format( number: 1234.56);System.out.println(s2); // &quot;1,234.5608&quot;&#125; </code></pre><h4>示例二（BigDecimal）</h4><h4>要点</h4><pre><code>1、BigDecimal属于大数据，精度极高。不属于基本数据类型，属于java对象（引用数据类型)这是SUN提供的一个类。专门用在财务软件当中。2、注意﹔财务软件中double是不够的,用的哪一种类型?千万别说double ，说java.math.BigDecimal</code></pre><h4>实例</h4><pre><code>import java.math.BigDecimal;public class BigDecimalTest01&#123;    public static void main(String[ ] args)&#123;        //这个100不是普通的100，是精度极高的100        BigDecimal v1 = new BigDecimal( val: 100);        //精度极高的200        BigDecimal v2 = new BigDecimal( val: 200);        //求和        // v1 + v2;//这样不行，v1和v2都是引用，不能亘接使用+求和。        BigDecimal v3 = v1.add(v2); //调用方法求和。        System.out.println(v3); // 300        BigDecimal v4 = v2.divide(v1);        System.out.println(v4); //2    &#125;&#125;</code></pre><br><h3>随机数</h3><h4>示例一</h4><pre><code>public class RandomTest01 &#123;    public static void main(String[ ] args)&#123;    //创建随机数对象    Random random = new Random();    //随机产生一个int类型取值范围内的数字。int num1 = random.nextInt();    System.out.println(num1 );    //产生[ 0~100]之间的随机数。不能产生101。    int num2 = random.nextInt( bound: 101);//不包括101    System.out.println(num2 );    &#125;&#125;</code></pre><h3>枚举</h3><h4>示例一</h4><p><h4>要点<h4><pre><code>1、枚举是一种引用数据类型2、故举类型怎么定义，语法是?    enum枚举类型名&#123;    枚举值1,枚举值2    &#125;3、结果只有两种情况的，建议使用布尔类型。结果超过两种并且还是可以一枚一枚列举出来的，建议使用枚举类型例如:颜色、四季、星期等都可以使用枚举类型。 4、枚举:一枚一枚可以列举出来的，才建议使用枚举类型。5、枚举编译之后也是生成class文件。6、枚举也是一种引用数据类型。7、枚举中的每一个值可以看做是常量。</code></pre> <h4>实例<h4><pre><code>public class EnumTest01 &#123;    public static void main( string[] args) &#123;    Result r = divide( 10，2);    System.out.println(r == Result.SUCCESS ?&quot;计算成功&quot;:&quot;计算失败&quot;);    &#125;        public static Result divide( int a, int b)&#123;        try &#123;        int c = a / b;        return Result.SUCCESS;    &#125;catch (Exception e)&#123;        return Result.FAIL;        &#125;    &#125;    public enum Result&#123;    // SUCCESS是枚举Result类型中的一个值    //FAIL是枚举Result类型中的一个值    //枚举中的每一个值，可以看做是“常量”    SUCCESS，FAIL    &#125;&#125;        </code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装箱与拆箱简介</title>
      <link href="/2021/09/30/zhuang-xiang-yu-chai-xiang/"/>
      <url>/2021/09/30/zhuang-xiang-yu-chai-xiang/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>装箱与拆箱</title></head><body><h3>装箱与拆箱</h3><h4>要点</h4><pre><code>1、8种基本数据类型对应的包装类型名是什么?基本数据类型     包装类型-------------------------------------byte            java.lang.Byte (父类Number )short           java.lang.Short (父类Number )int             java.lang.Integer (父类Number )long            java.lang.Long (父类Number )float           java.lang.Float (父类Number )double          java.lang.Double (父类Number )boolean         java.lang.Boolean ( 父类object )char            java.lang.Character (父类object )2、八种包装类中其中6个都是数宇对应的包装类,他们的父类都是Number，可以先研究Number中公共的方法:Number是一个抽象类,无法实例化对象。Number类中有这样的方法:byte byteValue() 以byte形式返回指定的数值。abstract double doubleValue()以 double 形式返回指定的数值。abstract float floatValue()以 float 形式返回指定的数值。abstract int intValue()以 int 形式返回指定的数值。abstract long longValue()以 long 形式返回指定的数值。short shortValue()以 short 形式返回指定的数值。这些方法其实所有的数字包装类的子类都有，这些方法是负责折箱的。</code></pre><h4>实例</h4><pre><code>public class IntegerTest01&#123;    public static void main(String[] args) &#123;        // 123这个基本数据类型,进行构造方法的包装达到了:基本数据类型向引用数据类型的转换。        //基本数据类型-(转换为)-&gt;引用数据类型(装箱)        Integer i = new Integer( value: 123);//通过构造方法装箱（Java9后该方法已废除）        //引用数据类型--(转换为)-&gt;基本数据类型        float f = i.floatValue();        System.out.println(f); //123.0        //将引用数据类型--(转换为)-&gt;基本数据类型(拆箱)        int retValue = i.intValue();        System.out.print1n(retValue); //123    &#125;&#125;</code></pre><br><h3>包装类型的构造方法(查文档)</h3><h3>自动装箱与自动拆箱</h3><h4>要点</h4><pre><code>java5之后支持自动装箱和自动拆箱自动装箱：基本数据类型自动转换成包装类自动拆箱：包装类自动转换成基本数据类型</code></pre><h4>实例</h4><pre><code>public class IntegerTest02&#123;    public static void main(String[] args)&#123;        // 900是基本数据类型        // x是包装类型        //基本数据类型--(自动转换)--&gt; 包装类型:自动装箱        Integer x = 900;        System.out.print1n(x);        // x是包装类型        // y是基本数据类型        //包装类型--(自动转换)--&gt; 基本数据类型:自动拆箱        int y= x;        System.out.print1n(y);        // z是一个引用,z是一个变量, z还保存了一个对象的内存地址。        Integer z = 1000; //等同于: Integer z = new Integer(1000);        //分析为什么这个没有报错呢?        // +两边要求是基本数据类型的数字, z是包装类，不属于基本数据类型,这里会进行自动拆箱。将2转换成基本数据类型        //在java5之前你这样写肯定编译器报错。        System.out.println(z + 1);         Integer a = 1000; // Integer a = new Integer(1000); a是个引用,保存内存地址指向对象。        Integer b = 1000; // Integer b = new Integer(1000); b是个引用，保存内存地址指向对象。        // ==比较的是对象的内存地址, a和b两个引用中保存的对象内存地址不同。        // ==这个运算符不会触发自动拆箱机制。 (只有+ . * /等运算的时候才会。)        System.out.println(a==b);//false    &#125;&#125;</code></pre><h4>实例</h4><pre><code>public class IntegerTest03&#123;    public static void main(String[] args) &#123;    Integer a = 128;    Integer b = 128;    System.out.println(a == b); //false    /*    java中为了提高程序的执行效率,将[ -128到127]之间所有的包装对象提前创建好,    放到了一个方法区的“整数型常量池”当中了，目的是只要用这个区间的数据不需要再new了,    直接从整数型常量池当中取出来。    原理:x变量中保存的对象的内存地址和y变量中保存的对象的内存地址是一样的。    */    Integer x = 127;    Integer y = 127;    // == 永远判断的都是两个对象的内存地址是否相同。    System.out.println(x == y); //true    &#125;    </code></pre><h4>内存图（部分）</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.297wkgxclaps.png" alt=""><br><br><h4>实例</h4><pre><code>public class IntegerTest04 &#123;        public static void main(String[] args) &#123;        //手动装箱        Integer x = new Integer(value: 1000);        //手动拆箱。        int y = x.intValue();        System.out.print1n(y);        Integer a = new Integer( s: &quot;123&quot;);        //编译的时候没问题，一切符合java语法，运行时会不会出问题呢?        //不是一个“数字”可以包装成Integer吗?不能。运行时出现异常。        // java.lang.NumberFormatException        //Integer a = new Integer(&quot;中文&quot;);        //重点方法        // static int parseInt(String s)        //静态方法，传参string，返回int        //网页上文本框中输入的100实际上是&quot;100&quot;宇符串。后台数据库中要求存储100数字，此时java程序需要将&quot;100&quot;转换成100        int retValue = Integer.parseInt( s: &quot;123&quot;); // String -转换-&gt; int        //int retValue = Integer.parseInt(&quot;中文&quot;); // NumberFormatException        System.out.println(retValue + 100);        //照葫芦画瓢        double retValue2 = Double. parseDouble( s: &quot;3.14&quot;);        System.out.println(retValue2 + 1); //4. 1000000000010 (精度问题)        float retValue3 = Float. parseFloat( s: &quot;1.0&quot;);        System.out.println(retValue3 + 1); //2.0    &#125;&#125;</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String简介</title>
      <link href="/2021/09/29/string/"/>
      <url>/2021/09/29/string/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Java中的String</title></head><body><h3>String字符串的存储原理</h3><h3>示例一</h3><h4>要点</h4><pre><code>1、String表示字符串类型,属于引用数据类型,不属于基本数据类型。2、在java中随便使用双引号括起来的都是String对象。例如: &quot;abc&quot; , &quot;def&quot; , &quot;hello world!&quot; ,这是3个String对象。3、java 中规定,双引号括起来的字符串本身,是不可变的,也就是说&quot;abc&quot;自出生到最终死亡都是&quot;abc&quot;。4、在JDK当中双引号括起来的字符串,例如: &quot;abc&quot; &quot;def&quot; 都是直接存储在“方法区”的“字符串常量池”当中的。为什么SUN公司把字符串存储在一个“字符串常量池”当中呢？ 因为字符串在实际的开发中使用太频繁。为了执行效率,把字符串放到了方法区的字符串常量池当中。</code></pre><h4>实例</h4><pre><code>public class StringTest01 &#123;    public static void main(String[] args) &#123;        //这两行代码表示底层创建了3个字符串对象,都在字符串常量池当中。        String s1 = &quot;abcdef&quot;;        String s2 = &quot;abcdef&quot; + &quot;xy&quot;;        //分析:这是使用new的方式创建的字符串对象。这个代码中的&quot;xy&quot;是从哪里来的?        //凡是双引号括起来的都在字符串常量池中有一份。        // new对象的时候一定在堆内存当中开辟空间。        String s3 = new String(original: &quot;xy&quot;);    &#125;&#125;    </code></pre><h4>内存图</h4>    <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.7hepxxcoy6bk.webp" alt="">    <br><h3>示例二</h3> <h4>实例（部分代码）</h4><pre><code>User user = new User(id:110,name:&quot;张三&quot;);</code></pre><h4>内存图</h4>    <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1kkxvm96dpuo.webp" alt=""> <br><h3>示例三</h3><h4>实例</h4><pre><code>public class StringTest02 &#123;    public static void main(String[] args) &#123;        String s1 = &quot;he11o&quot;;        // &quot;hello&quot;是存储在方法区的字符串常量池当中        //所以这个&quot;hello&quot;不会新建。( 因为这个对象已经存在了! )        String s2 = &quot;he11o&quot;;        // ==双等号比较的是变量中保存的内存地址。        System.out.print1n(s1 == s2); // true        String x = new String( original: &quot;xy&quot;);        String y = new String( original: &quot;xyz&quot;);        System.out.println(x == y); //false        /*        //通过这个案例的学习,我们知道了,字符串对象之间的比较不能使用“==”        // &quot;==&quot;不保险。应该调用String类的equals方法，String类的equals方法已经重写了。        System.out.print1n(x.equals(y)); // true        String k = new String(&quot;testString&quot;);        //String k = null;        // &quot;testString&quot;这个字符串可以后面加&quot;.&quot;吗? 可以。        //因为&quot;testString&quot;是一个String字符串对象，只要是对象都能调用方法。        System.out.println(&quot;testString&quot;.equals(k)); //建议使用这种方式，因为这个可以避免空指针异常。        System.out.println(k.equals(&quot;testString&quot;)); //存在空指针异常的风险。不建议这样写。        */    &#125;&#125;</code></pre><h4>内存图</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.2uadfgfyfu2o.webp" alt=""><br><h3>String中的构造方法</h3><h4>要点</h4><pre><code>关于String类中的构造方法。第一个:String s = new String(&quot;&quot;);第二个:String s =&quot;&quot;;//最常用第三个:String s = new String(char数组);第四个:String s = new String(char数组,起始下标,长度);第五个:String s = new String(byte数组);第六个:String s = new String(byte数组,起始下标,长度)</code></pre><h4>实例</h4><pre><code>public class StringTest04 &#123;    public static void main(String[] args) &#123;        //创建宇符串对象最常用的一种方式        String s1 = &quot;he11o wor1d!&quot;;        // s1这个变量中保存的是一个内存地址。        System.out.println(s1); //hello world!        System.out.print1n(s1.toString()); //hello world!        //这里只掌握常用的构造方法。        byte[] bytes = &#123;97, 98, 99&#125;; // 97是, 98是b , 99是c        String s2 = new String(bytes);        //输出字符串对象的话，输出的不是对象的内存地址,而是字符串本身。        System.out.println(s2.toString()); //abc        //String(字节数组,数组元素下标的起始位置长度)        //将byte数组中的一部分转换成字符串。        String s3 = new String(bytes,1,2);        System.out.println(s3); //bc        //将char数組全部转换成字符串        char[] chars = &#123;&#39;我&#39;,&#39;是&#39;,&#39;中&#39;,&#39;国&#39;,&#39;人&#39;&#125;;        String s4 = new String(chars);        System.out.println(s4);        //将char数组的部分转换成字符串        String s5 = new String(chars, 2，3);        System.out.print1n(s5);        String s6 = new String(&quot;helloworld!&quot;);        System.out.println(s6); //helloworld!    &#125; &#125;</code></pre><br><h3>StringBuffer进行字符串拼接</h3>  <h4>要点</h4>  <pre><code>使用“+”进行字符串拼接会在字符串常量池中产生大量程序运行过程中不会被回收的字符串常量，消耗内存。如果以后需要进行大量字符串的拼接操作.建议使用JDK中自带的:java.lang.StringBufferjava.lang.StringBuilderStringBuffer的append方法底层调用了arraycopy方法进行扩容，扩容后原字符串会被回收。如何优化StringBuffer的性能?在创建StringBuffer的时候尽可能给定一个初始化容量。最好减少底层数组的扩容次数。预估计一下，给一个大一些初始化容量。关键点:给一个合适的初始化容量。可以提高程序的执行效率。* StringBuffer和StringBuilder的区别StringBuffer中的方法都有: synchronized关键字修饰。表示StringBuffer在多线程环境下运行是安全的。StringBuilder中的方法都没有: synchronized关键字修饰，表示StringBuilder在多线程环境下运行是不安全的。</code></pre><h4>实例</h4><pre><code>public class StringBufferTest01&#123;    public static void main(String[] args) &#123;        //创建一个初始化容量为16个byte[]数组。(字符串缓冲区对象)        StringBuffer stringBuffer = new StringBuffer();        //拼接字符串,以后拼接字符串统一调用 append()方法。        //append是追加的意思。        stringBuffer.append(&quot;a&quot;);        stringBuffer.append(3.14);        stringBuffer.append(true);        //append方法底层在进行追加的时候,如果byte数组满了,会自动扩容。        stringBuffer.append(100L);        System.out.println(stringBuffer.toString());        //指定初始化容量的StringBuffer对象(字符申缓冲区对象)        StringBuffer sb = new StringBuffer(capacity: 100);        sb.append(&quot;hello&quot;);        StringBuilder sb2 = new StringBuilder();        sb2.append(&quot;hello&quot;);    &#125;&#125;</code></pre><br><h3>String类中的一些方法</h3><P>&nbsp&nbsp&nbsp&nbspString类中有很多方法例如：StringBuffer和StringBuilder方法、charAt方法、compareTo方法、contains方法、endsWith方法、equals方法、equalsgnoreCase方法、getBytes方法、isEmpty方法、substring方法、toCharArray方法、toLowerCase方法、valueOf方法等等，这里简要介绍Interger、Int和String相互转换的方法，其他方法请查文档。<p><h4>示例<h4><pre><code>public class IntegerTest&#123;    public static void main(String[] args) &#123;        // String --&gt; int        int i1 = Integer.parseInt( s:&quot;100&quot;); //让i1是100数字        System.out.println(i1 + 1); // 101        // int --&gt; String        String s2 = i1 + &quot; &quot;; // &quot;100&quot;字符串        System.out.print1n(s2 + 1); // &quot;1001&quot;        // int --&gt; Integer        //自动装箱        Integer x = 1000;        // Integer --&gt; int        //自动拆箱        int y=x;                // String --&gt; Integer        Integer k = Integer.valueOf(&quot;123&quot;);        // Integer --&gt; String         String e = String.valueOf(k);    &#125;&#125;</code></pre><br><h3>面试题<h3> <h4>1、分析以下程序，一共创建了几个对象<h4><pre><code>public class StringTest03 &#123;    public static void main(String[] args) &#123;    /*    一共3个对象:    方法区字符串常量池中有1个: &quot;hello&quot;    堆内存当中有两个String对象。    一共3个。    */    String s1 = new String( original: &quot;hello&quot;);    String s2 = new String( original: &quot;hello&quot;);    &#125;&#125;</code></pre><h4> 2、String为什么是不可变的?<h4><pre><code>我看过源代码, String类中有一个byte[]数组，这个byte[]数组采用了final修饰。因为数组一旦创建 长度不可变。并且被final修饰的引用一旦指向某个对象之后，不可再指向其它对象，所以String是不可变的! &quot;abc&quot;无法变成&quot;abcd&quot;</code></pre><h4> 3、StringBuilder/StringBuffer为什么是可变的呢?<h4><pre><code>我看过源代码，StringBuffer/StringBuilder内部实际上是一个byte[]数组，这个byte[]数组没有被final修饰，StringBuffer/StringBuilder的初始化容量应该是16，当存满之后会进行扩容，底层调用了数组拷贝的方法System.arraycopy()，所以StringBuilder/StringBuffer适合于使用字符串的频繁拼接操作。</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组简介</title>
      <link href="/2021/09/29/java-zhong-de-shu-zu/"/>
      <url>/2021/09/29/java-zhong-de-shu-zu/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>数组简介</title></head><body>    <h3>示例一</h3>    <h4>要点</h4><pre><code>    main方法上面的String[] args数组主要是用来接收用户输入参数的,    用户可以在控制台上输入参数，这个参数自动会被转换为&quot;String[] args&quot;    例如这样运行程序: java ArrayTeste6 abc def xyz    那么这个时候JVM会自动将abc def xyz通过空格的方式进行分离，分离完成之后，自动放到&quot;String[] args&quot;</code></pre> <h4>实例</h4><pre><code>public class ArrayTeste01&#123;    //用户名和密码输入到String[] args数组当中。    public static void main(String[] args)&#123;        if(args.length != 2)&#123;            System.out.println(&quot;使用该系统时请输入程序参数，参数中包括用户名和密码信息，例如: zhangsan 123            return;        &#125;        //程序执行到此处说明用户确实提供了用户名和密码。        //接下来你应该判断用户名和密码是否正常。        //取出用户名        String username = args[0];        //取出密码        String password = args[1];        //假设用户名是admin，密码是123的时候表示登录成功。其它一律失败。        //判断两个字符串是否相等，需要使用equals方法。        //if(username.equals(&quot;admin&quot;) &amp;&amp; password.equals(&quot;123&quot;))        //采用以下编码风格，即使username和passiword都是null，也不会出现空指针异常。        if(&quot;admin&quot;.equals(username) &amp;&amp;&quot;123&quot;.equals(password))&#123;            System.out.println(&quot;登录成功，欢迎[&quot; + username + &quot;]回来&quot;);            System.out.println(&quot;您可以继续使用该系统....&quot; );        &#125;else&#123;            System.out.println(“验证失败，用户名不存在或者密码错误!&quot;);        &#125;</code></pre><br><h3>示例二</h3><h4>要点</h4><pre><code>关于一维数组的扩容。在java开发中,数组长度一旦确定不可变，那么数组满了怎么办?数组满了，露要扩容。java中对数组的扩容是:先新建一个大容量的数组，然后使用arraycopy方法将小容量数组中的数据一个一个拷贝到大数组当中。结论∶数组扩容效率较低。因为涉及到拷贝的问题。所以在以后的开发中请注意∶尽可能少的进行数组的拷贝。可以在创建数组对象的时候预估计一下多长合适，最好预估准确，这样可以减少数组的扩容次数。提高效率。拷贝函数源码：public static native void arraycopy(@NotNull() @Flow(...) Object src,int srcPos,                                    @NotNull()                                    Object dest,int destPos,                                    int length);arraycopy方法需要五个参数：源数组、源数组起始拷贝位置、目标数组、目标数组起始拷贝位置、源数组拷贝长度。</code></pre><h4>实例</h4><pre><code>public class ArrayTest02&#123;    public static void main(String[] args)&#123;        //java中的数组是怎么进行拷贝的呢?        // System.arraycopy(5个参数);        //拷贝源        int[] src = &#123;1,11,22,3,4&#125;;        //拷贝目标(拷贝到这个目标数组上)        int[] dest = new int[20];//动态初始化一个长度为20的数组，每一个元素默认值0        //调用JDK System类中的arraycopy方法,来完成数组的拷贝        System.arraycopy(src,srcPos: 1,dest,destPos: 3,length:2);        //遍历目标数组        /*        for(int i=0;i&lt;dest.length;i++)&#123;            System.out.println(dest[i]); //0 0 0 11 22 0 ... 0        &#125;         */        //数组中如果存储的元素是引用，可以拷贝吗?当然可以。        String[] strs = &#123;&quot;he1l1o&quot;,&quot;world! &quot;,&quot;study&quot;,&quot;java&quot;,&quot;oracle&quot;,&quot;mysq1&quot;,&quot;jdbc&quot;&#125;;        String[] newStrs = new String[20];        System.arraycopy(strs,srcPos: 0,newStrs,destPos: 0,strs.length);        for(int i = e; i &lt; newStrs.length; i++)&#123;            System.out.println(newStrs[i]);        &#125;        System.out.println(&quot;=================================&quot;);        Object[] objs = &#123;new Object(), new Object(),new Object()&#125;;        Object[] newObjs = new Object[5];        //这里拷贝的不是拷贝对象，而是拷贝对象的地址。        System.arraycopy(objs,srcPos: 0,newObjs,destPos: 0,objs.length);        for(int i = e; i &lt; newObjs.length; i++)&#123;            System.out.println(newObjs[i]);        &#125;    &#125;&#125;</code></pre><h4>数组存储拷贝Object内存图</h4>    <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1uj5i9giu36o.png" alt=""><br><br> <h3>示例三</h3>    <h4>要点</h4><pre><code>介绍一下java.util.Arrays工具类.所有方法都是静态的，直接用类名调用主要使用的是两个方法: 二分法查找， 排序以后要看文档，不要死记硬背</code></pre> <h4>实例</h4><pre><code>import java.util.Arrays;public class ArraysTest &#123;public static void main(String[] args) &#123;    int[] arr=&#123;112,3,4,56,67,1&#125;;    Arrays.sort(arr);    for (int i =0;i&lt;arr.length;i++)    &#123;        System.out.println(arr[i]);    &#125;    //二分法查照返回下标（没找到返回-1）    int index = Arrays.binarySearch(arr,4);    System.out.println(&quot;该元素的下标是：&quot;+index);    &#125;&#125;</code></pre> <h3>总结</h3><pre><code>1、为什么数组的检索效率高？空间存储上，内存地址是连续的，每个元素占用的空间大小相同，知道首元素的内存地址，通过下标可以计算出偏移量。通过一个数学表达式，就可以快速计算出某个下标位置上元素的内存地址，直接通过内存地址定位，效率非常高.缺点:随机增删效率较低，数组无法存储大数据量。注意:数组最后一个元表的增删效率不受影响因为不会导致其他数组元素的移动。2、一维数组的静态初始化和动态初始化静态初始化:int[] arr = &#123;1,2,3,4&#125;;objeat[] objs = &#123;new object(), new object(), new object()&#125;;动态初始化:int[] arr = new int[4]; // 4个长度，每个元素默认值0Objeot[] objs = new Object[4]; // 4个长度，每个元素默认值nul13、一维数组的遍历for(int 1 = 0; i &lt; arr.length; i++) &#123;    System.out.println(arr[1]);&#125;4、main方法上&quot;String[] args&quot;参数的使用5、数组的拷贝: System.arrayoopy()方法的使用6、对数组中存储引用数据类型的情况，要会画它的内存结构图7、数组工具类Arrays中有很多对数组进行操作的静态方法，直接使用类名调用。</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object类中的方法</title>
      <link href="/2021/09/23/object-lei-zhong-de-fang-fa-jian-jie/"/>
      <url>/2021/09/23/object-lei-zhong-de-fang-fa-jian-jie/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Object类中的方法</title></head><body>    <p>Object是JDK类库的根类，所有类都直接或间接继承了Object，下面简要介绍Object类中常用的的几个方法：String toString()：将对象转化成字符串形式,boolean equal()：判断两个对象是否相等,protected Object clone()：负责对象克隆,int hashCode()：获取对象哈希值,protected void finalize()：垃圾回收器调用...</p><br><h3>toString()</h3><h4>要点</h4><pre><code>1、源代码长什么样?public String toString()&#123;    return this.getClass().getName() + &quot;@&quot; + Integer.toHexString (hashcode());&#125;源代码上toString()方法的默认实现是:返回对象的字符串表示形式：    类名@对象的内存地址转换为十六进制的形式2、建议所有的子类都重写toString()方法,返回你想要的字符串3、System.out.println(引用)输出引用时会自动调用该引用的toString()方法4、String类中默认覆写toString()方法，返回String类对象的内容。5、idea可以直接生成toString()方法（覆写过）</code></pre><br><h3>equals()</h3><h4>要点</h4><pre><code>1、equals方法的源代码public boolean equals(Object obj)&#123;    return (this==obj);&#125;源代码上equals()方法的默认实现是:比较两对象的内存地址是否相等（&quot;==&quot;比较的是内存地址）2、一般equals()方法会被覆写，用来比较两对象的内容是否相等。3、基本数据类型用&quot;==&quot;来比较是否相等，引用数据类型用equal()方法来比较是否相等，&quot;==&quot;比较的是内存地址是否相等。4、String类默认覆写equals()方法，比较String类对象的内容是否相同,判断字符串是否相等最好不要用&quot;==&quot;，要调用字符串对象的equals方法。5、equals()方法的覆写要彻底。    当覆写A类的equals()方法要调用B类的equals()方法，那么B类的equals()方法也要被覆写。    建议所有类的equals()方法都覆写。6、idea可以直接生成equal()方法（覆写过）</code></pre><h4>实例</h4><pre><code>class MyTime&#123;//extends Object&#123;    int year;    int month;    int day;    public MyTime()&#123;&#125;    public MyTime(int year,int month,int day)&#123;        this.year=year;        this.month=month;        this.day=day;    &#125;    //默认的equals方法    /*    public boolean equals(Object obj)&#123;    return (this==obj);    &#125;    */    //覆写equals()方法    public boolean equals(Object obj)&#123;        //如果this和obj保存的内存地址相同则它两指向的堆内存的对象肯定是一个，直接返回true        if(this==obj)&#123;return true;&#125;                //如果obj是空或obj不是MyTime类的，返回false。        if(obj==null || !(obj instanceof MyTime))&#123;return false;&#125;        //程序执行到此说明obj不是null是MyTime类型        //obj向下转型为MyTime类        MyTime t = (MyTime)obj;        //返回this和obj的内容是否相同        return this.year == t.year &amp;&amp; this.month == t.month &amp;&amp; this.day =t.day ;    &#125;</code></pre><br><h3>finalize()</h3><h4>要点</h4><pre><code>1、在Object类中的源代码:protected void finalize() throws Throwable&#123; &#125;GC:负责调用finalize()方法。2、finalize()方法不需要程序员手动调用，JVM的垃圾回收器负责调用这个方法。finalize()只需要重写，重写完将来自动会有程序来调用。3、finalize() 方法的执行时机:当一个java对象即将被垃圾回收器回收的时候，垃圾回收器负责调用4、finalize()方法实际上是SUN公司为java程序员准备的一个时机，垃圾销毁时机。如果希望在对象销毁时机执行一段代码的话，这段代码要写到finalize()方法当中。5、静态代码块的作用是什么?static &#123;...&#125;静态代码块在类加载时刻执行，并且只执行一次。这是一个SUN准备的类加载时机。6、java中的垃圾回收器不是轻易启动的,拉圾太少,或者时间没到,种种条件下,有可能启动,也有可能不启动。</code></pre><h4>实例</h4><pre><code>public class Test&#123;    public static void main (String[] args)&#123;        /*        //创建对象        Person p=new Person();        //怎么把Person对象变成垃圾?        p=null;        */        //多造点垃圾        /*        for(int i=0;i&lt; 100000000;i++)&#123;            Person p = new Person();            p = null;        &#125;        */        for(int i=0;i&lt;1000;i++)&#123;            Person p = new Person();            p=null;            //有一段代码可以建议垃圾回收器启动。            System.gc();//建议启动垃圾回收器。(只是建议，可能不启动，也可能启动。启动的概率较大        &#125;    &#125;&#125;    //项目开发中有这样的业务需求:所有对象在JVM中被释放的时候，请记录一下释放时间!!!    //记录对象被释放的时间点，这个负责记录的代码写到哪里?写到finalize()方法中       class Person&#123;    //重写finalize()方法    //Person类型的对象被垃圾回收器回收的时候，垃圾回收器负责调用:p.finalize();    protected void finalize()throws Throwable&#123;        //this代表当前对象        System.out.println (this +&quot;即将被销毁!&quot;);    &#125;&#125;</code></pre><br><h3>hashCode()</h3><h4>要点</h4><pre><code>1、在Object中的hashCode方法源码是怎样的?    public native int hashcode();    这个方法不是抽象方法,带有native关键字，底层调用c++程序。2、hashCode()方法返回的是哈希码:    实际上就是一个java对象的内存地址，经过哈希算法，得出的一个值。不多讲，以后再说，查文档看详细用法。</code></pre><h3>clone()</h3><h4>要点</h4>不多讲，用的少，查文档看详细用法（可以了解一下深克隆浅克隆）。</body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匿名内部类</title>
      <link href="/2021/09/23/nei-bu-lei/"/>
      <url>/2021/09/23/nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>匿名内部类</title></head><body><h3>内部类</h3><h4>要点</h4><pre><code>1、什么是内部类?内部类:在类的内部又定义了一个新的类。被称为内部类。2、内部类的分类:    静态内部类:类似于静态变量    实例内部类:类似于实例变量    局部内部类:类似于局部变量3、使用内都类编写的代码,可读性很差。能不用尽量不用。4、匿名内都类是局部内部类的一种。    因为这个类没有名字而得名,叫做匿名内都类。5、学习匿名内部类主要是让大家以后在阅读别人代码的时候，能够理解。   匿名内部类有两个缺点:    缺点1:太复杂，太乱，可读性差    缺点2:类没有名字，不能重复使用，只能用一次。</code></pre><h4>实例一</h4><pre><code>class Test&#123;    //静态变量    static String country;    //该类在类的内部，所以称为内部类    //由于前面有static，所以称为”静态内部类”    static class Inner1&#123;&#125;    //实例变量int age;    //该类在类的内部,所以称为内部类    //没有static叫做实例内部类    class Inner2&#123;&#125;    //方法    public void dosome()&#123;        //局部变量        int i=100;        //该类在类的内部,所以称为内部类/局部内部类。        class Inner3&#123;&#125;    &#125;    public void doother&#123;        //dosome()方法中的局部内部类Inner3，在doother()中不能用    &#125;    //main方法,入口    public static void main(String[] args)&#123;        MyMath mm = new MyMath();        //使用匿名内部类        //这里表面看上去好像是接口可以直接new了，实际上后面的&#123;&#125;代表了对接口的实现        mm.mySum(new Compute()&#123;            public int sum(int a, int b)&#123;                return a+b;            &#125;        &#125;,200,300);    &#125;&#125;//负责计算的接口interface Compute&#123;    int sum(int a,int b);&#125;//数学类class MyMath&#123;    public void mySum(Compute c, int x, int y)&#123;        int retvalue = c.sum(x,y);        System.out.println(x + &quot;+&quot; + y + &quot;=&quot; + retvalue);&#125;</code></pre><h4>实例二<h4><pre><code>public class MyClass &#123;private  static  class InnerClass&#123;    //静态方法    public  static  void m1()&#123;        System.out.println(&quot;静态内部类的m1方法执行&quot;);    &#125;    //实例方法    public  void  m2()&#123;        System.out.println(&quot;静态内部类中的实例方法执行&quot;);    &#125;&#125;    public static void main(String[] args) &#123;        //静态方法执行直接通过类名调用        MyClass.InnerClass.m1();        //实例方法执行要创建对象        MyClass.InnerClass mi=new MyClass.InnerClass();        mi.m2();        //Set集合中存储对象类型为InnerClass        Set&lt;MyClass.InnerClass&gt; set1=new HashSet&lt;&gt;();        //Set集合中存储对象类型为String        Set&lt;String&gt; set2=new HashSet&lt;&gt;();    &#125;&#125;</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈java接口</title>
      <link href="/2021/09/15/qian-tan-java-jie-kou/"/>
      <url>/2021/09/15/qian-tan-java-jie-kou/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>浅谈java接口</title></head><body>    <h3>示例一</h3>    <h4>要点</h4><pre><code>    接口:    1、接口也是一种&quot;引用数据类型&quot;。编译之后是一个class字节码文件。    2、接口是完全抽象的。（抽象类是半抽象）或者也可以说接口是特殊的抽象类。    3、接口定义: [修饰符列表] interface 接口名&#123;&#125;    4、接口支持多继承,一个接口可以继承多个接口,    5、接口中只包含两部分内容：常量+抽象方法。    6、接口中所有的元素都是public修饰的。（都是公开的。）    7、接口中的抽象方法定义时:public abstract修饰符可以省略。    8、接口中的方法都是抽象方法，所以接口中的方法不能有方法体。    9、接口中的常量的public static final可以省略。</code></pre><h4>实例</h4><pre><code>public class Test01&#123;    public static void main (String[] args)(    //访问接口的常量。    System.out.println (MyMath.PI);    //常量能重新赋值吗?    //错误:无法为最终变量PI分配值    //MyMath.PI = 3.1415928;    //错误:无法为最终变量k分配值    //MyMath.k = 111;   &#125;&#125;//定义接口interface A&#123;&#125;//接口支持继承interface B extends A&#123;&#125;//一个接口可以继承多个接口(支持多继承)interface C extends A, B&#123;&#125;//我的数学接口interface MyMath&#123;    //常量    //public static final double PI= 3.1415926;    //public static final可以省略吗?    double PI=3.1415926;    //k是常量    //接口中随便写一个变量就是常量    //常量:值不能发生改变的值    int k=100;    //抽象方法    //public abstract int sub(int a, int b);    //接口当中既然都是抽象方法，那么在编写代码的时候，public abstract可以省略吗?可    int sub(int a, int b);    //接口中的方法可以有方法体吗?    //错误:接口抽象方法不能带有主体    /*    void dosome()&#123;&#125;    */&#125; </code></pre><h3>示例二</h3><h4>要点</h4><pre><code>接口的基础语法:1、类和类之间叫做继承,类和接口之间叫做实现。别多想:你仍然可以将&quot;实现&quot;看做&quot;继承&quot;    继承使用extends关键字完成    实现使用implements关键字完成2、当一个非抽象的类实现接口的话，必须将接口中所有的抽象方法全都实现(覆盖、重写)3、接口中不能有方法体4、extends和implement可以共存，extends在前，implements在后。</code></pre><h4>实例</h4><pre><code>public class Test02&#123;    public static void main(String[] args)&#123;    //错误:MyMath是抽象的 无法实例化    //new MyMath();    //能使用多态吗?可以。    //Animal a = new Cat();    //父类型的引用指向子类型的对象    MyMath mm = new MyMathImp1();    //调用接口里面的方法(面向接口编程)    int result1=mm.sum(10,20);    System.out.println(result1);    int resu1t2 = mm.sub (20,10);    System.out.println (result2);&#125;&#125;//特殊的抽象类,完全抽象的,叫做接口interface MyMath&#123;    double PI=3.1415926;    int sum (int a, int b);    int sub (int a, int b);&#125;//这样没问题/*abstract class MyMathImpl implements MyMath&#123;&#125;*///编写一个类(这个类是一个&quot;非抽象&quot;的类)//这个类的名字是随意的。//错误:MyMathImpl不是抽象的，并且未覆盖MyMath中的抽象方法sub(int,int)/*class MyMathImpl implements MyMath&#123;&#125;*///修正class MyMathImpl implements MyMath &#123;    //错误:正在尝试分配更低的访问权限 以前为public    /*    int sum(int a, int b)&#123;        return a+b;    &#125;    */    //重写/覆盖/实现接口中的方法(通常叫做实现）    public int sum(int a, int b)&#123;        return a+b;    &#125;    public int sub (int a,int b)&#123;        return a = b;    &#125;&#125;</code></pre><h3>示例三</h3><h4>要点</h4><pre><code>接口和接口之间支持多继承，那么一个类可以同时实现多个接口吗?    对于计算机来说，一个机箱上有多个接口，一个接口是接键盘的,    一个接口是接鼠标的，一个接口是接电源的，一个接口是接显示器的.....一个类可以同时实现多个接口。这种机制弥补了java中的哪个缺陷?    java中类和类只支持单继承。实际上单继承是为了简单而出现的，现实世界中存在多继承,java中的接口弥补了单继承带来的缺陷。    接口A和接口B虽然没有继承关系，但是写代码的时候，可以互转。编译器没意见。但是运行时可能出现:ClassCastException之前有一个结论:    无论向上转型还是向下转型，两种类型之间必须要有继承关系，没有继承关系编译器会报错。(这句话不适用在接口方面)    最终实际上和之前还是一样，需要加:instanceof运算符进行判断。    向下转型养成好习惯。转型之前先if+instanceof进行判断。使用接口可以使用多态（父类型引用指向子类型对象）</code></pre><h4>实例</h4><pre><code>public class Test03&#123;    public static void main (String[] args)(    //多态该怎么用呢?    //都是父类型引用指向子类型对象    A a=new D();    //a.m2();    //编译报错。A接口中没有m2()方法。    B b=new D();    C c=new D();    //这个编译没问题,运行也没问题。    //调用其他接口中的方法,你需要转型(接口转型)    B b2 = (B)a;    b2.m2();    //直接向下转型为D可以吗?可以    D d=(D)a;    d.m2();    M m=new E();    //经过测试:接口和接口之间在进行强制类型转换的时候，没有继承关系，也可以强转    //但是一定要注意,运行时可能会出现ClassCastException异常。    //编译没问题,运行有问题。    //K k=(K)m;    if(m instanceof K)&#123;        K k=(K)m;    &#125;&#125;interface K&#123;&#125;interface M&#123;&#125;class E implements M&#123;&#125;interface X&#123;&#125;interface Y&#123;&#125;interface Z extends x,Y&#123;//接口和接口支持多继承。&#125;interface A&#123;    void m1();&#125;interface B&#123;    void m2 ();&#125;interface C&#123;    void m3();&#125;  //实现多个接口,其实就类似于多继承。class D implements A,B,C&#123;//实现A接口的m1()public void m1()&#123;&#125;//实现B接口中的m2()public void m2()&#123;System.out.println( &quot;m2 .... &quot;);&#125;//实现接口c中的m3()public void m3()&#123;&#125;&#125;</code></pre><h3>接口的作用</h3><h4>要点</h4><pre><code>面向接口编程,可以降低程序的耦合度，提高程序的扩展力。符合oce开发原则。接口的使用离不开多态机制。（接口+多态才可以达到降低耦合度。)任何一个接口都有调用者和实现者，接口可以将调用者和实现者解耦合，调用者面向接口调用，实现者面向接口编写实现。以后进行大项目的开发,一般都是将项目分离成一个模块一个模块的，模块和模块之间采用接口衔接。降低耦合度。分析:中午去饭馆吃饭,这个过程中有接口吗?接口是抽象的。菜单是一个接口。（菜单上有一个抽象的照片:西红柿妙鸡蛋)谁面向接口调用。(顾客面向菜单点菜，调用接口。)谁负责实现这个接口。（后台的厨师负责把西红柿鸡蛋做好，是接口的实现者。这个接口有什么用呢?这个饭馆的&quot;菜单&quot;，让&quot;顾客&quot;和&quot;后厨&quot;解耦合了顾客不用找后厨,后厨不用找顾客。他们之间完全依靠这个抽象的菜单沟通.接口是不是完全的?是。而我们以后正好要求,面向抽象编程。面向抽象编程这句话以后可以修改为:面向接口编程。有了接口就有了可插拔。可插拔表示扩展力很强。不是焊接死的。分析：主板和内存条之间有插槽，这个插槽就是接口，内存条坏了，可以重新买一个换下来。这叫做高扩展性。(低耦合度。)接口在现实世界中是不是到处都是呢?螺栓和螺母之间有接口灯泡和灯口之间有接口笔记本电脑和键盘之间有接口（usb接口，usb接口是不是某个计算机协会制定的协接口有什么用?扩展性好。可插拔。接口是一个抽象的概念</code></pre><h4>实例</h4> <pre><code>//中餐厨师//实现菜单上的菜//厨师是接口的实现者。public class ChinaCooker implements FoodMenu&#123;    //西红柿炒蛋    public void shiZiChaoJiDan()&#123;        System.out.println(&quot;中餐师傅做的西红柿炒鸡蛋，东北口味! &quot;);    &#125;    //鱼香肉丝    public void yuXangRouSi()&#123;        System.out.println(中餐师傅做的鱼香肉丝，东北口味!&quot;);    &#125;&#125;//西餐厨帅//实现菜单上的菜//厨师是接口的实现者。public class AmericCooker imp1ements FoodMenu&#123;//西红柿炒蛋    public void shiZiChaoJiDan()&#123;        System.out.println(&quot;西餐师傅做的西红柿炒鸡蛋!&quot;);    &#125;    //鱼香肉丝    public void yuXiangRouSi()&#123;        System.out.println(&quot;西餐师傅做的鱼香肉丝!&quot;);    &#125;&#125;//顾客public class Customer&#123;    //顾客手里有一个莱单    // Customer has a FoodMenu!（这句话什么意思:顾客有一个菜单)    //记住:以后凡是能够使用has a来描述的，统一以属性的方式存在。    //面向抽象编程,面向接口编程。降低程序的耦合度，提高程序的扩展力。    private FoodMenu foodMenu;    //如果以下这样写,就表示写死了    //中餐厨师    //ChinaCooker cc;    //西餐厨师    //AmericCooker ac;    //构造方法    public Customer()&#123;&#125;    public Customer(FoodMenu foodMenu)&#123;        this.foodMenu=foodMenu;    &#125;    //setter and getter(这里就不写上来了)    //提供一个点菜的方法    public void order()&#123;        //先拿到菜单才能点菜        //调用get方法拿菜单。        //FoodMenu fm = this.getFoodMenu();        //也可以不调用get方法，因为在本类中私有的属性是可以访问        foodMenu.shiZiChaoJiDan();        foodMenu.yuXiangRouSi();        &#125;    &#125;/*    Cat is a Animal，但凡满足is a的表示都可以设置为继承。    Customer has a FoodMenu，但凡是满足has a的表示都以属性的形式存在。*//*接口:菜单,抽象的*/public interface FoodMenu&#123;        //西红柿炒蛋        void shiZiChaoJiDan();        //鱼香肉丝        void yuXiangRouSi();&#125;public class Test&#123;    public static void main(String[] args)&#123;    //创建厨师对象    //FoodMenu cooker1 = new ChinaCooker();    FoodMenu cooker1 = new AmericCooker();    //创建顾客对象    Customer customer = new Customer(cooker1);    //顾客点菜    customer.order();    &#125;&#125;</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参数传递</title>
      <link href="/2021/09/14/qian-tan-java-chou-xiang/"/>
      <url>/2021/09/14/qian-tan-java-chou-xiang/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>java抽象</title></head><body>    <h3>示例一</h3>    <h4>要点</h4><pre><code>抽象类:1、什么是抽象类?类和类之间具有共同特征，将这些共同特征提取出来，形成的就是抽象类。类本身是不存在的,所以抽象类无法创建对象（无法实例化）2、抽象类属于什么类型?    抽象类属于引用教据类型。3、抽象类怎么定义?    语法:    [修饰符列表] abstract class类名&#123;        类体;    &#125;4、抽象类是无法实例化的，无法创建对象的，所以抽象类是用来被子类继承的。5、final和abstract不能联合使用，这两个关键字是对立的。6、抽象类的子类可以是抽象类。7、抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法是供子类使用的。8、抽象类关联到一个概念:抽象方法。什么是抽象方法呢?抽象方法表示没有实现的方法，没有方法体的方法。例如:public abstract void dosome ();8、抽象方法特点是:    特点1:没有方法体,以分号结尾。    特点2:前面修饰符列表中有abstract关键字。9、抽象类中不一定有抽象方法，抽象方法必须出现在抽象类中。</code></pre><h4>实例</h4><pre><code>public class AbstractTest01&#123;    public static void main (String[] args)&#123;        //错误:Account是抽象的，无法实例化        //Account act = new Account();    &#125;&#125;//银行账户类//错误:非法的修饰符组合:abstract和final/*    final abstract class Account&#123;&#125;    */    abstract  class Account&#123;&#125;    /*    public Account()&#123;&#125;    public Account (String s)&#123;&#125;    */    //非抽象方法    public void doother()&#123;&#125;    //抽象方法    public abstract void withdraw ();&#125;//子类继承抽象类,子类可以实例化对象/*class CreditAccount extends Account&#123;    public CreditAccouht()&#123;        super();    &#125;&#125;*///抽象类的子类可以是抽象类吗?可以/*abstract class CreditAccount extends Account&#123;&#125;*/</code></pre><h3>示例二</h3><h4>要点</h4><h4>实例</h4><pre><code>public class AbstractTest02&#123;    public static void main (String[] args)&#123;    //能不能使用多态?    //父类型引用指向子类型对象。    Animal a = new Bird();//向上转型。(自动类型转换)    //这就是面向抽象编程。    //以后你都是调用的a.xxx    //a的类型是Animal, Animal是抽象的    //面向抽象编程，不要面向具体编程，降低程序的耦合度，提高程序的扩展力。    //这种编程思想符合OCP原则。    /*    a.move();    &#125;&#125;//动物类（抽象类)abstract class Animal&#123;    //抽象方法    public abstract void move();&#125;//子类(非抽象的)//错误:Bird不是抽象的，并且未覆盖Animal中的抽象方法move();/*class Bird extends Animal&#123;&#125;*/class Bird extends Animal&#123;//需要将从父类中继承过来的抽象方法进行覆盖/重写，或者也可以叫做实现&quot;//把抽象的方法实现了。    public void move()&#123;        System.out.println (&quot;鸟儿在飞翔!&quot;);&#125;&#125;//如果Bird是抽象类的话，那么这个Animal中继承过来的抽象方法也可以不去重写/覆盖/实现。/*    abstract class Bird extends Animal&#123;&#125;*/</code></pre><p><br><br></p><h3>面试题</h3><pre><code>面试题（判断题):java语言中凡是没有方法体的方法都是抽象方法。    不对，错误的。    Object类中就有很多方法都没有方法体，都是以&quot;;&quot;结尾的，但他们都不是抽象方法，例如:    public native int hashCode();    这个方法底层调用了C++写的动态链接库程序。    前面修饰符列表中没有: abstract。有一个native,表示调用JVM本地程序。</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>super关键字</title>
      <link href="/2021/09/13/super-guan-jian-zi/"/>
      <url>/2021/09/13/super-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Java中的super关键字</title></head><body><h3>示例一</h3><h4>要点</h4><pre><code>1、super是一个关键字,全部小写。2、super和this对比着学习。    this:        this能出现在实例方法和构造方法中        this的语法是:&quot;this.&quot;、&quot;this()&quot;        this不能使用在静态方法中        this.大部分情况下是可以省略的        this.什么时候不能省略呢?在区分局部变量和实例变量的时候不能省略。            publie void setName(String name)&#123;                this.name=name;            &#125;        this()只能出现在构造方法第一行，通过当前的构造方法去调用&quot;本类&quot;中其它的构造方法,目的是:代码复用。    super:        super能出现在实例方法和构造方法中。        super的语法是:&quot;super.&quot;,&quot;super()&quot;        super不能使用在静态方法中。        super.大部分情况下是可以省略的。        super.什么时候不能省略呢?在区分局部变量和实例变量的时候不能省略。        super()只能出现在构造方法第一行，通过当前的构造方法去调用父类”中的构造方法，目的是:创建子类对象的时候，先初始化父类型特征。        </code></pre><h4>实例</h4><pre><code>public class SuperTest01&#123;    public static void main(String[] args)&#123;    //创建子类对象        new B();    &#125;&#125;    class A extends Object&#123;//所有类默认继承Object类        //建议手动的将一个类的无参数构造方法写出来。        public A()&#123;            //super(); //这里也是默认有这一行代码的。            System.out.println (&quot;A类的无参数构造方法!&quot;);        &#125;        //一个类如果没有手动提供任何构造方法，系统会默认提供一个无参数构造方法。        //一个类如果手动提供了一个构造方法，那么无参数构造系统将不再提供。        public A(int i)&#123;        //super();        System.out.println(&quot;A类的有参数构造方法(int)&quot;);        &#125;    &#125;     class B extends A&#123;        /*        public B()&#123;            super();            System.out.println(&quot;B类的无参数构造方法!&quot;);        &#125;        */        public B()&#123;            this(&quot;zhangsan&quot;);            //调用父类中有参数的构造方法            //super(123);            System.out.println(&quot;B类的无参数构造方法!&quot;);        &#125;        public B(String name)&#123;            super();            System.out.println(&quot;B类的有参数构造方法(string) &quot;);        &#125;    &#125;        </code></pre><h3>示例二</h3><h4>要点</h4><pre><code>1、举个例子:在恰当的时间使用 super(实际参数列表);2、注意:在构造方法执行过程中一连串调用了父类的构造方法，父类的构造方法又继续向下调用它的父类的构造方法，但是实际上对象只创建了一个。3、思考:&quot;super(实参)&quot;到底是干哈的?    super(实参)的作用是:初始化当前对象的父类型特征。并不是创建新对象。实际上对象只创建了1个4、super关键字代表的就是当前对象中的父类型特征。</code></pre><h4>实例</h4><pre><code>public class SuperTest02&#123;    public static void main(String[] args)&#123;        CreditAccount ca1 = new CreditAccount();        System.out.println(ca1.getActno() + &quot;,&quot;+ ca1.getBalance()+ &quot;,&quot; + ca1.getCredit())        CreditAccount ca2 = new CreditAccount(&quot;1111&quot;,10000.0,0.999);        System.out.println (ca2.getActno() + &quot;,&quot; + ca2.getBalance () + &quot;,&quot; +ca2.getCredit())    &#125;&#125;//账户class Account&#123;    //属性    private String actno;    private double balance;    //构造方法    public Account()&#123;    /*        //默认初始化：        super();        this.actno =null;        this.balance = 0.0;    */        &#125;    public Account (String actno,double balance)&#123;        this.actno=actno;        this.balance=balance;    &#125;&#125;//信用账户class CreditAccount extends Account&#123;    //属性:信誉度(诚信值)    //子类特有的一个特征,父类没有    private double credit;    //构造方法    //分析以下程序是否存在编译错误????    public CreditAccount(String actno，double balance，double credit)&#123;        //私有的属性,只能在本类中访问        /*        this.actno = actno;        this.balance = balance;        */        //以上两行代码在恰当的位置,正好可以使用:super(actno,balance);        //通过子类的构造方法调用父类的构造方法。        super(actno, balance);        this.credit=credit;    &#125;    //提供无参数的构造方法    public CreditAccounto&#123;&#125;&#125;</code></pre><h4>内存图</h4>    <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4xa24ll3yu80.webp" alt=""><br><h3>示例三</h3><h4>要点</h4><pre><code>1、&quot;this.&quot;和&quot;super.&quot;大部分情况下都是可以省略的2、this．什么时候不能省略?    public void setName (string nane)&#123;        this.name=name;    &#125;3、super.什么时候不能省略?    父中有，子中又有，如果想在子中访问&quot;父的特征&quot;，super．不能省略。</code></pre><h4>实例</h4><pre><code>public class SuperTest03&#123;    public static void main(String[] args)&#123;        Vip v=new vip(&quot;张三&quot;);        v.shopping();    &#125;&#125;class Customer&#123;    String name;    public Customer()&#123;&#125;    public Customer(String name)&#123;        super();        this.name=name;    &#125;    public void dosome()&#123;        System.out.println (this.name +&quot; do some! &quot;);        System.out.println (name + &quot; do some! &quot;);        //错误:找不到符号        //System.out.println (super.name + &quot; do some ! &quot;);    &#125;&#125;class Vip extends Customer&#123;    //假设子类也有一个同名属性    //java中允许在子类中出现和父类一样的同名变量/同名属性。    String name; //实例变量    public vip()&#123;&#125;    public Vip(String name)&#123;        super(name);        //this.name = null;    &#125;    public void shopping()&#123;    /*    java是怎么来区分子类和父类的同名属性的?    this.name:当前对象的name属性    super.name:当前对象的父类型特征中的name属性。    */    System.out.println(this.name +&quot;正在购物!&quot;);// null正在购物    System.out.println(super.nane + &quot;正在购物!&quot;);//张三正在购物    System.out.println (name +&quot;正在购物!&quot;);//nul正在购物    &#125;&#125;    </code></pre><h4>内存图</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.rokj8cefohs.webp" alt=""><br><h3>示例四</h3><h4>要点</h4><pre><code>super不是引用。super也不保存内存地址，super也不指向任何对象。super只是代表当前对象内部的那一块父类型的特征在父和子中有同名的属性,或者说有相同的方法,如果此时想在子类中访问父中的数据,必须使用&quot;super.&quot;加以区分,子类中不能通过super.访问父类中的私有属性方法super.属性名【访问父类的属性】super.方法名(实参)【访问父类的方法】super(实参)【调用父类的构造方法】</code></pre><h4>实例</h4>  <pre><code>public class SuperTest04&#123;    //实例方法    public void dosome()&#123;        System.out.println(this); //SuperTest0602f92e0f4        //输出&quot;引用&quot;的时候,会自动调用引用的toString()方法:System.out.println(this.toString());            //编译错误:需要&quot;.&quot; super不是引用        //System.out.println(super);    &#125;    // this和super不能使用在static静态方法中    /*    public static void doother()&#123;        System.out.println(this);        System.out.println(super.xxx);    &#125;    */    //静态方法,主方法    public static void main(String[] args)&#123;        SuperTest04 st = new SuperTest04();        st.dosome();   &#125;</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final关键字</title>
      <link href="/2021/09/12/final-guan-jian-zi/"/>
      <url>/2021/09/12/final-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>final关键字</title></head><body>    <h3>要点</h3><pre><code>关于java语言当中final关键字:    1、final是一个关键字,表示最终的,不可变的。    2、final修饰的类无法被继承    3、final修饰的方法无法被覆盖    4、final修饰的变量&quot;—旦&quot;赋值之后,不可重新赋值【不可二次赋值】    5、final修饰的实例变量,必须手动赋值,不能采用系统默认值    6、final修饰的引用,一旦指向某个对象之后，不能再指向其它对象，那么被指向的对象无法被垃圾回收器回收。        final修饰的引用虽然指向某个对象之后不能指向其它对象，但是所指向的对象内部的内存是可以被修改的。    7、final修饰的实例变量,一般和static联合使用,被称为常量。</code></pre><br>    <h3>示例</h3>    <h4>示例一</h4><pre><code>public class FinalTest01&#123;    public static void main(String[] args)&#123;        int i = 10;        System.out.println(i);        i=20;        System.out.println (i);        final int k=100;        //编译错误:无法为最终变量k分配值        //k = 200;        final int m;        m=200;        //编译错误:无法为最终变量n分配值        //m = 300;    &#125;&#125;</code></pre><h4>示例二</h4><pre><code>public class FinalTest02 &#123;    //成员变量之实例变量    //实例变量有默认值+final修饰的变量一旦赋值不能重新赋值    //综合考虑，java语言最终规定实例变量使用final修饰之后，必须手动赋值,不能采用系统墅认值。    //final int age; //编译错误    //第一种解决方案    final int age = 10;    //第二种解决方案    final int num;    public FinalTest02()&#123;        this.nun=200;    &#125;    //以上的两种解决方案:其实本质上就是一种方式，都是在构造方法执行过程当中给实例变量赋值。    public static void main (String[] args) &#123;        final int a;        a = 100;        //不可二次赋值        //a = 200;    &#125;&#125;  </code></pre><h4>示例三</h4><pre><code>public class FinalTest03 &#123;    public static void main (String[] args) &#123;    //创建用户对象    User u = new User(100); // User u=0x1234;    //又创建了一个新的User对象    //程序执行到此处表示以上对象已变成垃圾数据，等待垃圾回收器的回收。    u=new User(200); //u = 0×2586;    //创建用户对象    final User user=new User(30);    //user = new User(50);//final修饰的引用，一旦指向某个对象之后，不能再指向其它对象，那么被指向的对象无法被垃圾回收器回收。    user.id = 50;//final修饰的引用虽然指向某个对象之后不能指向其它对象，但是所指向的对象内部的内存是可以被修改的。    /*    final int i=10;    i=20;    */    &#125;&#125;</code></pre><h4>示例四</h4><pre><code>public class FinalTesto4 &#123;    public static void nain (string[] args)&#123;        System.out.println(Chinese.GUO_JI);        Systen.out.println( &quot;圆周率:&quot; + Math.PI);    &#125;&#125;class Math &#123;    public static final double PI = 3.1415926;&#125;//中国人class Chinese&#123;    //国籍    //需求:每一个中国人的国籍都是中国，而且国籍不会发生改变，为了防止国籍被修改，建议加final修饰。    //final修饰的实例变量是不可变的，这种变量一般和static联合使用，被称为&quot;常量”    //常量的定义语法格式:    //public static final类型常量名=值;    //java规范中要求所有常量的名字全部大写,每个单词之问使用下划线连接    //static final String country =&quot;中国&quot;;    public static final String GUO_JI = &quot;中国&quot;;</code></pre><p>}</p></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static关键字</title>
      <link href="/2021/09/08/static-guan-jian-zi/"/>
      <url>/2021/09/08/static-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Java中的static关键字</title></head><body><h3>示例一</h3><h4>要点</h4><pre><code>什么时候成员变量声明为静态变量呢?所有对象都有这个属性,并且所有对象的这个属性的值是一样的,建议定义为静态变量，节省内存的开销。静态变量在类加载的时候初始化，内存在方法区中开辟。访问的时候不需要创建对象，直接使用&quot;类名.静态变量名”的方式访问。关于java中的static关键字:1、static英语单词翻译为静态的2、static修饰的方法是静态方法3、static修饰的变量是静态变量4、所有static修饰的元素都称为静态的，都可以使用&quot;类名.&quot;的方式访问，当然也可以用引用.的方式访问【但不建议】5、static修饰的所有元素都是类级别的特征,和具体的对象无关。</code></pre><h4>实例</h4><pre><code>public class Chinese&#123;    //身份证号【每一个对象的身份证号不同】    //实例变量    String id;    //姓名【每一个对象的姓名不同】    //实例变量    String name ;    //国籍【所有对象国籍一样,这种特征属于类级别的特征,可以提升为整个模板的特征，可以在变量前添加static关键字修饰】    //静态变量，静态变量在类加载的时候初始化,不需要创建对象,内存就开辟了。    //静态变量存储在方法区内存当中。    static String country =&quot;中国&quot;:    //构造函数    public Chinese()&#123;        /*        this.id = null;        this.nane =  null;        this.country =null;        */ &#125;public Chinese(String id, String name)&#123;    this.id = id;    this.name = name;  &#125;&#125;public class ChineseTest&#123;    public static void main(String[] args)&#123;        //创建中国人对象1        Chinese zhangsan =new Chinese(&quot;1&quot;,&quot;张三&quot;);        System.out.println (zhangsan.id + &quot;,&quot; + zhangsan.name + &quot;, &quot; + Chinese.country);        //创建中国人对象2        Chinese lisi =new Chinese(&quot;2&quot;,&quot;李四&quot;);        System.out.println(1isi.id + &quot;,&quot; + lisi.name + &quot;,&quot; + Chiniese.country);        //创建中国人对象3        Chinese wangwu = new Chinese (&quot;3&quot;,&quot;王五&quot;);        System.out.println (wangwu.id +&quot;,&quot; + wangwu.name + &quot;,&quot; + Chinese.country);        System.out.println (Chinese.country);        System.out.println (zhangsan.country);        zhangsan= null;        //所有静态的数据都是可以采用类名.,也可以采用引用.，但是建议采用类名.的方式访问。        //采用引用.前方式访问的时候,即使引用是null,也不会出现空指针异常。因为访问类的数据不需要对象的存在。        System.out.println (zhangsan.country);        System.out.println(zhangsan.country);    &#125;</code></pre><h4>内存图</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4qcy0rolvim8.png" alt=""><br><h3>示例二</h3><h4>要点</h4><pre><code>可以使用static关键字来定义&quot;静态代码块&quot;:1、语法格式:    static&#123;        java语句;    &#125; 2、静态代码块在类加载时执行,并且只执行一次。3、静态代码块在一个类中可以编写多个,并且遵循自上而下的顺序依次执行。4、静态代码块的作用什么?怎么用?用在哪儿?什么时候用?    这当然和具体的需求有关，例如项目中要求在类加载的时刻执行代码完成日志的记录。那么这段记录日志的代码就可以编写到静态代码块当中,完成日志记录。    静态代码块是java为程序员准备一个特殊的时刻，这个特殊的时刻被称为类加载时刻。若希望在此刻执行一段特殊的程序,这段程序可以直接放到静态代码块当中。5、通常在静态代码块当中完成预备工作,先完成数据的准备工具，例如:初始化连接池,解析XM配器文件....</code></pre><h4>实例</h4><pre><code>public class staticTest01 &#123;    static&#123;        System.out.println(&quot;类加载--&gt;1&quot;);    &#125;    static&#123;        System.out.println(&quot;类加载--&gt;2&quot;);    &#125;    static&#123;        System.out.println(&quot;类加载--&gt;3&quot;);    &#125;    public static void main (String[] args) &#123;        System.out.println ( &quot;main begin&quot;);    &#125;&#125;</code></pre><h3>示例三</h3><h4>要点</h4><pre><code>实例语句块/代码块【了解内容,使用的非常少】    1、实例代码块可以编写多个,也是遵循自上而下的顺序依次执行    2、实例代码块在构造方法执行之前执行,构造方法执行一次,实例代码块对应执行一次。    3、实例代码块也是java语言为程序员准备一个特殊的时机，这个特殊时机被称为:对象初始化时机。</code></pre><h4>实例</h4><pre><code>public class Test &#123;    //构造函数    public Test()&#123;        System.out.println ( &quot;Test类的缺省构造器执行&quot;);    &#125;    //实例代码块    &#123;        System.out.println (1);    &#125;    //实例代码块    &#123;        System.out.println (2);    &#125;    //实例代码块    &#123;        System.out.println (3) ;    &#125;//主方法public static void main(String[] args)&#123;    System.out.println (&quot;main begin&quot;);    new Test();    new Test();&#125;&#125;    </code></pre><p>运行效果：</p><pre><code>main begin123Test类的缺省构造器执行123Test类的缺省构造器执行</code></pre><h3>示例四</h3><h4>要点</h4><pre><code>方法什么时候定义为静态的?    方法描述的是动作,当所有的对象执行这个动作的时候，最终产生影响是一样的,那么这个动作已经不再属于某一个对象动作了,可以将这个动作提升为类级别的动作,模板级别的动作。静态方法中无法直接访问实例变量和实例方法。大多数方法都定义为实例方法，一般一个行为或者一个动作在发生的时候，都需要对象的参与。但是也有例外，例如:大多数&quot;工具类&quot;中的方法都是静态方法，因为工具类就是方便编程,为了方便方法的调用,自然不需要new对象是最好的。</code></pre><h4>实例</h4>   <pre><code>public class StaticTest &#123;    //实例变量    int i=100;    //实例方法    public void dosome()&#123;&#125;    //静态方法【静态上下文】    public static void main(String[] args) &#123;        //System.out.printin (i);        //doSome ();        staticTest st = new staticTest();        System.out.println (st.i);        st.dosome ();    &#125;&#125;</code></pre><br><h3>总结</h3><pre><code>class类&#123;    静态代码块;    实例代码块;        静态变量    实例变量    构造方法    静态方法    实例方法&#125;</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java三大特性</title>
      <link href="/2021/09/07/java-san-da-te-xing-feng-zhuang-ji-cheng-duo-tai/"/>
      <url>/2021/09/07/java-san-da-te-xing-feng-zhuang-ji-cheng-duo-tai/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>java三大特性</title></head><body><p><strong>面向对象包括三大特征:封装，继承，多态</strong> </p><h3>封装机制</h3><h4>要点</h4><pre><code>封装的好处:1、封装之后，对于那个事物来说,看不到这个事物比较复杂的那一面，只能看到该事物简单的那一面。复杂性封装,对外提供简单的操作入口。照相机就是一个很好的封装的案例,照相机的实现原理非常复杂,但是对于使用照相机的人来说,操作起来是非常方便的是非常便捷的。还有像电视机也是封装的,电视机内存实现非常复杂，但是对于使用者来说不需要关心内部的实现原理,只需要会操作遥控器就行。2、封装之后才会形成真正的&quot;对象”,真正的”独立体”3、封装就意味着以后的程序可以重复使用。并且这个事物应该适应性比较强,在任何场合都可以使用。4、封装之后,对于事物本身,提高了安全性。【安全级别高】封装的步骤:1、所有属性私有化，使用private关键字进行修饰,private表示私有的，修饰的所有数据只能在本类中访问。2、对外提供简单的操作入口，也就是说以后外部程序要想访问属性，必须通过这些简单的入口进行访问:对外提供两个公开的方法,分别是set方法和get方法想修改属性,调用set方法想读取属性,调用get方法3、set方法的命名规范示例:public void setAge (int a)&#123;    age = a;&#125;4、get方法的命名规范示例:public int getAge ()&#123;    return age;&#125;5、get set函数和构造方法编译器都可以自动生成</code></pre><h4>代码示例</h4><pre><code>public class UserTest &#123;    public static void main (String[] args) &#123;    //创建User对象        User user =new User();        //age=18;        //编译报错,age属性私有化,在外部程序中不能直接访问        //修改后age属性非常的安全,但是有点太安全了。        //对于目前的程序来说,age属性彻底在外部访问不到了。        // System.out.println (user.age);        //修改        user.setAge(-100);//读取        System.out.println (user.getAge ());    &#125;&#125;public class User &#123;    //属性私有化    private int age;    //set方法没有返回值,因为set方法只负责修改数据    /*    public void setAge (int age)&#123;        age = age;//java有就近原则,这里其实并没有给age属性赋值，这里的age都是局部变量age    */    //setter    public void setAge (int a)&#123;        //编写业务逻辑代码进行安全控制        //age = a;        if(a&lt;0|| a&gt;150)&#123;            System.out.println(&quot;对不起,您提供的年龄不合法&quot;);        return;    &#125;    //getter    public int getAge ()&#123;        return age;    &#125;</code></pre><br><h3>继承机制</h3><h4>要点</h4><pre><code>关于java语言当中的继承:    1、维承是面向对象三大特征之一,三大特征分别是:封装、维承、多态    2、继承”基本“的作用是:代码复用。但是继承最&quot;重要”的作用是:有了继承才有了以后&quot;方法的覆盖&quot;和&quot;多态机制&quot;。    3、继承语法格式:        [修饰符列表] class 类名 extends 父类名&#123;            类体=属性+方法        &#125;    4、java语言当中的继承只支持单继承，一个类不能同时继承很多类，只能继承一个类。在C++中支持多继承。    5、关于继承中的一些术语:        B类继承A类,其中:            A类称为:父类、基类、超类、superclass            B类称为:子类、派生类、subclass    6、在java语言当中子类继承父类都继承哪些数据呢?    私有的不支持继承    构造方法不支持继承    其他数据都可以继承    7、虽然java语言当中只支持单继承,但是一个类也可以间接继承其它类,例如:    C extends B&#123;&#125;    B extends A&#123;&#125;    A extends T&#123;&#125;    C直接继承B类,但是类间接继承T、A类。    8、java语言中假设一个类没有显示的继承任何类，该类默认继承JavaSE库当中提供的java.lang.Object类。java语言中任何一个类中都有Object类的特征。</code></pre><h4>实例</h4><pre><code>public class ExtendsTest &#123;    //MyEclipse快捷键:查找类型【open Type】--&gt; ctrl + shift +t    //MyEolipse快捷键:查找资源【open Resource】--&gt;ctrl + shift + r    public static void main (String[] args) &#123;    /*ExtendsTest et = new ExtendsTest();    String s = et.toString();//这里编译通过了，这说明可以调用toString方法，ExtendsPest类中有toString()方法，从Object类中继承过来的。    System.out.println(s);//com.bjpowernode.javase.test012.ExtendsTest@da6bf4    */    CreditAccount act = new CreditAccount();    act.setActno( &quot;act = 001&quot;);    act.setBalance (-1000.0);    act.setCredit(0.99);    System.out.println(act.getActno() + &quot;,&quot; + act.getBalance () + &quot;,&quot; + act.getCredit())    &#125;&#125;public class CreditAccount extends Account &#123;    private double credit;    public CreditAccount ()&#123;        super();    &#125;        public double getCredit()&#123;        return credit;    &#125;    public void setCredit (double credit) &#123;        this.credit = credit;    &#125;&#125;    public class Account &#123;    private string actno;    private double balance;    public Account()&#123;&#125;    public Account(String actno,double balance) &#123;        this.actno = actno;        this.balance = balance ;    &#125;    public String getactno() &#123;        return actno;    &#125;    public void setActno (String actno)&#123;        this.actno = actno;    &#125;    public double getBalance () &#123;        return balance ;    &#125;    public void setBalance (double balance) &#123;        this.balance = balance;    &#125;&#125;</code></pre><h4>关于方法覆盖</h4><pre><code>1、什么时候使用方法重写?当父类中的方法已经无法满足当前子类的业务需求,子类有必要将父类中维承过来的方法进行重新编写,这个重新编写的过程称为方法重写/方法覆益。2、什么条件满足之后方法会发生重写呢?【代码满足什么条件之后，就构成方法的覆盖呢?】    *方法重写发生在具有继承关系的父子类之间    *方法重写的时候:返回值类型相同,方法名相同,形参列表相同。方法重写的时候:访问权限不能更低,可以更高。    *方法重写的时候:抛出异常不能更多,可以更少。3、建议方法重写的时候尽量复制粘贴,不要编写,容易出错,导致没有产生覆盖。4、注意:    私有方法不能继承,所以不能覆盖。    构造方法不能继承,所以不能覆盖。    静态方法不存在覆盖。    覆盖只针对方法,不针对属性。</code></pre><br><h3>多态机制</h3><h4>要点</h4><pre><code>关于java语言当中的多态语法机制:    1、Animal、Cat、Bird三个类之间的关系:        Cat继承Aninal        Bird维承Animal        Cat和Bird之间没有任何继承关系    2、关于多态中涉及到的几个概念:    向上转型(upcasting)        子类型——&gt;父类型        又被称为:自动类型转换。    向下转型(downcasting)        父类型——&gt;子类型        又被称为:强制类型转换。【需要加强制类型转换符】    ★需要记忆:        无论是向上转型还是向下转型,两种类型之间必须要有继承关系。        没有继承关系,程序是无法编译通过的。    多态在实际开发中的作用:    1、面向对象编程的核心:定义好类，然后将类实例化为对象，给一个环境驱使一下，让各个对象之间协作起来形成一个系统。    2、多态的作用是什么?        降低程序的耦合度,提高程序的扩展力。能使用多态尽量使用多态。核心:面向抽象编程,尽量不要面向具体编程。</code></pre><h4>向上转型</h4><h5>实例一</h5><pre><code>public class Animal&#123;    public void move()&#123;        System.out.println(&quot;动物在移动&quot;)    &#125;&#125;//鸟儿类public class Bird extends Animal&#123;//重写从父类中继承过来的方法    public void move()&#123;        System.out.println (&quot;鸟儿在飞翔!&quot;);    &#125;&#125;//猫类public class cat extends Animal &#123;//重写父类中继承过来的方法public void move()&#123;    System.out.println (&quot;猫在走猫步!&quot;);&#125;//不是从父类中继承过来的方法//这个方法是子类对象特有的行为【不是说所有的动物都能抓老鼠!】public void catchMouse(    System.out.println(”猫抓老鼠!&quot;);&#125;public class Test&#123;    public static void main (String[] args)&#123;        //以前编写的程序        Animal al = new Animal();        al.move() ;        Cat c1 = new Cat();        c1.move();        cl.catchMouse();        Bird bl = new Bird();        b1.move();/*** 1、Animal和Cat之间存在继承关系,Animal是父类,Cat是子类* 2、Cat is a Animal【合理的】* 3、new Cat()创建的对象的类型是Cat, a2这个引用的数据类型是Animal,可见它们进行了类型转换:子类型转换成父类型,称为向上转型/upcasting,或者称为自动类型转换。* 4、Java中允许这种语法:父类型引用指向子类型对象(向上转型)。*///使用多态语法机制Animal a2 =new Cat();/****1、java程序永远都分为编译阶段和运行阶段。*2、先分析编译阶段,再分析运行阶段,编译无法通过,根本是无法运行的。*3、编译阶段编译器检查a2这个引用的数据类型为Animal,由于Animal.class字节码当中有move()方法，所以编译通过了。这个过程我们成为静态绑定,编译阶段绑定。*只有静态绑定成功之后才有后续的运行。*4、在程序运行阶段，JVM堆内存当中真实创建的对象是Cat对象，那么以下程序在运行阶段一定会调用Cat对象的move()方法,此时发生了程序的动杰绑定,运行阶段绑定。*5、无论是Cat类有没有重写move方法，运行阶段一定调用的是Cat对象的move方法,因为底层真实对象就是Cat对象。*6、父类型引用指向子类型对象这种机制导致程序存在编译阶段绑定和运行阶段绑定两种不同的形态/状态，这种机制可以成为一种多态语法机制。*/a2.move();/***分祈以下程序为什么不能调用?*因为编译阶段编译器检查到a2的类型是Anima1类型,从Animal.class字节码文件当中查找catchMouse方法,最终没有找到该方法,导致静态绑定失败,没有绑定成功,也就是说编译失败了。别谈运行了。*///a2.catchMouse();&#125;</code></pre><h4>向下转型</h4><h5>要点</h5><pre><code>什么时候需要使用向下转型呢?    当调用的方法是子类型中特有的,在父类型当中不存在,必须进行向下转型。</code></pre><h5>实例</h5><pre><code>在test类中添加：Cat c2 = (Cat) a2;c2.catchMouse();/*long x = 100L;int i = (int)x;*/</code></pre><h4>类型转换异常</h4><pre><code>//父类型引用指向子类型对象【多态】Animal a3 = new Bird();/***1、以下程序编译是没有问题的,因为编译器检查到a3的数据类型是Animal,Animal和Cat之问存在继承关系,并且Animal是父类型,Cat是子类型,父类型转换成子类型叫做向下转型,语法合格。**2、程序虽然编译通过了,但是程序在运行阶段会出现异常，因为JVM堆内存当中真实存在的对象是Bird类型,Bird对象无法转换成Cat对象,因为两种类型之间不存在任何继承关系,此时出现了著名的异常:    java.lang.ClassCastException    类型转换异常,这种异常总是在向下转型的时发生。*///Cat c3 = (Cat) a3;</code></pre><h4>类型转换异常解决方法</h4><pre><code>1、向上转型只要编译通过,运行一定不会出问题:Animal a = new Cat();2、向下转型编译通过,运行可能错误:Animal a3 = new Bird();Cat c3 =(Cat)a3;3、怎么避免向下转型出现的ClassCastException呢?    使用instanceof运算符可以避免出现以上的异常。4、instanceof运算符怎么用?    语法格式:    (引用instanceof数据类型名)    以上运算符的执行结果类型是布尔类型,结果可能是true/false    关于运算结果true/false:        假设:(a instanceof Animal)            true表示:a这个引用指向的对象是一个Animal类型。            false表示:a这个引用指向的对象不是个Animal类型。5、Java规范中要求:在进行强制类型转换之前，建议采用instanceof运算符进行判新，避免ClassCastException异常的发生。这是一种编程好习惯if(a3 instanceof Cat)&#123; //a3是一个Cat类型的对象    Cat c3 = (Cat)a3;    //调用子类对象中特有的方法    c3.catchMouse();&#125;else if(a3 instanceof Bird)&#123; //a3是一个Bi.rd类型的对象    Bird b2 = (Bird)a3;    b2.fly();&#125;        </code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this关键字</title>
      <link href="/2021/08/06/this-guan-jian-zi/"/>
      <url>/2021/08/06/this-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Java中的this关键字</title></head><body>    <h3>示例一</h3><h4>要点</h4><pre><code>关于java语言当中的this关键字:    1、this是一个关键字， 翻译为:这个    2、this是一个引用，this是一个变量，this变量中保存了内存地址指向了自身，this存储在JVM堆内存java对象内部。    3、创建100个java对象，每一个对象都有this,也就说有100个不同的this    4、this可以出现在“实例方法”当中,指向当前正在执行这个动作的对象(this代表当前对象)    5、this在多数情况下可以省略不写，但是this不能使用在带有static关键字的方法中</code></pre><h4>示例代码</h4><pre><code>public static void main (String[] args)&#123;    //创建Customer对象    Customer c1 = new Customer();    c1.name = &quot; zhangsan&quot;;    //再创建Cus tomer对象    Customer c2 = new Customer();    c2.name = &quot;lisi&quot;;&#125;public class Customer&#123;    //姓名    String name;    //构造方法    public Customer()&#123;    &#125;    //购物方法    //重点:没有static关键字的方法被称为&quot;实例方法&quot;,实例方法怎么访问? &quot;引用.”    //重点:没有static关键字的变量被称为“实例变量”    //注意:当一个行为/动作执行的过程当中是需要对象参与的，那么这个方法一定要定义为“实例方法”，不要带static关键字    //以下方法定义为实例方法，因为每一个顾客在真正购物的时候，最终的结果是不同的。所以这个动作在完成的时候必须有对象的参与。    public void shopping()&#123;        //System.out.print1n(&quot;xxx在购物!&quot;) ;        //由于name是一个实例变量 ,所以这个name访问的时候一定访问的是当前对象的name        //所以多数情况下&quot;this.&quot;是可以省略的。        System.out.println (name + &quot;在购物!&quot;) ;        //完整写法:        //System.out.println(this.name + &quot;在购物!&quot;) ;    &#125;    public static void doSome()&#123;    //这个执行过程中没有&quot;当前对象”，因为带有static的方法是通过类名的方式访问的    //或者说这个&quot;上下文&quot;当中没有“当前对象”。自然也不存在this ( this代表的是当前正在执行这个动作的对象)        //以下程序为什么编译错误呢?    //dosome方法调用不是对象去调用，是一个类名去调用，执行过程中没有“当前对象”    //name是一个&quot;实例变量&quot;， 以下代码的含义是:访问当前对象的name,没有当前对象，自然也不能访问当前对象的name    //System.out.printIn (name);    //static的方法调用不需要对象，直接使用类名.来调用，所以执行过程中没有当前对象，不能使用this    //System.out.println (this);&#125;public class CustomerTest&#123;    public static void main(String[] args) &#123;    //创建Customer对象    Customer c1 = new Customer() ;    c1.name = &quot;zhangsan&quot; ;    //再创建Customer对象    Customer c2 = new Customer() ;    c2.name = &quot;lisi&quot;;    &#125;                </code></pre><h4>内存图</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.323za043nb28.png" alt="this关键字内存图分析"><br><br><h3>示例二</h3><h4>要点</h4><pre><code>在带有static的方法当中不能”直接”访问实例变量和实例方法。因为实例变量和实例方法都需要对象的存在。而static的方法当中是没有this的。也就是说当前对象是不存在的。自然也是无法访问当前对象的实例变量和实例方法。</code></pre><h4>示例代码</h4><pre><code>pub1ic class ThisTest&#123;    //实例变量(引用.的方式访问)    int num = 10;    //带有static的方法    //JVM负责调用main方法，JVM是怎么调用的?    //ThisTest.main (string[]);    public static void main (String[] args) &#123;        //没有当前对象this        //访问“当前对象”的num属性        //System.out.println (num); //编译错误        //System.out.println (this.nun); //编译错误        //想访问num怎么办?:        ThisTest tt = new ThisTest();        System.out.print1n(tt.num);        //调用dosome方法        ThisTest.dosome();        //调用dosome方法        dosome();        //调用doOther对象 //编译错误        //ThisTest.doOther();//实例方法必须先创建对象,通过引用.的方式访问                //doOther是实例方法,实例方法调用必须有对象的存在        //以下代码表示的含义:调用当前对象的doOther方法        //但是由于main方法中没有this,所以以下方法不能调用。        // doOther; //编译错误        //this.doOther(); //编译错误        ThisTest tt = new ThisTest();        tt.doOther();        tt.run();    &#125;    //带有static    public static void dosome()&#123;        System.out.println ( &quot;do some! &quot;);    &#125;    //实例方法    public void doOther()&#123;        //this表示当前对象        System.out.println (&quot;do other&quot;);    &#125;    //run是实例方法,调用run方法的一定是有对象存在的    //一定是先创建了一个对象才能调用run方法    public void run()&#123;        //在大括号中的代码执行过程当中一定是存在“当前对象”的，也就是说这里一定是有&quot;this&quot;的。        System.out.println (&quot;run execute!&quot;);        //doOther是一个实例方法,实例方法调用必须有对象的存在        //以下代码表示的含义就是:调用当前对象的doOther方法        doOther(); //this.大部分情况下都是可以省略的        //this.doOther(); //比较完整的写法&#125;</code></pre><h3>示例三</h3><h4>要点</h4><pre><code>&quot;this.&quot;什么时候不能省略？用来区分局部变量和实例变量时&quot;this.&quot;不能省略</code></pre><h4>示例代码</h4><pre><code>public class User&#123;    //属性    private int id;//实例变量    private String narne ;    //构造函数    public User()&#123;    &#125;    /*    public User(int a , String s)&#123;        id = a ;        name = s ;    &#125;    */public User (int id,String nane)&#123;    super();    this.id = id ;    this.name = name ;&#125;    //setter and getter/*public void setId(int a)&#123;    id = a ;&#125;*///以下程序的id和实例变量id无关,不能采用这种方式/*publie void setId (int id)&#123;    id = id;&#125;*/publie void setId (int id)&#123;    //等号前面的this.id是实例变量id，等号后面的id是局部变量id    this.id = id;&#125;public int getId()&#123;    return id;&#125;</code></pre><p>}  </p><h3>示例四</h3><h4>要点</h4><pre><code>this可以用在哪里:1、可以使用在实例方法当中,代表当前对象【语法格式:this.】2、可以使用在构造方法当中,通过当前的构造方法调用其它的构造方法【语法格式:this.(实参);】注意: this()这种语法只能出现在构造函数的第一行。</code></pre><h4>示例代码</h4><pre><code>自定义的日期类型/***需求:当程序员调用以下无参数的构造方法的时候,默认创建的日期是&quot;1970-1-1&quot;*/public Date()&#123;    //System.out.println();//在构造方法中this()这种语法前面不能有其他语句。    /*    this.year = 1970;    this.month = 1;    this.day = 1;*/    //以上代码可以通过调用另一个构造方法来完成    //但前提是不能创建新的对象。以下代码表示创建了一个全新的对象    //new Date(1970,1,1);    //需要采用以下的语法来完成构造方法的调用    //这种方式不会创建新的java对象。但同时又可以达到调用其它的构造方法。    this(1970,1,1);&#125;</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置文件反射加载类和执行函数</title>
      <link href="/2021/05/27/dong-tai-jia-zai-lei-he-zhi-xing-han-shu-fan-she-pei-zhi-wen-jian/"/>
      <url>/2021/05/27/dong-tai-jia-zai-lei-he-zhi-xing-han-shu-fan-she-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>配置文件反射加载类和执行函数</title></head><body>    <h2>利用反射技术和读配置文件的方式实现动态加载类和执行函数</h2>    不改变主程序的代码，通过修改配置文件来控制程序的执行，使程序的执行更加灵活。其中properties配置文件的读取写入是根据哈希表执行的，而在现实生活中常常需要顺序读写配置文件，因此需要覆写Properties类，使其顺序读写配置文件。<br><br>    <h3>覆写Properties类，顺序读写配置文件</h3><pre><code>    package exercise;    import java.util.Collections;    import java.util.Enumeration;    import java.util.LinkedHashSet;    import java.util.Properties;    import java.util.Set;     /**    * 用于指定properites文件的存储顺序和输入顺序一样，使得顺序不发生改变    * OrderedProperties    */    public class OrderedProperties extends Properties &#123;            private static final long serialVersionUID = -4627607243846121965L;            private final LinkedHashSet&lt;Object&gt; keys = new LinkedHashSet&lt;Object&gt;();            public Enumeration&lt;Object&gt; keys() &#123;            return Collections.&lt;Object&gt; enumeration(keys);        &#125;            public Object put(Object key, Object value) &#123;            keys.add(key);            return super.put(key, value);        &#125;                public synchronized Object remove(Object key) &#123;            keys.remove(key);            return super.remove(key);        &#125;                public Set&lt;Object&gt; keySet() &#123;            return keys;        &#125;            public Set&lt;String&gt; stringPropertyNames() &#123;            Set&lt;String&gt; set = new LinkedHashSet&lt;String&gt;();                for (Object key : this.keys) &#123;                set.add((String) key);            &#125;                return set;        &#125;    &#125;</code></pre><h3>测试代码</h3><pre><code>    package exercise;    import java.io.File;    import java.io.FileInputStream;    import java.lang.reflect.Method;    import java.util.Iterator;    import java.util.Properties;    public class TestDemo &#123;        public static void main(String[] args) &#123;                        Class&lt;?&gt; c1 = null ;            String strClassName=&quot;&quot;;            String strMethodName=&quot;&quot;;                        //Scanner sc = new Scanner(System.in);            //strClassName = sc.next();                        Properties pro = new OrderedProperties();            File f = new File(&quot;Person.properties&quot;);                        try &#123;                String strArgs[]; //存放参数值(字符串)                String strArgsType[]= &#123;&#125;;//存放参数类型（字符串）                Class[] oArgsType=null;  //存放参数类型对应的class对象                Object[] oArgs=null; //存放参数值对应的object对象                Object obj = null;                  String flag=&quot;0&quot;;//方法开始标记                pro.load(new FileInputStream(f));                Iterator&lt;String&gt; it=pro.stringPropertyNames().iterator();//将properties文件中的所有键存放在迭代器中                while(it.hasNext())&#123;              //判断key的类型并取出相应的值存放在相应变量中                    String key=it.next();                                 if(key.equals(&quot;class&quot;))                    &#123;                        strClassName =pro.getProperty(key);                        c1 = Class.forName(strClassName) ;                                       obj = c1.getConstructor().newInstance();                    &#125;                    if(key.substring(0, 1).equals(&quot;f&quot;))                    &#123;                        flag = pro.getProperty(key);                    &#125;                    if(key.subSequence(0, 1).equals(&quot;m&quot;))                    &#123;                        strMethodName = pro.getProperty(key);                              &#125;                    if(key.substring(0, 1).equals(&quot;k&quot;))                    &#123;                        strArgsType= pro.getProperty(key).split(&quot;,&quot;); //通过，拆分参数类型（字符串）并保存在数组中                        oArgsType = new Class[strArgsType.length];                         for (int i = 0; i &lt; strArgsType.length; i++) &#123;  //将所有类型字符串分别转换成Class对象                            oArgsType[i] = getPrimitiveClass(strArgsType[i]);    //                        System.out.println(oArgsType[i].getName());                        &#125;                                   &#125;                    if(key.substring(0, 1).equals(&quot;v&quot;))                    &#123;                        strArgs= pro.getProperty(key).split(&quot;,&quot;);//通过，拆分参数值（字符串）并保存在数组中                        oArgs = new Object[strArgs.length];                                 for (int i = 0; i &lt; strArgs.length; i++) &#123; //将所有参数值字符串分别转换成相应的数据类型并转成object对象                            oArgs[i] = transferArguments(strArgsType[i], strArgs[i]);    //                        System.out.println(oArgs[i]);                        &#125;                    &#125;                    if(key.substring(0, 1).equals(&quot;e&quot;)) //判断方法是否结束                    &#123;                        Method met;                        if(flag.equals(&quot;1&quot;))                        &#123;                            if(oArgsType!=null)//若方法中参数不为空则反射调用有参函数                            &#123;                                met= c1.getMethod(strMethodName, oArgsType);                                met.invoke(obj, oArgs);                                oArgsType = null;                                oArgs = null;                            &#125;                            else                //否则，反射调用无参函数                            &#123;                                met = c1.getMethod(strMethodName);                                met.invoke(obj);                            &#125;                        &#125;                    &#125;                                &#125;                                        &#125; catch (Exception e1) &#123;                // TODO Auto-generated catch block                e1.printStackTrace();            &#125;         &#125;        private static Object transferArguments(String type, String value) &#123;//将数据类型字符串转成相应的值（invoke方法中要接收参数值）            type = type.toLowerCase();            switch (type) &#123;                case &quot;int&quot;:                    return Integer.valueOf(value);                case &quot;double&quot;:                    return Double.valueOf(value);                case &quot;float&quot;:                    return Float.valueOf(value);                case &quot;char&quot;:                    return (char)value.getBytes()[0];                case &quot;string&quot;:                    return value;                default:                    System.out.println(&quot;undefined!&quot;);                    return null;            &#125;        &#125;        private static Class getPrimitiveClass(String str) &#123;//将数据类型转换成相应的class对象（getmethod方法中参数需要接收class对象）            str = str.toLowerCase();            switch (str) &#123;                case &quot;int&quot;:                    return int.class;                case &quot;double&quot;:                    return double.class;                case &quot;float&quot;:                    return float.class;                case &quot;char&quot;:                    return char.class;                case &quot;string&quot;:                    return String.class;                default:                    System.out.println(&quot;undefined!&quot;);                    return Object.class;            &#125;        &#125;            &#125;</code></pre><br>测试类Person（测试类可根据需求写）：<pre><code>    package exercise;    public class Person &#123;                public void sayHello(String name,int age) &#123;//有参方法            System.out.println(&quot;Hello &quot;+ &quot;,I&#39;m&quot;+name+&quot;, &quot;+age);        &#125;        public void print() &#123;//无参方法            System.out.println(&quot;This is print function&quot;);        &#125;    &#125;</code></pre><br>Person类的properties文件（Properties文件可以自己写，也可以通过程序生成，这里就自己写了）：<pre><code>    s1=1                       class=exercise.Person    ##class类包路径      f1=1                              ##f标记方法开始    m1=sayHello               ##m方法名    k1=String,int                ##k参数类型    v1=Lily,18                    ##v参数值    e1=1                            ##e标记方法结束    f2=1    m2=print    e2=1</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据信息的表示</title>
      <link href="/2021/03/02/shu-ju-xin-xi-de-biao-shi-shu-zhi-bu-fen/"/>
      <url>/2021/03/02/shu-ju-xin-xi-de-biao-shi-shu-zhi-bu-fen/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>数据信息的表示</title></head><body>    &nbsp &nbsp &nbsp &nbsp数据表示是指在计算机中能被硬件直接识别和处理的数据类型，而能被硬件直接识别和处理是指在计算机系统的指令集中包含对这些类型的数据进行操作的指令，在计算机系统中我们要用硬件来实现这些运算，在这个运算过程中将介绍数据的表示以及如何用硬件对数据进行运算。    <h2>无符号数和有符号数</h2><br><h3>无符号数</h3><p>无符号数没有符号部分，没有负数，寄存器的位数反映无符号数数值的表示范围，eg寄存器位数为8，则无符号数的表示范围为八个0到八个1即0~2^8-1</p><h3>有符号数</h3><p>有符号数包括符号和数值两部分，保存在存储器或寄存器中，最高位为符号位，0表示正数，1表示负，<strong>在计算机中没有专门的硬件用于表示小数点，计算机中，定点小数的小数点默认在符号位后面，定点整数的小数点默认在最低位后面</strong></p><h4>机器数和真值</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5kafpq0j94ow.png" alt="机器数和真值"><br><br>将符号数值化的表示方法为原码表示<br><br><h3>原码表示方法</h3><br>原码即带符号的绝对值表示，正数的原码是它本身，0可以是正的也可以是负的，故0的原码有两种形式。为了方便理解，下面在原码的表示中，用逗号隔开符号位和数值，小数则标出小数点，<strong>但是在实际硬件中是没有逗号和小数点的存储的<strong>。原码是保存在计算机中的数，<strong>求某一个真值的原码表示形式必须知道机器数的数值长度是多少且该长度包含了一个符号位</strong> <br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4m31n7597tog.png" alt=""><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.10u8700lnfb4.png" alt=""><br><br>其实简单来说<br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1ll2rwz5oytc.png" alt=""><br>定点小数x的表现形式为0.***），定点整数的表现形式为***(位数不限),所有数都可以用定点小数和定点整数相组合得到。<br><br>原码的运算较麻烦，符号位不参加运算（符号位会受数值进位的的影响，故符号位不参与运算），加法运算器要“同号求和，异号求差”，减法运算器要“同号求差，异号求和”，求差的时候还要比较两数的大小，用大数减去小数，再确定符号位。很麻烦，那么我们能不能将减法可以变成加法，只做加法呢？我们需要找到一个与负数等价的正数将减法运算转变成加法运算，这就引出了补码。<br><br><h3>补码表示法</h3><h4>补的概念</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6zbksyqx60ao.png" alt=""><br><br><p>**<strong>一个负数加上“模”即得该负数的补数，一个正数和一个负数互为补数时它们的绝对值之和即为模数。正数的补数为它本身</strong><br></p><h4>补码的定义</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.2s5kjtwr4rgg.png" alt=""><br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1jvmvojwz2cg.png" alt=""><br><br><strong>n位2进制整数数的模为2^(n+1),2进制定点小数的模为2</strong><br><br><h4>补码的便捷求法</h4><h4>反码法</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.122frljmikwg.png" alt="">将10000变成11111+1来运算就不会产生借位，方便运算。<br><h4>扫描法</h4><strong> 当x小于0时，符号位为1，对其真值数据位从右到左顺序扫描，右起一个1及其右边的0保持不变，其余各位求反。</strong><br><strong> 正零和负零的补码相同，0的补码只有一种形式。</strong><h3>反码的表示法</h3><h4>定义</h4>将原码符号位不变，数值位各位取反<br><br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6a7ryqvwwg3k.png" alt=""><br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.xgbumjf4aio.png" alt=""><br><br>Eg<br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.48a3itabk740.png" alt=""><br>由上图可看出，补码的大小顺序和对应真值的大小顺序并不一定相同，如对于二进制代码01111111和10000000，无符号数对应的真值分别为127、128显然127小于128 大小顺序正确可以直接比较，而补码对应的真值为127、-128，127并不小于-128，大小顺序并不和对应真值大小顺序相同，不能根据补码直接比较真值的大小。因此需要对补码进行修正，使其大小顺序和对应真值的大小顺序相同，由此引出移码。<br><br><h3>移码表示法</h3><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.210lzv7787sw.png" alt=""><h4>移码的定义</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.7ijs2oxxugsg.png" alt=""><br><br><strong>移码没有小数形式，都是整数，可以直接比较大小，因此移码通常用来表示浮点数的阶码。最小真值-2^n的移码为全0</strong>给出不同真值，分别求对应的移码和补码，可得出 <strong>移码和补码的符号位相反，数值位相同</strong><br><strong>0的移码只有一种形式</strong><br><br><h2>数的定点表示和浮点表示</h2><h3>数的定点表示</h3><p>计算机中没有硬件来表示小数点，小数点的位置由设计计算机体系结构人员决定，一般小数 小数点的位置默认为符号位后面数值位前面，称为定点小数，该机器称为小数定点机；整数 小数点的位置默认为数值部分后面，称为定点整数，该机器称为整数定点机</p><h3>数的浮点表示</h3> <p> &nbsp&nbsp&nbsp当计算机需要表示一个位数十分大的数，而该数的高位大多均是零，那么就需要很大的存储单元，而该数可能只会用到一次，就会造成存储容量的浪费。因此我们引入浮点数表示，提高存储容量的利用率。</p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5o97ja4g7ncw.png" alt="">在计算机中只需保存尾数、阶数、基数即可保存一个浮点数。<br><br><h4>浮点数的表示形式</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6798lfjm8cqo.png" alt=""><br><br><h4>浮点数的表示范围</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6bb9e3hrt1xc.png" alt="">上溢：阶码大于最大阶码 ————————————————— 发生上溢，计算机系统按计算出错处理下溢：阶码小于最小阶码 ————————————————— 发生下溢，计算机系统按机器零处理<br><br><h4>浮点数的规格化表示</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1j9dryxjc6rk.png" alt=""><br><strong>所谓规格化处理就是使得尾数真值最高有效位为1，也就是尾数的绝对值应大于或等于（0.1）（2进制），（0.5）（十进制）</strong><br><br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.eaoqqruly74.png" alt=""><br><br><h4>IEEE754标准</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1d92289kx97k.png" alt=""><br>IEE754标准中阶码用移码表示，而移码的偏移量由阶码的位数及浮点数的精度决定，eg:8位阶码单精度浮点数对应移码的偏移量为127。具体标准可自行查询，这里不做过多说明。</body></html>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据信息的表示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统概述</title>
      <link href="/2021/02/05/ji-suan-ji-xi-tong-gai-shu/"/>
      <url>/2021/02/05/ji-suan-ji-xi-tong-gai-shu/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>计算机系统概述</title></head><body>    <p>新的学期开始啦，今天简要介绍一下计算机系统的层次结构及其性能指标</p>    <h2>计算机系统</h2>    <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/计算机系统.65s5zzix2b28.png" alt="计算机系统图示">    <br><br>    <h2>计算机系统的层次结构</h2>    <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/计算机系统的层次结构.40h2xq3e9jr4.png" alt="计算机系统的层次结构图示"><br><br>    <h2>冯.诺依曼体系结构</h2>    <p> &nbsp;&nbsp;&nbsp; 美国科学家冯诺依曼提出采用二进制作为数字计算机数制基础的理论，二进制只有0、1两个状态，较于十进制运算规则更简单，可用布尔代数的方法实现运算电路。冯诺依曼提出 <strong>存储程序</strong>和 <strong>程序控制</strong>的思想。存储程序是将解题的步骤编制成程序，然后将程序和运行程序所需的数据以二进制的形式存放在存储器中。程序控制是指计算机的控制器逐条取出存储器中的指令并按顺序执行，控制个功能部件进行相应的操作，完成数据的加工处理。<br>    &nbsp;&nbsp;&nbsp;按照冯诺依曼的设计思想，计算机的硬件系统包括 <strong>运算器、控制器、存储器、输入设备和输出设备</strong>五大部件 <br>    <br>    现代计算机硬件结构：<br>    <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.2l4tamk51glc.png" alt="现代计算机硬件框图"><br><br>    冯诺依曼体系结构：<br>    <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1d7kw30rcqn4.png" alt="冯诺依曼体系结构"><br>    冯诺依曼体系结构以运算器为核心，数据的输入和输出必须经过运算器，算数和逻辑运算也要通过运算器做，运算器会非常的繁忙。且该结构不具有层次化的划分。<br></p><h2>计算机的解题过程</h2><h3>编程举例</h3><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4rjvia8sswsg.png" alt="编程举例"><br>程序——————— 运算的全部步骤<br>指令——————— 每一个步骤<br><br>&nbsp&nbsp&nbsp&nbsp计算机的解题过程需要用到五大部件，下面我们就简要说明一下存储器、运算器和控制器的基本组成，较详细介绍后面章节会写（有时间的话[]~(￣▽￣)~*）。<br><br><h3>存储器的基本组成</h3><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4vlsrc98wvsw.png" alt="主存储器"><br>存储体 —— 存储单元 —— 存储元件（0/1）<ul>    <li>存储单元：存储一串二进制代码</li>    <li>存储字：存储单元中二进制代码的组合</li>    <li>存储字长：存储单元中二进制代码的位数</li></ul>每个存储单元赋予一个地址，按地址寻访<ul>    <li>MAR: 存储器地址寄存器，反应存储单元的个数</li>    <li>MAR：存储器数据寄存器，反映存储字长</li></ul><h3>运算器的基本组成和操作过程</h3><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.2efobbvl19xc.png" alt="运算器示意图"><br><br>寄存器的分配<br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.17ybywx0odj4.png" alt="寄存器的分配"><br><br><h3>控制器的基本结构</h3>控制器的功能<br>1.解释指令2.保证指令按序执行<br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.bewmhfenj1s.png" alt="控制器图示"><br><br><h3>主机完成一条指令的过程（以取数指令为例）</h3><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4sqid4sgm5c0.png" alt="取数过程"><h3>ax^2+bx+c程序的运行过程</h3><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.hrjfe63ggq8.png" alt="ax^2+bx+c程序的运行过程"><br><br>&nbsp&nbsp&nbsp重头戏来啦，也是考点：计算机硬件的主要性能指标。<h2>计算机硬件的主要性能指标</h2><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4s3nzri9z474.png" alt="计算机硬件的主要性能指标"><br><br>&nbsp&nbsp&nbsp&nbsp好啦，计算机的系统概述就介绍到这里啦，有啥错误希望大家可以指出，共同进步呀。</body></html>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机系统概述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法小汇总</title>
      <link href="/2020/11/05/pai-xu-suan-fa-xiao-hui-zong/"/>
      <url>/2020/11/05/pai-xu-suan-fa-xiao-hui-zong/</url>
      
        <content type="html"><![CDATA[<p><strong>关于排序算法汇总，有一篇文章写的非常清楚☞<a href="https://www.cnblogs.com/ll409546297/p/10956960.html">https://www.cnblogs.com/ll409546297/p/10956960.html</a>，这里我就不赘述了。</strong></p><p>（<strong>以下不成熟的东西请不要看</strong>，救命，这写的啥，乱七八糟的（来自两年后的、自己的嘲讽哈哈），还不完整，咋写着写着跑了呢，跑了还真就弃之不顾了，真真负心（忘了估计）🙈，今天翻草稿才发现）</p><p>​今天对几种排序算法（插入排序，希尔排序，选择排序，堆排序，快速排序，冒泡排序）做个小小的记录。</p><p>老样子，先是准备工作，引入头文件：  </p><pre><code>    #include &lt;iostream&gt;    #include &lt;algorithm&gt;    #include &lt;time.h&gt;    #include &lt;iomanip&gt;    #include &lt;queue&gt;    using namespace std;    void putArray(int a[],int n)    //输出数组    &#123;        for(int i=1; i&lt;=n; i++)            cout&lt;&lt;setw(4) a[i] ; //setw设置输出元素的距离         cout&lt;&lt;endl;    &#125;</code></pre><h3>插入排序</h3><h4>思路简介：</h4>​将一组数分为两部分，前一部分是排好序的数，后一部分是未排好序的数，将未排好序的数n与排好序的数一一比较，找到n的位置，通过交换或赋值将n排好序，对所有未排好序的数重复上述操作，直到所有数都排好序。<br>eg:对于一组数：1 3 2 4 3，初始时只有1一个数是排好序的，3 2 4 6是未排好序的，从第一个未排好序的数3开始与第一个排好序的数1比较，3大于1，3在1的后面（升序排序），3在正确的位置，不动，3已经与所有排好序的数进行了比较并找到其正确位置，3排好序。排好序的有1，3，未排好序的有2  4 6，从2开始与1比较，2大于1，2的位置不动，接下来2与3比较，2小于3，2与3交换，2已经与所有排好序的数进行了比较且找到其正确的位置，2排好序。那么，排好序的部分：1 2 3，未排好序的部分：4 3.....依次类推，直到最后后一个数排好序。<br><strong>插入排序是最稳定的排序算法，排好序的数一个一个增加，直到最后一个未排好序的数也排好序。</strong> <br><h4>代码：</h4><pre><code>    void InsertionSort (int a[],int n,int dk = 1)      &#123;//dk是数组中进行排序数的跨度，选择排序默认跨度为1，即一次性将所有数排好序        int i,j;                for(i=1+dk; i&lt;=n; i+=dk)  //默认第一个数已经有序         &#123;            int t = a[i];     //t记录未排好序的数             //将未排好序的数t依次与前面排好序的数a[j]比较,找到 t的位置            for(j=i-dk; j&gt;=0 &amp;&amp; a[j]&gt;t; j-=dk)                a[j+dk] = a[j];                            a[j+dk] = t;        &#125;    &#125;</code></pre><h3>希尔排序</h3><h4>思路简介：</h4>​先将几个数排好序，那么后来再进行排序所需比较和值交换的次数会减少，总的来说，这样排序所需要的比较与交换的次数比原始的将所有数进行排序所需要的比较与值交换的次数少得多。<br>希尔排序是先将几个具有一定跨度的数排好序，减小数与数之间的跨度重复上述操作，最后的跨度为1，即将所有的数进行排序。<br>eg：对于一组数：4 2 1 6 3 5 7 8，先将4 6 7排好序7 6 4（跨度为3）那么要排序的数为：7 2 1 6 3 5 4 8，再将7 1 3 4 排好序7 4 3 1（跨度为2），那么要排序的数为：7 2 4 6 3 5 1 8最后将7 2 4 6 3 5 1 排序为 8 7 6 5 4 3 2 1。一般来说设置三个跨度{5，3，1}就可以将所有数较高效的排好序。 <br><h4>代码：</h4><pre><code>    /**缩小增量的希尔排序*/    void shell(int a[],int n)    &#123;        int dk[]=&#123;5,3,1&#125;;                for(int i=0; i&lt;3; i++)        &#123;            InsertionSort(a,n,dk[i]);         &#125;    &#125;</code></pre><h3>选择排序</h3> <h4>思路简介：</h4> 选择排序老经典的排序算法了，第一个学的排序算法就是它。<br> 将所有相邻的数两两相比较，找到最大的数放在数列最后一个，那么最大的数已经找到位置排好序。除去最后一个数，将其他相邻的数两两相比较，找到最大的数（整个数列第二大的数），放在数列的倒数第二个数，那么第二大的数已经找到位置排好序。除去排好序的后两个数，将其他相邻的数两两相比较，找到最大的数（整个数列第三大的数），放在数列的倒数第三个数，那么第三大的数已经找到位置排好序。依次类推，直到所有数都找到位置排好序。（写的不清楚，赶时间，待更，代码应该很好懂） <br> <h4>代码：</h4><pre><code>    /*简单的选择排序*/    void selectSort(int a[],int n)    &#123;        int i,j,k;        for(i=1; i&lt;=n-1; i++)        &#123;            k=i;            for(j=i+1; j&lt;=n; j++)            &#123;                if(a[j]&lt;a[k])                    k = j;            &#125;            swap(a[i],a[k]);        &#125;    &#125;</code></pre> <h3>堆排序<h3><h4>堆</h4>堆是一个完全二叉树，堆分为大顶堆和小顶堆。大顶堆：每个父结点的值都大于小于其子节点的值；小顶堆：每个父结点的值都小于等于其子节点的值。若将堆中结点按从上到下从左到右从0开始进行编号，将堆中结点存放在数组中，堆中结点的编号i对应的数组下标i,该数组满足以下条件：<br>对编号i：<br><ul>    <li>左孩子结点下标：2*i+1</li>    <li>右孩子结点下标：2*i+2</li>    <li>父结点下标：（i-1）/2</li>    <li>大顶堆：arr[i]&gt;=arr[2*i+1] && arr[i]&gt;=arr[2*i+2]（一般升序排序用大顶堆）</li>    <li>小顶堆：arr[i]&lt;=arr[2*i+1] && arr[i]&lt;=arr[2*i+2]（一般降序排序用小顶堆）</li></ul><h4>堆排序思路及其步骤（升序排序,共有n个元素）</h4><h4>思路简介</h4>将待排序序列构造成一个大顶堆，堆顶结点元素即该序列的最大值，将该最大值与末尾元素交换，则末尾元素为最大值，除去末尾元素，其他n-1个元素未排好序。将未排好序的n-1个元素重新构造称一个大顶堆，得到第二大的元素，将第二大的元素与第n-1个元素交换，则第n-1和n个元素排好序，其余n-2个元素未排好序，将未排好序的n-2个元素重新构造成一个大顶堆...以此类推，直到所有元素排好序。<h4>步骤</h4>1.建堆<br>从左往右从下至上对结点进行调整<br>&nbsp;&nbsp;&nbsp;&nbsp;首先从最后一个父节点（非叶子结点，位于倒数第二层）arr[n/2 - 1]开始，将该结点的左右子结点元素进行比较，将较大值放在左结点，将父结点元素与左结点元素比较，将较大值放在父结点。从左往右将倒数第二层的所有结点依次进行上述操作。将倒数第i层结点（起始结点为arr[n/(2^(i-1) - 1)]， i=0,1,2，3，4...n）进行上述操作直到父结点下标为0，此时建好的二叉树即为大顶堆，堆顶元素为该序列的最大值。<br>2.交换<br>&nbsp;&nbsp;&nbsp;&nbsp;将堆顶元素arr[0]与堆尾元素arr[n-i]交换。<h4>代码</h4></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Floyd算法详解</title>
      <link href="/2020/10/30/floyd-suan-fa-xiang-jie/"/>
      <url>/2020/10/30/floyd-suan-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=, initial-scale=1.0">    <title>Floyd算法详解</title></head><body><h3>Floyd算法概述</h3>    <p>Floyd算法又称为插点法，是一种利用动态规划的思想寻找给定的加权图中任意两顶点之间最短路径的算法，与<a href="https://icecream-tu.cn/2020/10/27/dijkstra-suan-fa-xiang-jie/"> Dijkstra算法</a>类似都是属于贪心算法。<br>        基本思路：首先定义两个数组，数组D[i][j]记录顶点i到顶点j的最短距离，数组prior[i][j]记录i到j最短距离经过的一个顶点。在顶点i，j之间找到一个中间点m，若i到m的距离加m到j的距离小于原来i到j的距离则更新D[i][j],并将prior[i][j]更新为m，m用所有顶点一个一个试，最终得到i到j的最短距离和最短路径。对任意两个顶点进行上述操作，得到任意两个顶点的最短距离和最短路径所要经过的一个中间顶点，从中间顶点到起始顶点也有一个最短路径的中间顶点，依次类推，<strong> 通过任一局部的最短路径达到整体路径最短.<strong>        <br>        <strong> Floyd算法不适用于负权回路，因为负权回路可以不断循环，没有最小值。<strong>    </p>    核心代码十分简洁，先提前震撼一下：<br>            for (k = 0; k < n; k++)                    {                        for (i = 0; i < n; i++)                              for (j = 0; j < n; j++)                                   if (D[i][k] + D[k][j] < D[i][j])                                {                                    D[i][j] = D[i][k] + D[k][j];                                     prior[i][j] = prior[k][j];                                }                    }<h3>算法步骤</h3>    <ol>        <li>定义两个矩阵,D[i][j]记录顶点i与j的最短距离，prior[j]记录j的前一个顶点</li>        <li>初始化矩阵Dij为顶点i与j的直通距离，若不能直通则为infinity，矩阵priorij为i，j顶点最短路径经过的中间顶点，即j的前一个顶点，初始时i，j顶点之间没有中间顶点，若i，j直通则j的前一个顶点priorij为i，否则j没有前一个顶点，priorij记为－1。</li>        <li>构造三层循环，最外层循环从第一个顶点产生中间顶点k，第二层循环从第一个顶点开始产生起始点i，最后一层循环从第一个顶点开始产生终点j，依次将中间顶点加入所有任意两顶点i，j之间，比较Dik+Dkj与原来Dij的大小，若Dij较大，则加入的中间顶点k使顶点i到j的距离更近，更新Dij＝Dik+Dkj，priorij＝k，重复上述操作，直到外层循环结束，即任意两点之间试过所有中间顶点，找到最短路径。</li>    </ol>    <br><h3>图解</h3>    画表好麻烦，有时间再补上 <br><br><h3>代码：</h3><pre><code>     /** Floyd算法    * @g 邻接矩阵表示的图    * @D D[i][j] 记录i到j的SP长度,    * @prior prior[i]记录以i为源点至各点的SP（等同Dijkstra算法中,i为源点SP问题的prior）    * 动态规划,分阶段决策,迭代处理D:    * 初始,D为邻接矩阵 (D[i][j]:不经过任何结点i至j的SP长度)    * 第k(k=0,1...n-1)次决策,允许路径经过编号不超过k的顶点  (D[i][j]:i至j的SP可经0...k号顶点的SP长度）    * 第n-1次(n:顶点数)决策,D[i][j]允许经过任何顶点的SP,即为解    */    void Floyd (MGraph g, float D[][N], int prior[][N])    &#123;        int i,j,k,n=g.vexnum;        /**矩阵D与prior初始化*/        for (i = 0; i &lt; n; i++)            for (j = 0; j &lt; n; j++)            &#123;                D[i][j] = g.arcs[i][j];     // 初始 D为邻接矩阵                //若i，j可直接连通，则j的前一个结点prior初始化为i，否则为-1                 prior[i][j] = (i!=j &amp;&amp; D[i][j] &lt; INFINITY )? i: -1;            &#125;        /** n次决策,第k次迭代(k=0...n-1)允许编号k顶点插入路径 */        for (k = 0; k &lt; n; k++)     //k为中间顶点         &#123;            for (i = 0; i &lt; n; i++)      //以i为起始点                 for (j = 0; j &lt; n; j++)  //以j为终点                     if (D[i][k] + D[k][j] &lt; D[i][j]) // 经过k顶点更短                    &#123;                        D[i][j] = D[i][k] + D[k][j];  // 更新SP长度                        prior[i][j] = prior[k][j];   //更新SP                    &#125;        &#125;    &#125;        /** 输出有向网,任意两点间的SP 及其长度        @g 邻接矩阵表示的有向网*/    void Floyd_SP(MGraph g)    &#123;        int n = g.vexnum;        float D[n][N];        int prior[n][N];        int i,j;            Floyd(g,D,prior); // 调用Floyd算法,D存储任意两点间SP长度,prior存储各SP            cout &lt;&lt; &quot;任意顶点对的最短路径(SP)长度 矩阵(INF为无限大):&quot; &lt;&lt; endl;        for(i=0; i&lt;n; i++)        &#123;            for(j=0; j&lt;n; j++)            &#123;                if( D[i][j] == INFINITY)                    cout  &lt;&lt; &quot;   &quot;&lt;&lt; &quot;INF&quot; ;                else                    cout &lt;&lt; setw(6) &lt;&lt; D[i][j];            &#125;                cout &lt;&lt; endl;        &#125;            cout &lt;&lt; &quot;\n任意顶点对的最短路径(SP) &quot; &lt;&lt; endl;        for(i=0; i&lt;n; i++)        &#123;                for(j=0; j&lt;n; j++)            &#123;                if(i==j || D[i][j] == INFINITY) // i与j不连通,则无输出                    continue;                Traceback(g,prior[i],j);  // 输出i到j的SP                cout &lt;&lt; &quot;\t&quot;;            &#125;            cout &lt;&lt; endl;        &#125;    &#125;</code></pre><p>输出结果：<br></p><pre><code>    任意顶点对的最短路径(SP)长度 矩阵(INF为无限大):        0   INF    10    50    30    60    INF     0     5    55   INF    65    INF   INF     0    50   INF    60    INF   INF   INF     0   INF    10    INF   INF   INF    20     0    30    INF   INF   INF   INF   INF     0    任意顶点对的最短路径(SP)    A C     A E D   A E     A E D F    B C     B C D   B C D F    C D     C D F    D F    E D     E D F            </code></pre> </body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Floyd算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其他问题合集</title>
      <link href="/2020/10/29/qi-ta-wen-ti/"/>
      <url>/2020/10/29/qi-ta-wen-ti/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>其他问题合集</title></head><body>    <h3>python连接数据库报错:(20009, b'DB-Lib error message 20009, severity 9:\nUnable to connect:</h3>    解决方法： https://www.cnblogs.com/Sunny20181123/p/10843196.html    <h3> sqlserver某用户名密码无法更改 </h3>    解决方法：新建一个用户重新设置密码</body></html>]]></content>
      
      
      <categories>
          
          <category> 其它问题合集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库连接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra算法详解</title>
      <link href="/2020/10/27/dijkstra-suan-fa-xiang-jie/"/>
      <url>/2020/10/27/dijkstra-suan-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Dijkstra算法详解</title></head><body>    Dijkstra算法与<a href="https://icecream-tu.cn/2020/10/27/prim-suan-fa-xiang-jie/"> Prim算法</a>思路很类似，都是通过所有局部最优达到整体最优（贪心算法）。<h3>Dijkstra算法概述：</h3><p>&nbsp&nbsp&nbsp&nbsp&nbsp迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个顶点到其他所有顶点的最短路径。它的主要特点是以起始点为中心向外层层扩展(广度优先搜索思想)，直到扩展到终点为止。（引用）<br> &nbsp&nbsp&nbsp&nbsp&nbsp 大概思路是：将所有顶点分为 已找到到起始点的最短路径的顶点 和 未找到到起始点的最短路径的顶点 两部分,用一个bool数组Final记录。dist[i]记录顶点i到起始点的最短距离,在Final==0的顶点中，找出最小dist，将对应的顶点 标记为已找到最小路径即其Final==1，由于新增一条最短路径，其他顶点到起始点的最短距离会发生改变，将Final==0的顶点依次通过其相邻顶点中Final==1的顶点到达起始点的距离相比较，选出最小值及最小值对应的Final==1的顶点，该值为该Final==0顶点到起始点的最短距离，则该顶点到起始点的最短路径已找到，置该点的Final==1。该Final==1顶点为该Final==0顶点的前一顶点，用prior[i]记录顶点i的前一顶点。以此类推，直到所有点的Final都等于0， 即所有顶点到起始点的最短路径均找到。<strong> 由于顶点的最短路径依赖于另一个顶点的最短路径，这种算法必须依次求出各个顶点的最短路径直到目标终止顶点。<strong></p><br><h3>算法步骤及解释：</h3><ol>    <li>最开始所有顶点到起始点的最短路径都没找到，初始化所有顶点的Final为0。将起始点标记，Final[0]=1,记录顶点i到起始顶点的最短距离dist[i],若顶点i与起始顶点不相邻，则dist[i]为infinity</li>    <li>找到dist[i]中的最小值，将对应的顶点v标记，v的Final置为1，v的前一顶点prior[v]为起始顶点，即找到v到起始顶点的最短路径</li>    <li>由于新添加了一条最短路径，其他Final为0的顶点v到起始点的最短路径可以通过与v相邻且已知最短路径的顶点，也就是说v到起始点的最短距离可能改变，得更新。v到初始顶点最短路径有3种情况：1.一条边直通起始点 2.通过其已知最短路径的相邻顶点到起始点（通过局部最近得到整体最近） 3.原路径对应的最小距离，将这3种情况得到的所有最短距离比较，选出最小值为dist[v]及得到该最小值通过的那个相邻顶点为v的前一顶点prior[v]    </li>    <li>重复步骤2，3直到所有顶点的Final值均为1，即所有顶点到起始顶点的的最短路径都找到了</li></ol><br><h3>图例</h3>eg：对于原图 <br><img src="https://images0.cnblogs.com/blog/175043/201501/281625024569786.jpg" alt="图例"><br><br>1.将起始点v0加入最短路径中并将其标记，Final[0]=1，起始点在其最短路径中没有上一顶点，prior[0]记为-1。记录其他点到v0的最短距离dist，若与起始点不相邻则dist为infinity <br><table>    <tr>        <th>index</th>        <td>0</td>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>8</td>    </tr>    <tr>        <th>Final</th>        <td>1</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>    </tr>    <tr>        <th>prior</th>        <td>-1</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td></td>        <td></td>        <td></td>        <td></td>    </tr>    <tr>        <th>dist</th>        <td>0</td>        <td>4</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td></td>        <td>8</td>        <td></td>    </tr></table><br><img src="https://images0.cnblogs.com/blog/175043/201501/281631318781591.jpg" alt="图例"> <br><br>2.选出dist中未找到最短路径的顶点（Final==0）到起始顶点的的最短距离（dist）中的最小值4对应的顶点v1，则找到v1的最短路径(置Final[1]=1)，v1的前一顶点是v0（置prior[1]=0）,v1到顶点最短距离为4（置dist[1]=4）<table>    <tr>        <th>index</th>        <td>0</td>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>8</td>    </tr>    <tr>        <th>Final</th>        <td>1</td>        <td>1</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>    </tr>    <tr>        <th>prior</th>        <td>-1</td>        <td>0</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td></td>        <td></td>        <td></td>    </tr>    <tr>        <th>dist</th>        <td>0</td>        <td>4</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td></td>        <td>8</td>        <td></td>    </tr></table><br>3.由于新添加了一条最短路径，v2可以通过与v2相邻且已知最短路径的顶点v1到达v0，v2到初始顶点v0的最短路径有3种情况：1.一条边直通起始点（距离为infinity） 2.通过其已知最短路径的相邻顶点v1到起始点（距离为8+4=12）3.原路径对应的最小距离，选出最小值12为dist[2]，则prior[2]=1,更新表<br><table>    <tr>        <th>index</th>        <td>0</td>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>8</td>    </tr>    <tr>        <th>Final</th>        <td>1</td>        <td>1</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>    </tr>    <tr>        <th>prior</th>        <td>-1</td>        <td>0</td>        <td>1</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td></td>        <td></td>    </tr>    <tr>        <th>dist</th>        <td>0</td>        <td>4</td>        <td>12</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td>8</td>        <td></td>    </tr></table> <br><img src="https://images0.cnblogs.com/blog/175043/201501/281635078621307.jpg" alt="图例"><br><br>4.选出Final==0的顶点中dist最小值8对应的顶点v7，则找到v7的最短路径(置Final[7]==1)，v7的前一顶点是v0（置prior[7]=0） <br><table>    <tr>        <th>index</th>        <td>0</td>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>8</td>    </tr>    <tr>        <th>Final</th>        <td>1</td>        <td>1</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>1</td>        <td>0</td>    </tr>    <tr>        <th>prior</th>        <td>-1</td>        <td>0</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td></td>        <td>0</td>        <td></td>    </tr>    <tr>        <th>dist</th>        <td>0</td>        <td>4</td>        <td>12</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td>8</td>        <td></td>    </tr></table> <br>5.由于新添加了一条最短路径，v6,v8可以通过与其相邻且已知最短路径的顶点v7到达v0，v6，v8到初始顶点v0的最短路径有3种情况：1.一条边直通起始点  2.通过其已知最短路径的相邻顶点v7到起始点 3.原路径对应的最小距离，分别选出v6,v8的最短距离9，15，则prior[6]=7,prior[8]=1,更新表 <br><table>    <tr>        <th>index</th>        <td>0</td>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>8</td>    </tr>    <tr>        <th>Final</th>        <td>1</td>        <td>1</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>1</td>        <td>0</td>    </tr>    <tr>        <th>prior</th>        <td>-1</td>        <td>0</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td></td>        <td>0</td>        <td></td>    </tr>    <tr>        <th>dist</th>        <td>0</td>        <td>4</td>        <td>12</td>        <td></td>        <td></td>        <td></td>        <td>9</td>        <td>8</td>        <td>15</td>    </tr></table> <br><img src="https://images0.cnblogs.com/blog/175043/201501/281637061284639.jpg" alt="图例"><br><br>6.选出Final==0的顶点中dist最小值9对应的顶点v6，则找到v6的最短路径(置Final[6]==1)，v6的前一顶点是v7（置prior[6]=7） <br><table>    <tr>        <th>index</th>        <td>0</td>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>8</td>    </tr>    <tr>        <th>Final</th>        <td>1</td>        <td>1</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>1</td>        <td>1</td>        <td>0</td>    </tr>    <tr>        <th>prior</th>        <td>-1</td>        <td>0</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td>7</td>        <td>0</td>        <td></td>    </tr>    <tr>        <th>dist</th>        <td>0</td>        <td>4</td>        <td>12</td>        <td></td>        <td></td>        <td></td>        <td>9</td>        <td>8</td>        <td>15</td>    </tr></table> <br>7.由于新添加了一条最短路径(v6)，v5,v8可以通过与其相邻且已知最短路径的顶点v6到达v0，v5，v8到初始顶点v0的最短路径有3种情况：1.一条边直通起始点  2.通过其已知最短路径的相邻顶点v7到起始点 3.原路径对应的最小距离，分别选出v5,v8的最短距离11，15，则prior[5]=6,prior[8]=6更新表<br><table>    <tr>        <th>index</th>        <td>0</td>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>8</td>    </tr>    <tr>        <th>Final</th>        <td>1</td>        <td>1</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>1</td>        <td>1</td>        <td>0</td>    </tr>    <tr>        <th>prior</th>        <td>-1</td>        <td>0</td>        <td></td>        <td></td>        <td></td>        <td></td>        <td>7</td>        <td>0</td>        <td></td>    </tr>    <tr>        <th>dist</th>        <td>0</td>        <td>4</td>        <td>12</td>        <td></td>        <td></td>        <td>11</td>        <td>9</td>        <td>8</td>        <td>15</td>    </tr></table> <br><img src="https://images0.cnblogs.com/blog/175043/201501/281638430509082.jpg" alt="图例"><br><br>8.选出Final==0的顶点中dist最小值11对应的顶点v5，则找到v5的最短路径(置Final[5]==1)，v5的前一顶点是v6（置prior[5]=6） <br><table>    <tr>        <th>index</th>        <td>0</td>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>8</td>    </tr>    <tr>        <th>Final</th>        <td>1</td>        <td>1</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>1</td>        <td>1</td>        <td>1</td>        <td>0</td>    </tr>    <tr>        <th>prior</th>        <td>-1</td>        <td>0</td>        <td></td>        <td></td>        <td></td>        <td>6</td>        <td>7</td>        <td>0</td>        <td></td>    </tr>    <tr>        <th>dist</th>        <td>0</td>        <td>4</td>        <td>12</td>        <td></td>        <td></td>        <td>11</td>        <td>9</td>        <td>8</td>        <td>15</td>    </tr></table><p>9.由于新添加了一条最短路径(v5)，Final为0的v3,v4可以通过与其相邻且已知最短路径的顶点v5到达v0，v3,v4到初始顶点v0的最短路径有两3情况：1.一条边直通起始点  2.通过其已知最短路径的相邻顶点v5到起始点 3.原路径对应的最小距离， 分别选出v3,v4的最短距离25，21，则prio[3]&#x3D;5,prior[4]&#x3D;5,更新表<br></p><table>    <tr>        <th>index</th>        <td>0</td>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>8</td>    </tr>    <tr>        <th>Final</th>        <td>1</td>        <td>1</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>1</td>        <td>1</td>        <td>1</td>        <td>0</td>    </tr>    <tr>        <th>prior</th>        <td>-1</td>        <td>0</td>        <td></td>        <td></td>        <td></td>        <td>6</td>        <td>7</td>        <td>0</td>        <td></td>    </tr>    <tr>        <th>dist</th>        <td>0</td>        <td>4</td>        <td>12</td>        <td>25</td>        <td>21</td>        <td>11</td>        <td>9</td>        <td>8</td>        <td>15</td>    </tr></table> <br>10.选出Final==0的顶点中dist最小值12对应的顶点v2，则找到v2的最短路径(置Final[2]==1)，v2的前一顶点是v1（置prior[2]=1） <br><table>    <tr>        <th>index</th>        <td>0</td>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>8</td>    </tr>    <tr>        <th>Final</th>        <td>1</td>        <td>1</td>        <td>1</td>        <td>0</td>        <td>0</td>        <td>1</td>        <td>1</td>        <td>1</td>        <td>0</td>    </tr>    <tr>        <th>prior</th>        <td>-1</td>        <td>0</td>        <td>1</td>        <td></td>        <td></td>        <td>6</td>        <td>7</td>        <td>0</td>        <td></td>    </tr>    <tr>        <th>dist</th>        <td>0</td>        <td>4</td>        <td>12</td>        <td>25</td>        <td>21</td>        <td>11</td>        <td>9</td>        <td>8</td>        <td>15</td>    </tr></table><br>11.由于新添加了一条最短路径(v2)，Final为0的v3,v8可以通过与其相邻且已知最短路径的顶点v2到达v0，v3,v8到初始顶点v0的最短路径有3种情况：1.一条边直通起始点  2.通过其已知最短路径的相邻顶点v2到起始点 3.原路径对应的最小距离，分别选出v3,v8的最短距离19，14，则prior[3]=2,prior[8]=2,更新表<br><table>    <tr>        <th>index</th>        <td>0</td>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>8</td>    </tr>    <tr>        <th>Final</th>        <td>1</td>        <td>1</td>        <td>1</td>        <td>0</td>        <td>0</td>        <td>1</td>        <td>1</td>        <td>1</td>        <td>0</td>    </tr>    <tr>        <th>prior</th>        <td>-1</td>        <td>0</td>        <td>1</td>        <td></td>        <td></td>        <td>6</td>        <td>7</td>        <td>0</td>        <td></td>    </tr>    <tr>        <th>dist</th>        <td>0</td>        <td>4</td>        <td>12</td>        <td>19</td>        <td>21</td>        <td>11</td>        <td>9</td>        <td>8</td>        <td>14</td>    </tr></table> <br>依次类推。。。 <br>最后得到的结果为：<br><table>    <tr>        <th>index</th>        <td>0</td>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>8</td>    </tr>    <tr>        <th>Final</th>        <td>1</td>        <td>1</td>        <td>1</td>        <td>1</td>        <td>1</td>        <td>1</td>        <td>1</td>        <td>1</td>        <td>1</td>    </tr>    <tr>        <th>prior</th>        <td>-1</td>        <td>0</td>        <td>1</td>        <td>2</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>0</td>        <td>2</td>    </tr>    <tr>        <th>dist</th>        <td>0</td>        <td>4</td>        <td>12</td>        <td>19</td>        <td>21</td>        <td>11</td>        <td>9</td>        <td>8</td>        <td>14</td>    </tr></table> <br><img src="https://images0.cnblogs.com/blog/175043/201501/281640391919096.jpg" alt="图例"><br><br><h3>代码：</h3><pre><code>    #include &lt;iostream&gt;    #include &lt;iomanip&gt;    #include &quot;graph.h&quot;    using namespace std;        /**    按最短路径（SP）长度递增生成,求源点到其余各顶点的SP，及长度        * 相关数据结构,若已求得v到i的SP：    则Final[i]=true;SP可从 prior[i]回溯到源点即得;SP长度记录于dist[i]        @g 邻接矩阵表示的有向网    @v 源点编号    @dist 记录源点到各顶点的（当前所得）SP的长度    @prior 记录n-1条最短路径. prior[k]:最短路径上,第k顶点的前驱顶点号*/    void Dijkstra(MGraph g, int v, float dist[], int prior[])    &#123;        int n = g.vexnum;        bool Final[n];        int i, j, k;        float w, min;            /**设置初始状态 */        for (i = 0; i &lt; n; i++)        &#123;            Final[i] = false;            // 初始,各点的SP只能为由源点直达i,相应设置dist，prior            dist[i] =  g.arcs[v][i];            if (i!=v &amp;&amp; dist[i] &lt;INFINITY)                prior[i] = v;  // 源点直达,故终点前驱为源点            else                prior[i] = -1;  //源点至i无路,或i即为源点        &#125;        Final[v] = true;// 源点v也即终点                /** 按长度递增，求源点v到各顶点的SP*/        for (i = 0; i &lt; n-1; i++)        &#123;            /** 选择:挑选最短的SP（其经过的顶点全来自S） */            int u;            min = INFINITY;                for (j = 0; j &lt; n; j++)            &#123;                if (!Final[j] &amp;&amp; dist[j] &lt; min)                &#123;                    u = j;                    min = dist[j];                &#125;            &#125;            Final[u] = true;  //v到u的SP已求得,则顶点u加入集S                /**更新状态:以新选择的顶点u,来更新dist和prior向量 */            for (k = 0; k &lt; n; k++)            &#123;                w = g.arcs[u][k];                /* 若从顶点u &quot;扩展&quot;一条边&lt;u,k&gt;的SP长度更短 */                if (!Final[k] &amp;&amp; w &lt; INFINITY &amp;&amp;                        dist[u]+w &lt; dist[k] )                &#123;                    dist[k] = dist[u] + w; //更新SP长度                    prior[k] = u;         // 更新SP，顶点k的前驱是u                &#125;            &#125; //for        &#125;    &#125;            /** 递归：输出从源点s(prior[s]=-1)到v的SP,从v回溯到s.        Note:  Dijkstra算法和Floyd算法,均以此函数来输出某源点到各点的SP */    void Traceback(MGraph g, int prior[],int v)    &#123;        if( prior[v] == -1 )        &#123;            cout &lt;&lt; g.vexs[v] &lt;&lt; &quot; &quot;;            return;        &#125;        Traceback(g,prior,prior[v]);        cout &lt;&lt; g.vexs[v] &lt;&lt; &quot; &quot;;    &#125;        /** 输出从源点s到v的各条SP,及其长度 */    void Dijkstra_SP(MGraph g, int v)    &#123;        int n = g.vexnum;            float dist[n];        int   prior[n];            Dijkstra(g,v,dist,prior);        cout &lt;&lt; &quot;Shortest Path from &quot; &lt;&lt; g.vexs[v] &lt;&lt; endl;        for(int i=0; i&lt;n; i++)        &#123;                if(i==v || dist[i] == INFINITY) //i为源点,或源点到i无路径,就算哒                continue;                cout &lt;&lt;&quot;\t sp_len =  &quot; &lt;&lt;  dist[i] &lt;&lt; &quot;  &quot;;  //输出SP长度            Traceback(g,prior,i);      //输出SP                cout &lt;&lt; endl;        &#125;    &#125;</code></pre><p>输出结果：</p><pre><code>    -------- Dijkstra ----------    Shortest Path from A            sp_len =  10  A C            sp_len =  50  A E D            sp_len =  30  A E            sp_len =  60  A E D F    --------------------------------  </code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dijkstra算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prim算法详解</title>
      <link href="/2020/10/27/prim-suan-fa-xiang-jie/"/>
      <url>/2020/10/27/prim-suan-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Prim算法</title></head><body>    Prim算法可用来构造图的最小生成树<h3>大概思路:<h3>&nbsp&nbsp&nbsp&nbsp&nbsp将图分为两部分，第一部分是已经加入最小生成树中的点，第二部分是未加入最小生成树的点，初始时，第一部分只有一个任选的顶点。在第二部分中找出距离第一部分中顶点最近的顶点以及对应的距离，将该顶点加入第一部分，依次类推，直到所有顶点都加入第一部分 <br><h3>算法步骤:</h3>    <ol>        <li>创建一个结构数组，数组的序号代表顶点的编号。数组元素包括每个未在最小生成树中的顶点离最小生成树中哪一个顶点(adindex)最近和相应的距离(closedge)，若距离为零则该顶点已在最小生成树中。</li>        <li>初始时，任选一顶点V1放入最小生成树中，记录其余顶点到v1的距离lowcost（x表示不能一条边连通，无穷远）</li>        <li>找出数组中lowcost最小值及对应的顶点，将该顶点放入MST，该顶点的lowcost置为0</li>        <li>分别将lowcost不为0（不在MST中）的顶点v到最新加入MST的顶点的距离与 到与v的adjvex值对应的顶点的距离相比较，选出较小值及对应的顶点，更新lowcast</li>        <li>重复步骤2，3直到数组中所有的lowcost为0，即所有顶点均加入MST，最小生成树MST就此生成</li>    </ol><BR>    <h3>图例说明:</h3>eg:对于原图：<br><img src="https://img-blog.csdn.net/20140816180420993" alt="图例说明"> <br> <br>1.任选一顶点V1放入最小生成树中，记录其余顶点到v1的距离lowcost（x表示不能一条边连通，无穷远）<table>    <tr>        <th>index</th>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>    </tr>    <tr>        <th>adjvex</th>        <td>1</td>        <td>1</td>        <td>1</td>        <td>1</td>        <td>1</td>        <td>1</td>    </tr>    <tr>        <th>lowcost</th>        <td>0</td>        <td>6</td>        <td>1</td>        <td>5</td>        <td>x</td>        <td>x</td>    </tr></table><br>2.找出lowcost最小值1及对应的顶点v3，将v3放入MST，v3的lowcost为0 <br><table>    <tr>        <th>index</th>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>    </tr>    <tr>        <th>adjvex</th>        <td>1</td>        <td>1</td>        <td>3</td>        <td>1</td>        <td>1</td>        <td>1</td>    </tr>    <tr>        <th>lowcost</th>        <td>0</td>        <td>6</td>        <td>0</td>        <td>5</td>        <td>x</td>        <td>x</td>    </tr></table><img src="https://img-blog.csdn.net/20140816181809296" alt="图例说明"> <br><br>3.分别将lowcost不为0（不在MST中）的顶点到新加入MST的v3的距离与到与序号相对应的adjvex值的顶点距离相比较（eg：选序号顶点v2，序号2中adjvex为1，则将v2到v1的距离与v2到v3的距离相比较），选出较小值及对应的顶点，更新lowcast,eg:v2距离v1为6，距离v3为5，v2离v3更近，则将序号为2的元素中adjvex更新为3，lowcost更新为5，依此类推。<br><table>    <tr>        <th>index</th>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>    </tr>    <tr>        <th>adjvex</th>        <td>1</td>        <td>3</td>        <td>1</td>        <td>3</td>        <td>3</td>        <td>3</td>    </tr>    <tr>        <th>lowcost</th>        <td>0</td>        <td>5</td>        <td>0</td>        <td>5</td>        <td>6</td>        <td>4</td>    </tr></table><br>4.找出lowcast最小值为4，对应顶点v6，将v6放入MST中，v6的lowcast为0 <br><table>    <tr>        <th>index</th>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>    </tr>    <tr>        <th>adjvex</th>        <td>1</td>        <td>3</td>        <td>1</td>        <td>3</td>        <td>3</td>        <td>3</td>    </tr>    <tr>        <th>lowcost</th>        <td>0</td>        <td>5</td>        <td>0</td>        <td>5</td>        <td>6</td>        <td>0</td>    </tr></table><img src="https://img-blog.csdn.net/20140816182214390" alt="图例说明"> <br><br>5.分别将lowcost不为0（不在MST中）的顶点到新加入MST的v3的距离与到上一加入MST的v1的距离相比较，选出较小值及对应的顶点，更新lowcast <br><table>    <tr>        <th>index</th>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>    </tr>    <tr>        <th>adjvex</th>        <td>1</td>        <td>3</td>        <td>1</td>        <td>6</td>        <td>6</td>        <td>3</td>    </tr>    <tr>        <th>lowcost</th>        <td>0</td>        <td>5</td>        <td>0</td>        <td>2</td>        <td>6</td>        <td>0</td>    </tr></table><br>6.找出lowcast最小值为2，对应顶点v4，将v4放入MST中，v4的lowcast为0<table>    <tr>        <th>index</th>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>    </tr>    <tr>        <th>adjvex</th>        <td>1</td>        <td>3</td>        <td>1</td>        <td>6</td>        <td>6</td>        <td>3</td>    </tr>    <tr>        <th>lowcost</th>        <td>0</td>        <td>5</td>        <td>0</td>        <td>0</td>        <td>6</td>        <td>0</td>    </tr></table><img src="https://img-blog.csdn.net/20140816182451906" alt="图例"> <br><br>7.依次类推，最后得到的数组及最小生成树如下：<br><table>    <tr>        <th>index</th>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>    </tr>    <tr>        <th>adjvex</th>        <td>1</td>        <td>3</td>        <td>1</td>        <td>6</td>        <td>2</td>        <td>3</td>    </tr>    <tr>        <th>lowcost</th>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>    </tr></table><img src="https://img-blog.csdn.net/20140816183241396" alt="图例"> <br><br><br><h3>代码：</h3><pre><code>/**prime算法：从u号顶点出发构造最小生成树(MST)*/void miniSpan(MGraph g, int u)&#123;    closedge[u].lowcost = 0;  // S集(已经纳入生成树的点)初始仅有u顶点    // 其余顶点i距S集最近的邻接点是u顶点(初始仅有u顶点)，距离即(u,i)的长度    for(int i=1; i&lt;=g.vexnum; i++)    &#123;        if(i!=u)        &#123;            closedge[i].adjvex = u;            closedge[i].lowcost = g.matrix[u][i];        &#125;    &#125;    /**进行n-1次选择:将所有顶点逐个加入S集,对应最近边即为是MST的边，输出此边*/    for(int i=1; i&lt;g.vexnum; i++)    &#123;        /** 寻找closedge中lowcost最小,且 lowcost！=0(只考察在S集外的点)的顶点k        k号顶点即为S集外，距S集合中某点最近的点*/        int k;        for(k=1; closedge[k].lowcost == 0; k++) // 先找到第一个locaost不等于0的顶点k            ;        for(int t=k+1; t&lt;=g.vexnum; t++)        &#123;            if(closedge[t].lowcost&gt;0 &amp;&amp;  closedge[t].lowcost&lt; closedge[k].lowcost)            &#123;                k = t;            &#125;        &#125;        printf(&quot;%d  --- %d\n&quot;, closedge[k].adjvex, k);  // 输出一条边        closedge[k].lowcost = 0;  // k号顶点加入S集合        /*因为k新加入S集合，需以此更新closedge：逐一考察各顶点是否与k顶点的边更近*/        for (int j=1; j&lt;=g.vexnum; j++)        &#123;            if(g.matrix[k][j] &lt;closedge[j].lowcost) // j距离k点更短 则以此更新            &#123;                closedge[j].adjvex = k;                closedge[j].lowcost = g.matrix[k][j];            &#125;        &#125;    &#125;&#125;</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prim算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的基本操作</title>
      <link href="/2020/10/24/tu-de-ji-ben-cao-zuo/"/>
      <url>/2020/10/24/tu-de-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Document</title></head><body>    <h3>图的基本常识</h3>    <p>&nbsp&nbsp&nbsp&nbsp&nbsp<strong>图</strong>表现的是多对多的关系（链表表现的是一对一的关系，而树表现的是一对多的关系，树是图的特例）。图中储存数据元素的结构体称为<strong>顶点</strong>（通常用Vi表示）；从一个顶点到另一顶点所经过的所有顶点组成的序列称作一条 <strong> 路径</strong>；将顶点连接起来的线称作   <strong>边</strong>（有向图中称作弧）；图分为有向图和无向图，<strong>有向图</strong>中每条路径都是有方向的，且构成路径的序列顺序沿弧的方向排列，不可反向，就像单行路不可逆行一样。无向图中描述两顶点V1 和 V2之间的关系可以用 (V1,V2) 来表示，而有向图中描述从V1到V2的单向关系用 < V1,V2 >表示；<strong>权</strong>表示某边（弧）在图中的重要程度，就像路线图中有主干通道和小路一样，权通常标在边上；带权的图称作 <strong>网</strong>。</p> <br>    <img src="http://data.biancheng.net/uploads/allimg/190103/2-1Z1032054241T.gif" alt="无向图">    <img src="http://data.biancheng.net/uploads/allimg/190103/2-1Z1032055151L.gif" alt="有向图">    <img src="http://data.biancheng.net/uploads/allimg/190103/2-1Z10321001LT.gif" alt="网"><h2>图的基本操作</h2>    首先准备工作： <br><pre><code>    #include &lt;iostream&gt;    #include &lt;queue&gt;    #include &lt;fstream&gt;    #include &lt;vector&gt;        using namespace std;        const int MAX = 20;    // 常量：最多顶点数，用来分配数组长度    const int INF = 99999; // 常量：无限大,带权图中表示不邻接的两顶点的距离        typedef char T;  // 元素类型       </code></pre><h3>图的邻接表储存</h3>    <p>&nbsp&nbsp&nbsp&nbsp图是一个多对多的关系，那么如何将图中的各个顶点储存并且可以表现顶点与顶点之间的关系呢？<br>    这里我们介绍邻接表的储存方式：<br>将图的所有顶点储存在一个结构体数组中，每个顶点结构体包括顶点数据和一个指向顶点邻接顶点的指针域，而邻接顶点结点包括邻接顶点的数据和指向下一个邻接结点的指针，这样一来一个顶点的所有邻接顶点就构成了一个链表。此种储存方式中，通过顶点构成的数组的下标可以不重复地找到所有顶点，而每个顶点的邻接顶点可以通过顶点的指针域指向的链表找到，这样既可以得到所有顶点的数据又可以很清晰地表示顶点与顶点之间的关系。邻接表适合稀疏图。<br></p>     <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.58cn38kqobgg.png" alt="邻接表储存图示"> <br><br>    代码：<pre><code>    //先定义边表的边结点类型ArcNode    struct ArcNode    &#123;        int adjV;  // 邻接点的编号        float weight; //边的权,本程序并未使用        ArcNode *nextArc;        &#125;;        // 再定义顶点结点 和邻接表类型    typedef    struct VNode    &#123;        T data;             // 顶点数据        ArcNode *firstArc;  // 链表的头指针,此点的所有邻接边构成的链表    &#125; AdjList[MAX]; // 顶点结点的顺序表(数组)即为邻接表类型：AdjList        // 最后定义邻接表表示图的存储结构ALGraph    typedef    struct    &#123;        AdjList vertices; // 邻接表        int vexnum,arcnum; // 定点数和边数        int kind;   // 图的类型:有向、无向、带权.(本程序未使用)    &#125; ALGraph;    /** 从名为fn的文件中读取数据,生成并返回邻接表所表示的图 (为简便，本程序只盘有向图)    数据的格式说明见数据文件*/ALGraph crateGraph(char* fn)&#123;    ifstream ifs(fn);    ALGraph alg;    ifs&gt;&gt; alg.vexnum &gt;&gt; alg.arcnum; // 读入顶点数和边数    /* 读入并存储顶点,初始边链表为空*/    for(int i=1; i&lt;=alg.vexnum; i++)    &#123;        ifs &gt;&gt; alg.vertices[i].data;        alg.vertices[i].firstArc = 0;  // 空链表    &#125;    /* 存储输入的边*/    int i,j;    for(int k=1; k&lt;=alg.arcnum; k++)    &#123;        /*输入&lt;i,j&gt;边,则在第i个链表头插入一个边结点(adjV为j）*/        ifs &gt;&gt; i &gt;&gt; j ;        ArcNode *p = new ArcNode;        p-&gt;adjV = j;        // 链表头部插入结点,更方便. alg.vertices[i].firstArc是第i个链表的头指针        p-&gt;nextArc = alg.vertices[i].firstArc;        alg.vertices[i].firstArc = p;    &#125;    return alg;&#125;</code></pre><h3>图的遍历</h3>&nbsp&nbsp&nbsp&nbsp&nbsp图的遍历分为两种：基于深度优先搜索（DFS）的遍历和基于广度优先搜索的遍历（WFS），下面我们将一一介绍。<br><br><h4>深搜（DFS）</h4><strong>大概思路</strong>：<br> 图的深搜类似于树的前序遍历，先访问一个未被访问过的顶点，访问它的一个邻接顶点，访问邻接顶点的一个邻接顶点，将访问过的顶点标记，若遇到访问过的顶点则回到上一个顶点，访问上一个顶点的另一个邻接顶点，直到所有的相邻的顶点均被访问。从上述可以看出，深搜可以将所有连续相邻的顶点访问到，如果是连通图一次深搜就可以将所有顶点访问到，而对于非连通图一次深搜是不能将所有顶点都访问到。<br><strong>连接表分析：</strong> <br>&nbsp&nbsp&nbsp&nbsp&nbsp eg：对于<br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.58cn38kqobgg.png" alt="连接表"> <br>初始时所有顶点都未被访问过，则访问过程如下：<br><ol>    <li>从A开始，在顶点数组中找到A，访问A，标记A，在A的边链表中找到A的邻接顶点B</li>    <li>在顶点数组中找到B，访问B，标记B，在B的边链表中找到B的邻接结点C</li>    <li>在顶点数组中找到C，访问C，标记C，在C的边链表中找到C的邻接结点A</li>    <li>在顶点数组中找到A，A被标记，回到C，在C的边链表中找到C的第二个邻接结点B</li>    <li>在顶点数组中找到B，B被标记，回到C，在C的边链表中找到C的第三个邻接结点为空，访问结束。</li></ol> 访问结果为：A,B,C <br><br><strong>实现思路</strong>：<br><ol>    <li> 要对所有的顶点进行访问标记，并且由于基于深搜的遍历函数中需要多次调用该函数且保留访问记录，因此可用一个全局的布尔型数组Visited来存放顶点的访问状态，数组容量为所有顶点的个数</li>    <li>访问过程中遇到访问过的顶点要回到上一个顶点访问它的另一个相邻顶点，且对每一个顶点的操作相同，这是一个不断回溯的过程，可用递归实现</li>    <li>要将所有的连续相邻顶点访问到，则递归的结束条件是最后一个相邻顶点没有与之相邻的顶点了，而相邻顶点存放在边链表ArcNode中，那么递归结束条件是ArcNode链表的结点的nextArt域为空。这个过程可用循环来实现，循环条件是ArcNode链表中结点的nextArt不为空。</li></ol><strong>代码：</strong><pre><code>    bool Visited[MAX];//顶点访问标志 Visited[i]=true 表示第i顶点已访问    /**从第v顶点出发,对邻接表图g进行DeepFirstSearch(DFS)*/    void DFS(ALGraph g, int v)    &#123;        Visited[v] = true;          cout &lt;&lt; g.vertices[v].data &lt;&lt;&quot; &quot;;        /*从v各未被访问的邻接点出发DFS*/        for(ArcNode *p=g.vertices[v].firstArc; p; p=p-&gt;nextArc )        &#123;            if(Visited[p-&gt;adjV]==false)                DFS(g,p-&gt;adjV);        &#125;    &#125;</code></pre><h4>基于DFS的遍历</h4><strong>思路：</strong>对每一个顶点进行深搜，每次深搜之前都要将访问标记归零 <br><strong>代码：</strong><pre><code>    /**对邻接表图g进行基于DFS的遍历*/    void DFSTraverse(ALGraph g)    &#123;        /*  初始化访问标记*/        for(int i=1; i&lt;=g.vexnum; i++)            Visited[i]  =false;        /**从各未访问的顶点DFS.  注:对于连通图,从任一顶点出发DFS,即可遍历所有顶点*/        for(int i=1; i&lt;=g.vexnum; i++)        &#123;            if(!Visited[i])                DFS(g,i);        &#125;    &#125;</code></pre><h4>广搜（WFS）</h4><strong>大概思路：</strong> 广搜类似于树的层次遍历，将一个顶点的所有邻接顶点访问完后，在分别访问每一个临接顶点的所有邻接顶点 <br><strong>邻接表分析：</strong>还是上图 <br><ol>    <li>从A开始，在顶点数组中找到A，访问A，在A的边链表中，依次访问A的所有邻接顶点B，C，D，并作标记</li>    <li>分别依次访问B，C，D的所有邻接顶点 <br>        <ol>            <li>在顶点数组中找到B，在B的边链表中，依次访问B的邻接结点C，并作标记</li>            <li>在顶点数组中找到C，在C的边链表中，A，B，已被访问过，跳过</li>            <li>在顶点数组中找到D，在D的边链表中，D的邻接结点为空。</li>        </ol>    </li><br> B，C，D所有邻接结点访问完毕，访问结束。</ol><p><strong>实现思路：</strong> <br></p><ol>    <li>由于顶点邻接顶点的邻接顶点的访问顺序是按邻接结点的顺序来的，即先被访问的邻接顶点，它的邻接点先被访问（有点拗口），由此可以队列来存放邻接顶点</li>    <li>        依次访问每一个邻接顶点的所有邻接顶点，而邻接结点可能也有邻接顶点，故用双层循环实现，外层循环输出起始顶点的邻接顶点，循环条件为起始顶点的邻接结点未被完全访问，即队列不为空；内层循环访问每一个邻接结点的邻接结点，循环条件为边链表结点未被完全访问。    </li></ol><p><strong>代码：</strong></p><pre><code>    void BFS(ALGraph g, int v)    &#123;        queue&lt;int&gt; q; // FIFO：先访问的顶点,其邻接点也先访问        if( Visited[v])  // 访问过的顶点,不再盘            return;        cout &lt;&lt; g.vertices[v].data &lt;&lt; &quot; &quot;;        Visited[v] = true;        q.push(v);         //先访问的顶点先放入队列        while(!q.empty())  //当起始顶点的邻接顶点未被全部访问，输出起始顶点邻接顶点的数据        &#123;            int u = q.front();            q.pop();      //访问过的顶点出队列            for(ArcNode* p = g.vertices[u].firstArc; p; p=p-&gt;nextArc)   //访问邻接顶点的邻接顶点，即顶点的边链表            &#123;                int w = p-&gt;adjV; //w是u号顶点各邻接点的编号                if(!Visited[w])                &#123;                    Visited[w] = true;                    cout &lt;&lt; g.vertices[w].data &lt;&lt; &quot; &quot;;                    q.push(w);     //未被访问过的顶点放入队列，之后再访问它的邻接顶点                &#125;            &#125;        &#125;    &#125;</code></pre><h4>基于WFS的遍历</h4><strong>思路：</strong>对每一个顶点进行广搜<br><strong>代码：</strong><pre><code>    /**对邻接表图g进行基于BFS的遍历*/    void BFSTravse(ALGraph g)    &#123;        /*  初始化访问标记*/        for(int i=1; i&lt;=g.vexnum; i++)            Visited[i]  =false;        /**从各未访问的顶点BFS.对于连通图,从任一顶点出发BFS,即可遍历*/        for(int v=1; v&lt;=g.vexnum; v++)        &#123;            BFS(g,v);        &#125;    &#125;</code></pre><h3>输出路径</h3>  <strong>思路：</strong>  类似于树的路径输出，用递归实现。将路径分成第一个顶点和第一个顶点的邻接结点两部分进行路径搜索，而邻接结点同样可以分成上述两部分。  一直进行递归操作直到顶点没有邻接顶点了，也就是说递归结束条件是起始顶点等于终止顶点。 <br><strong>代码：</strong><pre><code>    /**基于DFS,输出图g中，从v到d顶点的路径 */    void  Search(ALGraph g, int v, int d, vector&lt;int&gt; path )//将顶点的编号放入线性表中     &#123;        Visited[v] = true;  //从顶点v开始，访问过就标记         path.push_back(v);        if(v==d)          //始终顶点相同，递归结束，回溯，输出路径        &#123;            for(int i=0; i&lt;path.size(); i++)                cout &lt;&lt; g.vertices[path[i]].data &lt;&lt; &quot;,&quot;;            cout &lt;&lt; endl&lt;&lt;&quot;----&quot;&lt;&lt;endl;        &#125;        for(ArcNode *p=g.vertices[v].firstArc; p; p=p-&gt;nextArc ) //对每一个邻接结点进行递归搜索         &#123;            if( !Visited[p-&gt;adjV])                Search(g,p-&gt;adjV, d, path);         &#125;    &#125;</code></pre><br><h3>构造最小生成树</h3><h4>什么是最小生成树？</h4><p>用最少的边将图中所有顶点连接起来且要使边权和最小，而将n个顶点全都连起来所需的最少边数为n-1。也就是说找出图中n-1条边使得n个结点都是连通的，但是边权值总和最小而产生的一个子图叫最小生成树。</p>这里介绍 <a href="https://icecream-tu.cn/2020/10/27/prim-suan-fa-xiang-jie/"> <strong>prim算法</strong></a>构造最小生成树。<br><h3>求两顶点之间的最短路径</h3>这里介绍两种算法：<a href="https://icecream-tu.cn/2020/10/27/dijkstra-suan-fa-xiang-jie/">Dijkstra算法</a>和 <a href="https://icecream-tu.cn/2020/10/30/floyd-suan-fa-xiang-jie/">Floyd算法</a>求两顶点之间的最短路径。 <br><strong> 求单源点无负边最短路径用Dijkstra，而求所有点最短路径用Floyd。</strong></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼树和哈夫曼编码</title>
      <link href="/2020/10/20/ha-fu-man-shu-he-ha-fu-man-bian-ma/"/>
      <url>/2020/10/20/ha-fu-man-shu-he-ha-fu-man-bian-ma/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>哈夫曼树和哈夫曼编码</title>    <style>        a {            text-decoration: none;        }    </style></head><body>    <h3>引例</h3>为了更好地理解哈夫曼树的用途我们先来看一个引例    <img src="../images/HuffmanTree1.jpg" alt="哈夫曼树引例"> <br>    <img src="../images/Hu.jpg" alt="哈夫曼树引例"> <br>    <img src="../images/HuffmanTree2.jpg" alt="哈夫曼树引例"> <br><h3>什么是哈夫曼树？</h3>    <p>首先我们来了解一下什么是带权路径长度：从树根结点到任意结点的路径长度（经过的边数）与该结点上权值的乘积，称为该结点的带权路径长度。<br>         给定N个权值作为N个叶子结点，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。哈夫曼树并不唯一，但带权路径长度一定是相同的。利用哈夫曼树可以根据结点不同的查找频率来提高搜索效率</p>    <h3>怎么构建哈夫曼树？</h3>    算法：<br>    <ol>        <li>将叶子结点按权值从小到大排序构成森林</li>        <li>从森林中取出最小的两个结点构成一棵新树，两较小结点作为新树的左右子树，新树的权值为两较小结点权值之和，从森林中删去取出的结点并将构成的新树加入森林中（ <strong>注意：我们需要保证Huffman树的编码是前缀编码，因此它必须是一颗满树，同时只能在叶子节点中存储具体的字符。 </strong> ）</li>        <li>重复操作2，直到森林中只剩一棵树，该树即为哈夫曼树</li>    </ol>    <br>图示：<br>eg:有结点{10，20，30，40}，以这四个权值构建哈夫曼树的过程如下<br><img src="../images/HuffmanTree3.jpg" alt="构建哈夫曼树图解"><br><br><h3>哈夫曼编码</h3><h4>什么是哈夫曼编码？</h4><p>出现频率较高的符号用较短的编码表示，出现频率较低的符号用较长的编码表示。这样就降低了编码之后的字符串长度，达到压缩数据的目的。对于一个已经压缩好的数据文件，我们只需要拥有对应的编码表，则可将其展开。 </p><h3>哈夫曼树的操作</h3><h4>准备工作：</h4><p>有关c++优先队列(priority_queue)的用法可以看 <a href="https://blog.csdn.net/weixin_36888577/article/details/79937886">这里</a> </p><pre><code>    #include &lt;iostream&gt;    #include &lt;queue&gt;    #include &lt;map&gt;    #include &lt;sstream&gt;    using namespace std;        /** 定义二叉树Htree (HuffmanTree)*/    typedef    struct Node    &#123;        float weight;  // 权:叶子权为字符频次,有分支结点则为左右子树权值和        char alpha;    // 结点字符：叶子结点为编码字符，分支结点字符则为哑元&#39;\0&#39;        Node *lch;        Node *rch;        Node(float e,char ch=0,Node *lt=0, Node *rt=0) // ctor构造根结点：权值e，字符ch，左右子树lt,rt            :weight(e),alpha(ch),lch(lt),rch(rt) &#123;&#125;    &#125;*HTree;        /* 重载运算符()的类,其行为仿似函数,故名仿函数    Lt定义了树之优先级:根权值大者优先级高 */    struct Lt    &#123;        bool operator()(HTree ta, HTree tb)        &#123;            return ta-&gt;weight &gt; tb-&gt;weight;        &#125;    &#125;;        typedef map&lt;char,string&gt; Dict; // 编码字典类型Dict：字符为键,编码为值    </code></pre><h4>哈夫曼树的构建</h4> <pre><code>    /*利用字符数组alpha[0..n-1]和对应权值数组ws[0:n-1],构造HuffmanTree*/    HTree  CreateHT(char alphs[],float ws[], int n)    &#123;        /*优先队列类：元素类型是树,底层采用顺序表vector,元素优先级采用Lt类中定义的operator()*/        priority_queue&lt; HTree, vector&lt;HTree&gt;, Lt &gt; forest;            for(int i=0; i&lt;n; i++)  //输入n个结点，创建结点的树林         &#123;            forest.push( new Node(ws[i],alphs[i]));        &#125;        for(int i=0; i&lt;n-1; i++)   //两两合并n-1次        &#123;            HTree t1 = forest.top();   //取出最小的树t1            forest.pop();              //删去t1             HTree t2 = forest.top();   //再取最小的t2            forest.pop();              //删去t2                 float w = t1-&gt;weight + t2-&gt;weight;            forest.push(new Node(w,0,t1,t2));   // 合并为新树,新数结点字符为&#39;\0&#39;,加入森林        &#125;            return forest.top(); // 森林中最后一棵树 即所建huffman树    &#125;</code></pre><h4>生成密码字典（哈夫曼编码）</h4> <pre><code>    /*通过遍历Hufman树t,生成密码字典dict*/    void generateDict(HTree t, Dict &amp;dict)    &#123;        static string code; //字符密码            if(0==t)            return;        if(t-&gt;alpha!=0)     //达到叶子结点,得该字符的编码(唯叶子字符不为\0)            dict[t-&gt;alpha] = code; // 字典增一项            code +=&#39;0&#39;;  // 左走为0        generateDict(t-&gt;lch,dict);        code.erase(code.end()-1); // 回溯：删除进入左子树时,在串尾添加的0            code+=&#39;1&#39;;  // 右走为0        generateDict(t-&gt;rch,dict);        code.erase(code.end()-1); // 回溯：删除进入右子树时,在串尾添加的1            return;    &#125;    </code></pre><h4>对字符串进行编码</h4><pre><code>    /**使用编码字典dict,返回串txt的编码*/    string encode(string txt,  Dict dict)    &#123;        string code;            for(int i=0; i&lt;txt.size(); i++)            code += dict[ txt[i] ]; // 查字典dict得txt[i]的编码            return code;    &#125;    </code></pre><h4>解码</h4><pre><code>    /**使用Huffman树t解码code，返回解码后的报文*/    string Decode(HTree t, string code)    &#123;        string txt;        istringstream in(code); // 字符串输入流 in        Node *p = t; // 从根开始解码            char dire;            while( in&gt;&gt;dire ) // 依次读入各字符        &#123;            p = (&#39;0&#39;==dire ? p-&gt;lch :p-&gt;rch);  // 0向左走,1向右走                if( p-&gt;alpha )  //到达叶子得一字符            &#123;                txt += p-&gt;alpha;                p = t;  // 重新从根开始解码下一个字符            &#125;        &#125;            return txt;    &#125;    </code></pre><h4>主函数</h4><pre><code>    int main()    &#123;        char alphs[] = &quot;ABCD&quot;;        float ws[] = &#123;9,4,5,2&#125;;//分别对应ABCD的权值        int n = 4;        Dict dict; // 编码字典            HTree t = CreateHT(alphs,ws, n); // 构造Huffman树t        generateDict(t,dict);   //以Huffman树来构造字典dict            cout &lt;&lt; encode(&quot;ABC&quot;,dict) &lt;&lt;endl;  // 输出&quot;ABC&quot;的编码        cout &lt;&lt; Decode(t,&quot;011110&quot;);   // 输出编码&quot;011110&quot;的报文            return 0;    &#125;</code></pre><p>运行结果：<br></p><pre><code>    011110    ABC   </code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈夫曼树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树刷题总结</title>
      <link href="/2020/10/07/er-cha-sou-suo-shu-shua-ti-zong-jie/"/>
      <url>/2020/10/07/er-cha-sou-suo-shu-shua-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>原文：<a href="https://labuladong.gitee.io/algo/2/20/41/">https://labuladong.gitee.io/algo/2/20/41/</a></p><p>二叉搜索树BST并不复杂，但十分重要，许多数据结构（例如：AVL树、红黑树、B+树、线段树等）都是基于BST的思想设计的。BST在二叉树结构基础上有所改变，使其具有“左小右大”的特性：</p><ol><li>对于 BST 的每一个节点 <code>node</code>，左子树节点的值都比 <code>node</code> 的值要小，右子树节点的值都比 <code>node</code> 的值大。</li><li>对于 BST 的每一个节点 <code>node</code>，它的左侧子树和右侧子树都是 BST。</li></ol><p>总而言之，BST左边要比右边大，根节点排在中间。基于BST“左小右大”的特性，衍生出一些做题方向，本篇简要说说二叉搜索树BST刷题总结。</p><h4 id="BST中序遍历"><a href="#BST中序遍历" class="headerlink" title="BST中序遍历"></a>BST中序遍历</h4><p>​BST左子树小于根节点小于右子树，它的<strong>中序递归遍历结果是升序的，改变左右子树的递归顺序也可以得到降序结果。</strong></p><p>①升序打印节点的值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 中序遍历代码位置</span>    <span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②降序打印结点的值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 先递归遍历右子树</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 中序遍历代码位置</span>    <span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后递归遍历左子树</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​eg：力扣98题<a href="https://leetcode-cn.com/problems/validate-binary-search-tree">判断BST合法性</a>，根据BST中序遍历结果一定是升序，在中序遍历的时候实时检查当前节点的值是否大于前一个中序遍历到的节点的值即可判断BST的合法性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 记录上一个节点的值，初始值为Long的最小值</span><span class="token keyword">long</span> pre <span class="token operator">=</span> Long<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span> <span class="token keyword">boolean</span> <span class="token function">inorder</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> l <span class="token operator">=</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> pre<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录上一个节点的值</span>    pre <span class="token operator">=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> r <span class="token operator">=</span> <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> l <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​eg：力扣538题<a href="https://leetcode-cn.com/problems/convert-bst-to-greater-tree">二叉搜索树转化累加树</a>，根据题目要求，我们需要计算大于等于当前值的所有元素之和，调整BST左右子树递归顺序可以得到降序结果，如果设置一个外部累加变量sum，然后将sum赋值给BST每个节点，此题便迎刃而解。</p><pre class="line-numbers language-java"><code class="language-java">TreeNode <span class="token function">convertBST</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 记录累加和</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 维护累加和</span>    sum <span class="token operator">+=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将 BST 转化成累加树</span>    root<span class="token punctuation">.</span>val <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BST二分搜索"><a href="#BST二分搜索" class="headerlink" title="BST二分搜索"></a>BST二分搜索</h4><p>​<strong>鉴于BST”左小右大“的性质，在BST中做类似二分搜索的操作，每个节点都可以通过对比自身的值判断去左子树还是右子树搜索目标值，减小搜索范围，避免全树遍历，提高搜索效率。</strong></p><p><strong>BST常见代码框架</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">BST</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 找到目标，做点什么</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 目标大于根节点，右子树搜索   </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>         <span class="token function">BST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 目标小于根节点，左子树搜索</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">></span> target<span class="token punctuation">)</span>        <span class="token function">BST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>​二叉搜索树的基本操作没有写过，又很重要，这次就着BST“二分搜索”一起说了，正好BST的增删查基本操作用到了该思路。对数据结构的操作无非遍历 + 访问，<strong>遍历就是「找」，访问就是「改」</strong>，「改」在「找」的基础上进行操作，对于二叉树而言，一旦涉及到「改」，函数就要返回TreeNode类型，并对递归调用的返回值进行接收。</p><h5 id="在BST中搜索元素"><a href="#在BST中搜索元素" class="headerlink" title="在BST中搜索元素"></a>在BST中搜索元素</h5><p>eg：力扣700题<a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree">二叉搜索树中的搜索</a>，在BST中搜索值为target的节点</p><pre class="line-numbers language-java"><code class="language-java">TreeNode <span class="token function">searchBST</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 去左子树搜索</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 去右子树搜索</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="在BST中插入一个数"><a href="#在BST中插入一个数" class="headerlink" title="在BST中插入一个数"></a>在BST中插入一个数</h5><p>eg：力扣701题 <a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree">二叉搜索树的插入操作</a>，插入一个数，就是先找到插入位置，然后进行插入操作。</p><pre class="line-numbers language-java"><code class="language-java">TreeNode <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 找到空位置插入新节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// if (root.val == val)</span>    <span class="token comment" spellcheck="true">//     BST 中一般不会插入已存在元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span>         root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">></span> val<span class="token punctuation">)</span>         root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于BST根节点子树数量固定（2）且左小右大，插入的数最后一定是叶子节点，不会对整个树造成破坏。</p><h5 id="在BST中删除一个数"><a href="#在BST中删除一个数" class="headerlink" title="在BST中删除一个数"></a>在BST中删除一个数</h5><p>eg：力扣450题 <a href="https://leetcode-cn.com/problems/delete-node-in-a-bst">删除二叉搜索树中的节点</a>，删除的节点可能是叶子节点，可能有一个孩子节点，可能有两个孩子节点。叶子节点可以直接删，有孩子节点删除的话会破坏整个二叉树的结构，导致二叉树不满足左小右大的性质，需要重构BST。</p><ol><li>删除节点正好是末端节点，直接删除</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><p>删除节点有一个孩子，由于BST左侧所有的节点都小于右侧所有的节点，同侧树枝性质相同，删除节点，可以直接让该节点的孩子接替自己（各种情况可以一一列举）。</p><p><img src="https://labuladong.gitee.io/algo/images/BST/bst_deletion_case_2.png"></p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 排除了情况 1 之后</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.删除节点有两个节点，为了不破坏 BST 的性质，<code>A</code> 必须找到左子树中最大的那个节点，或者右子树中最小的那个节点来接替自己，而BST中最左边的就是最小的，最右边就是最大的。我们以第二种方式讲解。</p><p><img src="https://labuladong.gitee.io/algo/images/BST/bst_deletion_case_3.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 找到右子树的最小节点</span>    TreeNode minNode <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把 root 改成 minNode</span>    root<span class="token punctuation">.</span>val <span class="token operator">=</span> minNode<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 转而去删除 minNode</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> minNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除BST中节点解法：</p><pre class="line-numbers language-java"><code class="language-java">TreeNode <span class="token function">deleteNode</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这两个 if 把情况 1 和 2 都正确处理了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理情况 3</span>        <span class="token comment" spellcheck="true">// 获得右子树最小的节点</span>        TreeNode minNode <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除右子树最小的节点</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> minNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用右子树最小的节点替换 root 节点</span>        minNode<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        minNode<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        root <span class="token operator">=</span> minNode<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>TreeNode <span class="token function">getMin</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// BST 最左边的就是最小的</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>删除BST节点中，对于情况3的处理是交换节点而不是改节点中的字段，因为我们希望将BST当作工具，它的操作应该与其中存储的数据无关，所以我们更倾向于使用指针操作来交换节点，不关心内部数据，不对内部数据造成影响。而且在实际应用中，BST 节点内部的数据域通常是用户自定义的，可以非常复杂，交换数据非常麻烦。</p></blockquote><h4 id="BST的优化"><a href="#BST的优化" class="headerlink" title="BST的优化"></a>BST的优化</h4><p>待更。。。</p><p><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/cat.65mjymyzzwu8.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 力扣刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉搜索树、力扣刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的基本操作</title>
      <link href="/2020/10/07/er-cha-shu-de-ji-ben-cao-zuo/"/>
      <url>/2020/10/07/er-cha-shu-de-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>二叉树的基本操作</title>    <style type="text/css">.lines{        line-height: 20px;        }    a {        text-decoration: none;    } </style></head><body class=lines>    <h3>二叉树的基础了解</h3>    <p>        二叉树是n(n>=0)个结点的有限集合，该集合由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树组成,或者为空集（称为空二叉树。        由此可以看出二叉树根结点最多有两个子树，且分为左子树和右子树，左右子树顺序不可颠倒<br>        如图：<br>        <img src="https://upload-images.jianshu.io/upload_images/7043118-797eb7ba417745b2.png?imageMogr2/auto-orient/strip|imageView2/2/w/455" alt="二叉树"><br>    </p>    <h4>二叉树的基础性质</h4>    <ul>        <li>在二叉树的第i层上最多有2^(i-1) 个节点 。（i>=1） </li>        <li> 二叉树中如果深度为k,那么最多有2^k-1个节点。(k>=1）</li>        <li> n0=n2+1 n0表示度数为0的节点数，n2表示度数为2的节点数。</li>        <li>若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对编号i:            <ul>                <li>双亲结点编号：i/2 （i>1），若i=1则无双亲</li>                <li>左孩子编号：2i（2i< n ) ,若2i>n 则无左孩子</li>                <li>右孩子编号：2i+1（2i+1 < n）,若2i+1>n则无右孩子</li>            </ul>         </li>    </ul> <h4>满二叉树</h4><p>&nbsp&nbsp&nbsp&nbsp除了叶节点，其余结点的左支树和右子树不为空的二叉树</p><img src="https://upload-images.jianshu.io/upload_images/7043118-c7a557dda4ffc7da.png?imageMogr2/auto-orient/strip|imageView2/2/w/392" alt="满二叉树"><br><h4>完全二叉树</h4><p>&nbsp&nbsp&nbsp&nbsp对一颗具有n个结点的二叉树按层编号，编号为i(1<=i<=n)的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同的二叉树。</p><img src="https://upload-images.jianshu.io/upload_images/7043118-132fd0379f34bcc1.png?imageMogr2/auto-orient/strip|imageView2/2/w/404" alt="完全二叉树"> <br><p> &nbsp&nbsp&nbsp&nbsp&nbsp二叉树是树中最基本也最重要的一种树结构，有必要好好总结一下关于二叉树的一些基本操作,主要是递归操作完成功能，因为二叉树的结构十分对称。</p><br>    首先是包含头文件及一些准备工作<pre><code>    #include &lt;iostream&gt;    #include &lt;fstream&gt;    #include &lt;algorithm&gt;    #include &lt;vector&gt;        using namespace std;    typedef int T;        typedef    struct BiNode    &#123;        T data;        BiNode *lch;                // 指向左孩子，即左子树的根指针        BiNode *rch;    &#125; *BiTree;        ifstream fin(&quot;BitreeData.txt&quot;); // 文件输入流,从文件BitreeData.txt读取数据建立二叉树    </code></pre> <h3>构建二叉树</h3><pre><code>    /*建立二叉树,若输入&lt;=0则建立空树,返回树根指针*/    BiTree  Create()    &#123;        T e;        fin &gt;&gt; e;        // 从文件(流)中输入一个元素值        if( e&lt;=0 )            return 0;    // 返回空树            BiTree t = new BiNode; // 生成根结点        t-&gt;data = e;            t-&gt;lch = Create();  // 递归建立t的左子树t-&gt;lch        t-&gt;rch = Create();  // 递归建立t的右子树t-&gt;rch            return t;    &#125;</code></pre> <h3>遍历</h3>    &nbsp &nbsp &nbsp &nbsp二叉树的遍历有三种:先序遍历（根 左子树 右子树），中序遍历（ 左子树 根  右子树） ，后续遍历（ 左子树 右子树 根）。先中后的顺序是按根节点的遍历顺序规定的。<pre><code>/* 中序遍历--- 左子树 根 右子树*/    void Travse(BiTree t)    &#123;        if (0 == t)            return;        Travse(t-&gt;lch);            // 中序遍历t的左子树        cout &lt;&lt; t-&gt;data &lt;&lt; &quot;  &quot;;   //访问根结点        Travse(t-&gt;rch);            // 中序遍历t的右子树     &#125;只需调换Travse(t-&gt;lch); cout &lt;&lt; t-&gt;data &lt;&lt; &quot;  &quot;;  Travse(t-&gt;rch); 这三条语句的位置即可实现不同的遍历顺序</code></pre><h3>求树的结点数</h3><h4>1.直接返回t的结点数</h4><pre><code>    int  countNode(BiTree t)    &#123;        if( 0 == t)  // 空树:0个结点            return 0;        return countNode(t-&gt;lch) + countNode(t-&gt;rch) +1; // t的结点数等于其左右子树之和+1(根节点)    &#125;</code></pre><h4>通过遍历求t的结点数</h4><pre><code>    /*注意n必须保留改变后的值，是引用参数*/    void TravseCount(BiTree t, int &amp;n)    &#123;        if (0== t)            return;        ++n;       //根结点计数        TravseCount(t-&gt;lch,n);        TravseCount(t-&gt;rch,n);    &#125;</code></pre><h3>求二叉树的叶子数</h5><pre><code>    int countLeaves(BiTree h)    &#123;        /* 注意有两个递归出口,且顺序不可交换*/        if(0 == h)                 //空树返回0             return 0;        if( 0 == h-&gt;lch &amp;&amp; 0 == h-&gt;rch )   //只有根结点左右子树为空返回1             return 1;        return countLeaves(h-&gt;lch) + countLeaves(h-&gt;rch);    &#125;</code></pre><h3>求二叉树的高度</h3><pre><code>    int height(BiTree t)    &#123;        if( 0 == t)        //递归出口：空树返回             return 0;        //二叉树高度为左右子树中较大高度者加一（根）         return max(height(t-&gt;lch),height(t-&gt;rch))+1;   //max函数包含在头文件&lt;algorithem&gt;中     &#125;</code></pre><h3>查找</h3>&nbsp &nbsp &nbsp &nbsp查二叉树t，值为e的结点，查找成功返回其指针，否则返回0指针若有重复元素，则返回最左的结点。<pre><code>    BiNode* Locate(BiTree t, T e)    &#123;        if( 0 == t)            return 0;        if(t-&gt;data == e)        //根找到值返回值对应节点的指针             return t;        BiNode *p = Locate(t-&gt;lch,e);   //根没找到值，到左子树查找         if(p)             return p;                    //左子树找到值，返回值对应节点的指针         return Locate(t-&gt;rch,e);//左子树没找到值，到右子树查找，若找到返回值对应节点的指针，否则返回0指针     &#125;</code></pre><h3>镜像二叉树</h3><pre><code>    void Mirror(BiTree &amp;t)    &#123;        if(0==t) //空树不用处理            return;        if(t-&gt;lch==0 &amp;&amp; t-&gt;rch == 0) // 只有根结点，也不用处理            return;        swap(t-&gt;lch,t-&gt;rch);  // 交换根结点        Mirror(t-&gt;lch);       // 左子树镜像        Mirror(t-&gt;rch);       // 右子树镜像    &#125;</code></pre><h3>输出路径</h3>&nbsp &nbsp &nbsp &nbsp输出二叉树中p所指结点到指定值为e的子孙结点的路径，向量vec保存当前路径,此法会将整个二叉树遍历一遍，如果有多个值为e的元素，输出全部路径<pre><code>    void dispPath(vector&lt;BiNode*&gt; vec)  //将结点指针存放在顺序表里，vector是动态存储可任意删添元素，十分方便     &#123;        for(int i=0; i&lt;vec.size(); ++i)  //输出存放在vec里的结点指向的data，即输出路径         &#123;            cout &lt;&lt; vec[i]-&gt;data &lt;&lt;&quot; &quot;;        &#125;        cout &lt;&lt; &quot;\t\t&quot;;    &#125;    void  FindPath(BiNode* p, T e, vector&lt;BiNode*&gt; vec) // vec不是引用,返回后其状态回溯        &#123;            if(0 == p)                return;                    vec.push_back(p);   // 当前结点追加到向量尾部            if( e == p-&gt;data)   // 根找到值，当前结点即为终点，输出路径            &#123;                dispPath(vec);            &#125;            FindPath(p-&gt;lch, e, vec);   //根没找到值，p的左子树p-&gt;lch中 找路径            FindPath(p-&gt;rch, e, vec);  // p的右子树p-&gt;lch中 找路径        &#125;</code></pre><h3>得到二叉树的副本</h3><pre><code>    /* 复制二叉树t，返回其副本*/    BiTree copy(BiTree t)    &#123;        if(0==t)            return 0;        BiNode *tt = new BiNode; //复制根结点        tt-&gt;data = t-&gt;data;        tt-&gt;lch = copy(t-&gt;lch); // 复制左子树        tt-&gt;rch = copy(t-&gt;rch); // 复制右子树        return tt;    &#125;</code></pre><h3>以前序序列和中序序列构造二叉树</h3>&nbsp &nbsp &nbsp &nbsp以前序序列pre[pl...pr]和中序序列mid[ml...mr]构造出二叉树，假定两序列合法。<br><br><h4>思路<h4>&nbsp &nbsp &nbsp &nbsp由于前序序列先遍历根结点，故根结点在子树结点的前面，中序序列先遍历左子树结点后遍历根节点最后左子树节点，故根结点在左右子树结点中间。可通过前序序列找根结点，在中序序列找到前序序列找到的根结点，该根节点两边分别是左子树和右子树的结点左右子树结点，由此可以构造出一个二叉树。一个前序遍历和一个中序遍历可以确定一个唯一的二叉树.<br><p> eg：已知一颗二叉树的先序序列为EBADCFHG，其中序序列为ABCDEFGH。下图说明了还原二叉树的过程：</p><p><img src="https://images2018.cnblogs.com/blog/1192257/201807/1192257-20180711200448113-65002712.png" alt="以前序序列和中序序列构造二叉树图解"> <br></p><p>&nbsp&nbsp&nbsp&nbsp首先由先序序列知道二叉树的根结点为E，在中序序列中找到E，则其左子树的中序序列为ABCD，左子树有四个结点，则在先序序列中根结点E的后面四个结点BADC就是左子树先序序列，以此类推。</p><pre><code>    /*返回a[l...r]中值为e的下标*/    int search(T a[],int l, int r,T e)    &#123;        for (int i=l; i&lt;=r; i++)            if( a[i] == e)                return i;        return -1;    &#125;    BiTree   Create(T pre[],int pl,int pr, T mid[], int ml,int mr)    &#123;        BiNode *t;        T e;        if( pl &gt; pr )  //  序列长度为0，返回空树            return 0;        e = pre[pl];   // 前序序列第一个元素就是根结点        t = new BiNode;        t-&gt;data = e;        int k = search(mid,ml,mr,e);  // 在中序序列中 寻找根结点元素的位置        int leftLen = k - ml;         // 左子树有leftLen个结点        // pre[pl+1...pl+leftLen] 和 mid[ml,k-1]来建立左子树t-&gt;lch        t-&gt;lch = Create(pre,pl+1,pl+leftLen, mid, ml,k-1);        // 建立右子树t-&gt;rch        t-&gt;rch = Create(pre,pl+leftLen+1, pr, mid , k+1,mr);        return t;    &#125;</code></pre><p>文件内容：</p><pre><code>    1 2  4 0 0  5 6 0 0  0   3 0 7 0 0    本序列 是前序方式建立二叉树的输入序列，0代表空(子)树    请画出此二叉树，对照运行结果</code></pre><h3> <a href="https://icecream-tu.cn/2020/10/20/ha-fu-man-shu-he-ha-fu-man-bian-ma/"> 一个有趣的实例：哈夫曼树和哈夫曼编码</a></h3></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法查找</title>
      <link href="/2020/10/03/er-fen-fa-cha-zhao/"/>
      <url>/2020/10/03/er-fen-fa-cha-zhao/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>二分法查找</title>    <style>        a {            text-decoration: none;        }    </style></head><body>    <h3>二分法查找</h3>    <h2>思路：</h2>    <p style="line-height: 40px;">将一些数升序地放在数组中（这里为了方便查找用数组存放数据（下标为零的不用）），确定查找范围，初始时查找范围为整个数组，下标1设为左端点left，数组最后一个元素的下标设为右端点right，中间端点mid为左右端点下标和的一半。将中间端点处的值与待查值e比较，若大于e则说明e在mid左半侧，将右端点移至下标为mid-1处,缩小查找范围,更改mid值为新左右端点下标和的一半;若比较小于e则e在mid右侧，将左端点移至mid+1处，缩小查找范围,更改mid值为新左右端点下标和的一半;若等于e,则找到待查值，返回待查值在数组中的下标。通过不断缩小查找范围至两个数最后确定待查值的位置。</p>    <img src="https://pic002.cnblogs.com/img/yc_sunniwell/201006/2010062716463366.png" alt="二分法查找图解">    <h3>C实现:</h3><pre><code>    #include &lt;stdio.h&gt;    #include &lt;stdlib.h&gt;        #define MAXSIZE 10    #define NotFound -1        typedef int ElementType;    typedef int Position;    typedef struct LNode *List;        struct LNode &#123;        ElementType Data[MAXSIZE];        Position Last;                      //保存线性表中最后一个元素的位置    &#125;;        List ReadInput();                          Position BinarySearch( List L, ElementType X );        int main()    &#123;        List L;        ElementType X;        Position P;            L = ReadInput();               //向数组里写数         scanf(&quot;%d&quot;, &amp;X);               //输入待查找的数         P = BinarySearch( L, X );      //二分法查找         printf(&quot;%d\n&quot;, P);             //输出待查数的下标             return 0;    &#125;        List ReadInput()    &#123;        List A;        int i;                scanf(&quot;%d&quot;,&amp;A-&gt;Last);                for(i=1;i&lt;=A-&gt;Last;i++)            /*元素从下标1开始存储 */        &#123;            scanf(&quot;%d&quot;,&amp;A-&gt;Data[i]);        &#125;                return A;    &#125;        Position BinarySearch(List L,ElementType X)       //二分法查找     &#123;         int left=1,right=L-&gt;Last,mid=(left+right)/2;                while(right&gt;=left)        &#123;             if(X&gt;L-&gt;Data[mid])             &#123;                 left=mid+1;                 mid=(left+right)/2;             &#125;            else if(X&lt;L-&gt;Data[mid])            &#123;                 right=mid-1;                mid=(left+right)/2;            &#125;            else            &#123;                return mid;            &#125;        &#125;                return NotFound;    &#125;  </code></pre><p>该算法时间复杂度为O(logn),当查找范围十分大时,二分法查找比顺次查找（复杂度O(n)）效率高得多。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环链表的基本操作</title>
      <link href="/2020/10/02/xun-huan-lian-biao-de-ji-ben-cao-zuo/"/>
      <url>/2020/10/02/xun-huan-lian-biao-de-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>单循环链表的基本操作</title>    <style>        a {            text-decoration: none;        }    </style></head><body>    <h3>什么是单循环链表？</h3>    在单链表中，终端结点的指针域NULL指向表头结点或开始结点<br>图示：<img src="http://c.biancheng.net/uploads/allimg/190426/1H422A22-0.png" alt="单循环链表图示"><br><strong>在循环链表中依旧存在头指针和首元节点，循环链表和普通链表相比，唯一的不同就是循环链表首尾相连，其他都完全一样。<strong>    <h3>单循环链表的基本操作：</h3>    单循环链表的一些操作与单向链表的一些操作思路类似，详情请看  <a href="https://icecream-tu.cn/2020/10/02/dan-lian-biao-de-ji-ben-cao-zuo/">单链表的就基本操作</a> 在这里不过多介绍，就讲讲单循环链表的创建，相邻节点交换以及遍历。<br><h4>准备工作</h4><pre><code>    #include&lt;stdio.h&gt;                 #include&lt;stdlib.h&gt;    #define N 5      typedef struct node&#123;        int data;        struct node* next;    &#125;node,* List;    List L2;</code></pre><h4 id="创建单循环链表">创建单循环链表</h4><pre><code>    List CreateCirculList(List L2)      //创建单向循环链表并写入N个值     &#123;        int i;        node* tail;                L2=(List)malloc(sizeof(node));        L2-&gt;next=L2;                                              tail=L2;        printf(&quot;Enter %d elements for your circul list:\n&quot;,N);        scanf(&quot;%d&quot;,&amp;L2-&gt;data);        for(i=1;i&lt;N;i++)        &#123;            node *p=(node*)malloc(sizeof(node));            scanf(&quot;%d&quot;,&amp;p-&gt;data);             tail-&gt;next=p;                  //tail-&gt;next指向最新结点             p-&gt;next=L2;                    //最新结点的next指向链表头，整个链表完成循环             tail=p;        &#125;                return L2;     &#125;</code></pre><h4>将单循环链表相邻的两个结点交换</h4><pre><code>        void ExchangeNodeOfCirculList(List L2)       // 将循环链表中的某个结点与其下一个结点交换     &#123;        node *p,*q;        p=L2-&gt;next;                              //p是L2的后继结点        q=p-&gt;next;                               //q是p的后继结点，要将结点p和结点q交换                 L2-&gt;next=q;        p-&gt;next=q-&gt;next;        q-&gt;next=p;      &#125;</code></pre><h4>单循环链表的遍历(单链表也可以用)</h4><pre><code>        void PrintList(List L)           //打印链表     &#123;        int i;        node *p=L-&gt;next,*q=L;        while(p)                &#123;            printf(&quot;%d &quot;,p-&gt;data);            p=p-&gt;next;            if(p==L-&gt;next)           //如果是遍历循环链表，p往后遍历到表头处结束             &#123;                break;            &#125;        &#125;        printf(&quot;\n&quot;);    &#125;</code></pre><h3>一个有趣的实例：约瑟夫环(也叫丢手绢问题)</h3><h4>题意：<h4>已知 n 个人（分别用编号 1，2，3，…，n 表示）沿顺时针围坐在一张圆桌周围，从编号为 k 的人开始从1顺时针报数，数到 m 的那个人出列，他的下一个人又从 1 开始沿顺时针报数，数到 m 的那个人又出列，依次重复下去，直到圆桌上剩余一个人，输出最后一个人的编号。<br>约瑟夫环问题是一个经典的循环链表例题，当然用其他方法也可以实现，这里只讲用循环链表怎么实现。<h4>代码如下：</h4>     首先创建一个循环链表来存放编号，详情请见上文 <a href="#创建单循环链表">创建单循环链表</a><pre><code>int JosephCircle(List L2)   //返回最后剩下人的编号 &#123;    int i,k,m;    L2=CreateCirculList(L2);  //创建一个循环链表来存放编号    node *p=L2,*q;            //p最终指向每一轮报数m的人，q指向p的前一个结点         printf(&quot;Enter the beginer&#39;s number k and end-counting number m:\n&quot;);     scanf(&quot;%d%d&quot;,&amp;k,&amp;m);       //输入k和m        while(p-&gt;data!=k)    &#123;        p=p-&gt;next;    &#125;    while(p-&gt;next!=p)      //当循环链表中只有一个结点即只剩下一个人时结束循环     &#123;        for(i=1;i&lt;m;i++)        &#123;            q=p;       //p指向每一轮报数的人，q指向p的前一个结点            p=p-&gt;next;        &#125;        q-&gt;next=p-&gt;next;        free(p);     //删去报数m的人        p=q-&gt;next;   //下一轮报数从报数m的下一个人即q-&gt;next开始     &#125;        return (p-&gt;data);  //返回最后一个人的编号 &#125;</code></pre><p>main 函数根据需求写，程序运行结果无误。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单循环链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单向链表的基本操作</title>
      <link href="/2020/10/02/dan-lian-biao-de-ji-ben-cao-zuo/"/>
      <url>/2020/10/02/dan-lian-biao-de-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>单向链表的基本操作</title></head><body>    <p>&nbsp&nbsp&nbsp&nbsp&nbsp链表呢是一种十分基础的数据结构类型，分为单向链表，双向链表以及循环链表，今天我们就来讲讲单向链表的基本操作。</p><h2>什么是单向链表</h2>  &nbsp&nbsp&nbsp&nbsp&nbsp链表是一种储存结构，包含数据域和指针域，一个数据域配一个指针域构成一个结点，数据域存放数据，指针域存放指针即地址，通过将下一个结点（后继结点）的地址存放在上一个结点（前驱结点）的指针域中将四处分散的结点连接起来，也就将分散的储存空间连接起来。 <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5mwddd9cdgxs.webp" alt="链表图示"> <br><br> <h2>单向链表的优缺点</h2>  &nbsp&nbsp&nbsp&nbsp&nbsp从上述描述我们可以看出，链表<strong>优点</strong>在于它的储存空间不用连续，因为它可以通过指针将各处分散的储存空间连接起来，而且链表的长度可以改变，是一种动态分配内存的模式，十分方便在任意位置添加删除结点。<strong>缺点</strong>在于不能随机访问结点,需要从头开始顺次一个结点一个结点的查找（单向链表），而数组就可以通过下标值直接找到需要的值。</p> <h2>单向链表的基本操作（增,删,改,查）</h2> 首先呢开始准备工作，引用头文件，定义类型...<pre><code>    #include&lt;stdio.h&gt;                 #include&lt;stdlib.h&gt;    #define N 5                  //链表的长度（链表的位置从1开始）     #define X 1                  //待删除结点的起始位置    #define Y 3                  //待删除结点的末位置     typedef struct node&#123;        int data;        struct node* next;    &#125;node,* List;    List L1,L2;</code></pre><h3>创建链表并赋值</h3>        <strong> 此处链表的头指针数据域不存放数据</strong><pre><code>    List CreateLinearList(List L1)       //创建单向链表并向链表中写入值     &#123;        int i,count;        node *q;                L1=(List)malloc(sizeof(node));        L1-&gt;next=0;        q=L1;                printf(&quot;Enter the number of your elements in the list:\n&quot;);        scanf(&quot;%d&quot;,&amp;count);        printf(&quot;Enter %d elements for your linear list:\n&quot;,count);                for(i=0;i&lt;count;i++)                                 &#123;            node* p=(node*)malloc(sizeof(node));  //p是创建的新结点，往链表后面插，q指向链表的尾结点             scanf(&quot;%d&quot;,&amp;p-&gt;data);            p-&gt;next=0;            q-&gt;next=p;            q=p;        &#125;        q-&gt;next=0;                return L1;    &#125;</code></pre> <h3>插入结点</h3><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.47y32spluby8.webp" alt="链表头插法图解"><br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.1cz420cjic3k.webp" alt="链表尾插法图解"><br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.6ueccgmlmw3k.webp" alt="链表指定位置插法图解"><br><br><h4>头插法</h4><pre><code>void InsertByHead(List L)&#123;    node* p=(node*)malloc(sizeof(node))        //创建新结点         printf(&quot;Enter the element to insert by head:\n&quot;);    scanf(&quot;%d&quot;,&amp;p-&gt;data);                                 //输入要插的数并存放在新结点的数据域         p-&gt;next=L-&gt;next;                                     //将新结点插入链表头部     L-&gt;next=p; &#125;</code></pre><h4>尾插法</h4><pre><code>void InsertByTail(List L1) &#123;    node *p,*q;                        //p从头遍历找到链表的尾结点，q是要插入的新结点     p=L1;    q=(node*)malloc(sizeof(node)) ;    printf(&quot;Enter an element to insert to the tail:\n&quot;);    scanf(&quot;%d&quot;,&amp;q-&gt;data);    q-&gt;next=0;        while(p-&gt;next)      &#123;        p=p-&gt;next;      &#125;    p-&gt;next=q;&#125;</code></pre><h4>指定位置插</h4><pre><code>void InsertByPosition(List L)             //向链表指定位置插值 &#123;    int position,i;                       //position记录插值的位置     node *q,*p=(node*)malloc(sizeof(node));      //q遍历链表找到待插位置的前一个结点，p存放待插的值     q=L;        printf(&quot;Enter the position and value to be inserted:\n&quot;);    scanf(&quot;%d%d&quot;,&amp;position,&amp;p-&gt;data);        if(position&lt;=0)                        //位置不能为负值     &#123;        printf(&quot;Invalid Position!\n&quot;);        exit(-1);    &#125;    for(i=1;i&lt;position;i++)    &#123;        q=q-&gt;next;                               if(q==0)                       //位置超过链表的最后一位的后一位         &#123;            printf(&quot;Invalid position!\n&quot;);            exit(-1);        &#125;    &#125;        p-&gt;next=q-&gt;next;    q-&gt;next=p;&#125;</code></pre><h4>顺序表按顺序插</h4><pre><code>void InsertSorted(List L) //有序表按顺序插值&#123;    T e;    printf(&quot;Enter an element to be inserted:\n&quot;);    scanf(&quot;%d&quot;,&amp;e);    node* p=(node*)malloc(sizeof(node));    node* q=L-&gt;next;    p-&gt;data=e;    p-&gt;next=0;        while(q-&gt;next&amp;&amp;q-&gt;next-&gt;data&lt;e)    &#123;        q=q-&gt;next;    &#125;    p-&gt;next=q-&gt;next;    q-&gt;next=p;&#125; </code></pre><h3>删除结点</h3><h4>按位置删除一个结点</h4><pre><code>void DeleteElementByPosition(List L)&#123;    int i,position;    node *d,*p=L;                   printf(&quot;Enter the position of value to be deleted:\n&quot;);    scanf(&quot;%d&quot;,&amp;position);    if(position&lt;=0)    &#123;        printf(&quot;Invalid position!\n&quot;);    // 查询位值小于零，不合法，退出         exit(-1);    &#125;         for(i=1;i&lt;position;i++)        &#123;            p=p-&gt;next;     //p记录待删结点的前一个结点             if(p-&gt;next==0)            &#123;                printf(&quot;Invalid position!\n&quot;)                exit(-1);       //查询位置超过链表最后一个位置，不合法，退出             &#125;         &#125;                d=p-&gt;next;              //d记录待删结点        p-&gt;next=p-&gt;next-&gt;next;               free(d);                 //释放待删结点 &#125;</code></pre><h4>按值删除一个结点，删第一个</h4><pre><code>bool DeleteElement(List L)&#123;    int e;    node *p=L,*q;    printf(&quot;Enter the value to be deleted:\n&quot;);    scanf(&quot;%d&quot;,&amp;e);        while(p-&gt;next!=0&amp;&amp;p-&gt;next-&gt;data!=e)    &#123;        p=p-&gt;next;    &#125;        if(p-&gt;next!=0)                   //若p-&gt;next!=0说明未遍历到链表最后一个结点 ，找到e     &#123;        q=p-&gt;next;                   //q指向待删值所在结点        p-&gt;next=q-&gt;next;        free(q);                return true;    &#125;    else    &#123;        printf(&quot;There are no such value in the list!\n&quot;);                return false;    &#125;&#125; </code></pre><h4>按值删除结点，全删</h4><pre><code>void DeleteElements(List L)&#123;    //反复调用函数DeleteElement（），直到返回值为false，即链表中已经没有待删值     while(DeleteElement(L))     ;&#125;</code></pre><h4>按值删除结点，只留一个</h4><pre><code>void DeleteUnique(List L)&#123;    int e;    node *p=L-&gt;next,*q;    printf(&quot;Enter the value to be deleted:\n&quot;);    scanf(&quot;%d&quot;,&amp;e);        while(p!=0&amp;&amp;p-&gt;data!=e)    &#123;        p=p-&gt;next;    &#125;    if(p!=0)  //若p-&gt;next!=0说明未遍历到链表最后一个结点 ，找到e ，p指向第一个e所在的结点     &#123;                                  DeleteElements(p);  //保留第一个e,调用DeleteElements（p），删除其他的e     &#125;    else    &#123;        printf(&quot;There is no such value in the list!\n&quot;);    &#125;&#125; </code></pre><h4>删去链表中最大值</h4><pre><code>void InsertMaxToListHead(List L1)           //将链表的最大值移到头部 &#123;    node *max=L1-&gt;next,*p=L1,*q;                    while(p-&gt;next)                                    &#123;        if(p-&gt;next-&gt;data &gt; max-&gt;data)        &#123;            max=p-&gt;next;            q=p;        &#125;        p=p-&gt;next;    &#125;    q-&gt;next=max-&gt;next;    max-&gt;next=L1-&gt;next;    L1-&gt;next=max;&#125;void DeleteMaxOfList(List L1)           // 删除链表中最大元素 &#123;    node *max;        InsertMaxToListHead(L1);            //调用InsertMaxToListHead()函数将最大值移到头部     max=L1-&gt;next;    L1-&gt;next=max-&gt;next;                 //删去结点L1-&gt;next即最大值结点     free(max);&#125;</code></pre><h3>更改结点的值</h3><p>&nbsp&nbsp&nbsp&nbsp&nbsp <sstrong>在删除结点程序上稍作更改即可<strong></p><h4>1.通过位置更改</h4><h4>2.通过值更改</h4><h3>打印链表</h3><pre><code>void PrintList(List L)           //打印链表 &#123;    int i;    node *p=L-&gt;next,*q=L;    while(p)                     //通过循环打印链表结点的值    &#123;        printf(&quot;%d &quot;,p-&gt;data);        p=p-&gt;next;        if(p==L-&gt;next)           //如果是遍历循环链表，p往后遍历到表头处结束         &#123;            break;        &#125;    &#125;    printf(&quot;\n&quot;);&#125;</code></pre><h3>其他操作:</h3><h4>求表长</h4><pre><code>int Len(List L)&#123;    node *q=L;    int count;    for(count=0;q-&gt;next!=0;q=q-&gt;next,count++);        return count; &#125;</code></pre><h4>链表转置</h4><strong>头插法转置单链表：</strong><pre><code>void Reverse(List L)        //将链表转置 &#123;    int i;    node *tail,*p;           //tail指向链表的尾结点，p指向尾结点的前一个结点        for(i=1;i&lt;Len(L);i++)    //每次都从链表头开始，找到链表尾结点     &#123;        tail=L-&gt;next;        p=L;    while(tail-&gt;next)         //遍历链表找到尾结点         &#123;            tail=tail-&gt;next;            p=p-&gt;next;        &#125;                         p-&gt;next=0;         //头插法将链表的尾结点插到链表头部             tail-&gt;next=L-&gt;next;            L-&gt;next=tail;    &#125;     &#125;    </code></pre><p><strong>递归法转置单链表：</strong></p><pre><code>void Reverse(List L)&#123;    if(L==null||L-&gt;next==null) return;//单链表只有一个结点    List last = Reverse(L-&gt;next);    L-&gt;next-&gt;next=L;    L-&gt;next=null;&#125;</code></pre><p><strong>迭代法转置单链表<strong></p><pre><code>// 反转以 a 为头结点的链表ListNode reverse(ListNode a) &#123;    ListNode pre, cur, nxt;    pre = null; cur = a; nxt = a;    while (cur != null) &#123;        nxt = cur.next;        // 逐个结点反转        cur.next = pre;        // 更新指针位置        pre = cur;        cur = nxt;    &#125;    // 返回反转后的头结点    return pre;&#125;</code></pre><h4>链表排序（升序）</h4><strong>冒泡法排序：</strong><pre><code>void OrderListByAscending(List L1)      // 5.将链表按升序排序 &#123;    int i;    node* p=L1;        for(i=1;i&lt;N;i++)    &#123;        InsertMaxToListHead(p);             //多次调用InsertToMaxHead()将p链表的最大值移到p链表的头部         p=p-&gt;next;                          //p往后移直至移到L1链表的最后一个结点     &#125;&#125;</code></pre><h4>链表相并</h4><pre><code>void Add(List1,List2)     //两有序链表相并(并到链表L1上) &#123;        node *p=L1-&gt;next,*q=L2-&gt;next,*tail=L1;      //p遍历L1的结点，q遍历L2的结点，tail指向合并链表的尾结点        while(p&amp;&amp;q)                //当遍历到某链表的尾结点时，循环结束     &#123;        if(p-&gt;data &lt; q-&gt;data)  //tail指向p-&gt;data,q-&gt;data中较小的结点         &#123;            tail-&gt;next=p;            tail=p;            p=p-&gt;next;        &#125;                else if(p-&gt;data &gt; q-&gt;data)        &#123;            tail-&gt;next=q;            tail=q;            q=q-&gt;next;            &#125;        else        &#123;            tail-&gt;next=q;            tail=q;            q=q-&gt;next;            p=p-&gt;next;                    &#125;    &#125;        tail-&gt;next=(q==0?p:q);      //tail-&gt;next指向未遍历完的链表结点  &#125; </code></pre><p><strong>上述有关链表操作的main函数根据需要写</strong></p><h4>一个有趣的实例：多项式相加</h4><p>思路类似于有序链表的合并<br><br><strong>完整代码如下</strong></p><pre><code>#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;typedef struct node&#123;    int fac;         //多项式项的系数部分     int e;           //多项式项的指数部分     struct node* next; &#125;node,* Poly;void AddPoly(Poly P1,Poly P2) //两升序序多项式相加 &#123;    node *p=P1-&gt;next,*q=P2-&gt;next,*tail=P1;      //p遍历L1的结点，q遍历L2的结点，tail指向合并链表的尾结点         while(p&amp;&amp;q)          //当遍历到某链表的尾结点时，循环结束     &#123;        if(p-&gt;e &lt; q-&gt;e)  //tail指向系数较小的结点         &#123;            tail-&gt;next=p;            tail=p;            p=p-&gt;next;        &#125;                 else if(p-&gt;e &gt; q-&gt;e)        &#123;            tail-&gt;next=q;            tail=q;            q=q-&gt;next;            &#125;        else                    //相同指数项系数相加         &#123;            p-&gt;fac=p-&gt;fac+q-&gt;fac;             tail-&gt;next=p;            tail=p;            p=p-&gt;next;            q=q-&gt;next;                    &#125;    &#125;        tail-&gt;next=(q==0?p:q);      //tail-&gt;next指向未遍历完的链表结点   &#125;   Poly CreatePoly(Poly P) &#123;     int count,i;     P=(node*)malloc(sizeof(node));     P-&gt;next=0;                                //头结点数据域不存放数据     node *m=P;         printf(&quot;Enter the number of your node:\n&quot;);    scanf(&quot;%d&quot;,&amp;count);        printf(&quot;Enter coefficients and index:\n&quot;); //输入多项式的系数和指数部分     for(i=0;i&lt;count;i++)    &#123;        node *q=(node*)malloc(sizeof(node));             scanf(&quot;%d%d&quot;,&amp;q-&gt;fac,&amp;q-&gt;e);           //输入项的系数和指数        q-&gt;next=0;                 m-&gt;next=q;                             //m记录待插的位置(链尾)，q是待插的结点         m=q;     &#125;           return P; &#125;  void PrintPoly(Poly P) &#123;    int i;    node *m=P-&gt;next;        while(m)            &#123;        printf(&quot;%dx^%d + &quot;,m-&gt;fac,m-&gt;e);        m=m-&gt;next;    &#125;    printf(&quot;\n&quot;); &#125; int main(Void) &#123;     Poly P1,P2;     P1=CreatePoly(P1);     printf(&quot;P1=&quot;);     PrintPoly(P1);     P2=CreatePoly(P2);     printf(&quot;P2=&quot;);     PrintPoly(P2);     AddPoly(P1,P2);     printf(&quot;P1+P2=&quot;);      PrintPoly(P1);          return 0; &#125;</code></pre><p>运行结果无误。</p><h4>链表操作的递归实现</h4>&nbsp&nbsp&nbsp&nbsp&nbsp 事实上尾递归都可以用循环实现，而递归算法十分占内存，所以上述链表中需要遍历的各种操作是没有必要用递归实现的，这里我们只做一点了解: <br> <strong>代码如下（链表的头结点数据域不为空）</strong><pre><code>    #include&lt;iostream&gt;    #include&lt;stdio.h&gt;    using namespace std;        typedef int T;        typedef struct node&#123;        T data;        node * next;    &#125;node,*List;        void Create(List &amp;h) //将链表分为两部分：头结点和头结点后面部分    &#123;                    //而头结点后面部分又可以分为同样的两部分，依次类推          T e;        cin&gt;&gt;e;        if(e&lt;=0)        &#123;            h=0;        //输入负数为结束标志             return;        &#125;                h=new node;        h-&gt;data=e;                Create(h-&gt;next);    //递归创建头结点后面的链表     &#125;        //此方式不是尾递归，可以不用查找链表的尾结点来遍历倒序输出链表，是一个很好的倒序输出的方法    void ReverseTraverse(List h)     //将链表倒序输出    &#123;                         //若递归到尾结点的next则递归结束         if(0==h)        &#123;            return;        &#125;        ReverseTraverse(h-&gt;next);  //过程为:先输出头结点后面部分的链表，再输出头结点                cout&lt;&lt;h-&gt;data&lt;&lt;&quot; &quot;;  //而头结点后面部分的链表又可以分为头结点和头结点后部分的链表,输出顺序如上一步骤    &#125;         void Traverse(List h)   //将链表正序输出     &#123;        if(0==h)             //若递归到链表尾结点的后面，则返回         &#123;            return;        &#125;                    cout&lt;&lt;h-&gt;data&lt;&lt;&quot; &quot;;  //过程为:先输出头结点,再输出头结点后面部分的链表        Traverse(h-&gt;next);   //而头结点后面部分的链表又可以分为头结点和头结点后部分的链表,输出顺序如上一步骤                &#125;        int Len(List &amp;h)    &#123;        if(0==h)        &#123;            return 0;           //链表为空时结束递归，返回值         &#125;        return Len(h-&gt;next)+1;  // 链表的长度为头结点后面部分构成链表的长度加1（头结点）     &#125;        node* Locate(List h,T e)   //查找     &#123;        if(0==h)                //递归到链表的尾结点，没找到待查值，返回地址为空         &#123;            return 0;        &#125;         if(h-&gt;data==0)          //找到待查值，返回该值的位置         &#123;            return h;        &#125;                return Locate(h-&gt;next,e);  //查找分为两部分：头结点和头结点后面部分的链表，依次类推     &#125;         void Destroy(List h)       //删除链表     &#123;        if(0==h)                 //尾结点递归完毕，返回         &#123;            return;        &#125;        Destroy(h-&gt;next);        //删除分为两部分：删除头结点和头结点后面部分的链表         delete h;    &#125;         int main(void)    &#123;        List h=0;        Create(h);        ReverseTraverse(h);        cout &lt;&lt;endl;            return 0;    &#125; </code></pre><p> 至此大功告成！代码较为幼稚QAQ，思路值得学习~           </p></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18.4.5的安装及界面调整</title>
      <link href="/2020/09/07/ubuntu18.4.5-de-an-zhuang-ji-jie-mian-diao-zheng/"/>
      <url>/2020/09/07/ubuntu18.4.5-de-an-zhuang-ji-jie-mian-diao-zheng/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>ubuntu18.4的安装及界面调整</title></head><style>    a {        text-decoration: none    }</style><body>    <div>        <h3><a                href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.6-16341506.exe?HashKey=c860d72678491886bc69f379961beb4d&ext=.exe&params=%7B%22custnumber%22%3A%22ZGpqdCVlamhAaA%3D%3D%22%2C%22sourcefilesize%22%3A%22552.35+MB%22%2C%22dlgcode%22%3A%22WKST-1556-WIN%22%2C%22languagecode%22%3A%22cn%22%2C%22source%22%3A%22DOWNLOADS%22%2C%22downloadtype%22%3A%22manual%22%2C%22eula%22%3A%22Y%22%2C%22downloaduuid%22%3A%228ebe8c53-68a0-4d00-a417-7105234ba563%22%2C%22purchased%22%3A%22N%22%2C%22dlgtype%22%3A%22Product+Binaries%22%2C%22productversion%22%3A%2215.5.6%22%2C%22productfamily%22%3A%22VMware+Workstation+Pro%22%7D&AuthKey=1599151641_45991b11069be19e8d4dc2551350588c&ext=.exe">1.下载VMware</a>        </h3>        <p>这里下载的是Vmware Workstation 15 pro(15.6版本)，官网下载很慢，就直接给下载链接了</p>        <h3> <a href="http://releases.ubuntu.com/18.04.5/ubuntu-18.04.5-desktop-amd64.iso            ">2.下载ubuntu-18.04.5-desktop-amd64</a></h3>        <p> <h3>3.剩下安装教程的请看<a href="https://blog.csdn.net/wangzijun_1996/article/details/80163507">这篇</a></h3></p>        (自己安装的时候忘截屏了，无法以本人的例子写安装教程)        <p>我在安装中出现了一个问题:<strong>此主机支持 Intel VT-x，但 Intel VT-x 处于禁用状态</strong> ！！！</p>        解决方法请看<a href="https://www.cnblogs.com/tangbomao/p/6649051.html">这篇</a> <br>        <h3>4.ubuntu界面调整</h3>         <p> 安装完后发现在VMware全屏时，Ubuntu桌面在VMware中并不能全屏显示，而是只占屏幕的一小部分 <br>        需要将界面调整一下，请参考 <a href="https://www.cnblogs.com/chenbocheng/p/10839332.html">这篇</a>的第四部分 <br></p>        <p><strong>至此ubuntu的安装及界面调整就做好啦~~</strong></p>     </div></body></html>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>参数传递</title>
      <link href="/2020/09/05/shai-fa-qiu-su-shu/"/>
      <url>/2020/09/05/shai-fa-qiu-su-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="什么意思？"><a href="#什么意思？" class="headerlink" title="什么意思？"></a>什么意思？</h3><p> 将规定范围内的数从大到小依次排列，从2开始依次筛去该数的倍数，因为<strong>素数的倍数一定不是素数</strong>，筛完后剩下的数即为素数。<br> eg:求1~100范围的素数，先去掉2的倍数，再去掉3的倍数，再去掉5的倍数…….,直到最后一个数，剩下的就是素数。</p><h3 id="如何编程实现？"><a href="#如何编程实现？" class="headerlink" title="如何编程实现？"></a>如何编程实现？</h3><p> 根据初始数据是从大到小依次排列的整数，可考虑设一个数组，数组下标代表需判断的数，数组的值代表该数是否为素数，<br> 若为素数则数组项赋值为1，否则为0。用循环赋值下标为合数的数组项为0筛去合数，输出值为1的数组项的下标，即为所求素数。</p><h3 id="可否优化？"><a href="#可否优化？" class="headerlink" title="可否优化？"></a>可否优化？</h3><p> 可。某些数被重复判断筛选，降低运行效率。<br> eg：30&#x3D;2<em>15&#x3D;3</em>10&#x3D;5*6，30作为2、3、5、6、15的倍数会被重复筛去。</p><h3 id="怎样优化？"><a href="#怎样优化？" class="headerlink" title="怎样优化？"></a>怎样优化？</h3><p>  <em><strong>线性筛法</strong></em>：让每一个合数被它最小的质因数筛到。由于<strong>每个合数最小的质因数是唯一的，由不同的最小质因数筛到的合数也不同</strong>，这样就不会重复筛到同一个合数。<br/></p><p>  演示：eg 求1~12之间的素数<br>   2 3 4 5 6 7 8 9 10 11 12<br>         primes：()</p><p>   从头到尾遍历，第一个数是2，未被划掉，把它放进质数表：<br>    <strong>2</strong> 3 4 5 6 7 8 9 10 11 12<br>         primes：(2，)</p><p>   用2去乘质数表里的每个数，划掉它们：<br>   <strong>2</strong> 3 <del>4</del> 5 6 7 8 9 10 11 12</p><p>   下一个是3，加入质数表，划掉6、9：<br>   <strong>2</strong> <strong>3</strong> <del>4</del> 5 <del>6</del> 7 8 <del>9</del> 10 11 12<br>         primes:(2,3,)</p><p>   下一个是4（注意这里划掉的数也要遍历，只是不加入质数表），先划掉8，但我们不划掉12，因为12 (12&#x3D;2<em>6&#x3D;3</em>4) 应该由它的最小质因数2筛掉，而不是3。<br>   <strong>2</strong> <strong>3</strong> <del>4</del> 5 <del>6</del> 7 <del>8</del> <del>9</del> 10 11 12<br>         primes:(2,3,)</p><p>   下一个是5，加入质数表，划掉10：<br>   <strong>2</strong> <strong>3</strong> <del>4</del> 5 <del>6</del> 7 <del>8</del> <del>9</del> <del>10</del> 11 12<br>         primes:(2,3,5)<br>   ……..<br/><br>   <strong>规律：对于一个数k，筛去k乘以primes数表里的数（从第一个开始）得到的合数，直到k可以整除primes中的某个数</strong></p><p>   按这样的步骤进行下去，可以筛掉所有的合数，并得到一张质数表。</p><h3 id="代码（普通筛）："><a href="#代码（普通筛）：" class="headerlink" title="代码（普通筛）："></a>代码（普通筛）：</h3><pre><code>  #include &lt;stdio.h&gt;  #define MAX 100  int main(void)  &#123;  int i, j;  int isPrime[MAX + 1];  for (i = 2; i &lt; MAX + 1; i++)    //将所有数组项赋值为1，所有数默认为素数  isPrime[i] = 1;  for (j = 2; j * j &lt; MAX; j++)    //将下标为合数的数组项赋值0，筛去合数  　　for (i = j; i &lt; MAX + 1; i++)  　　　　if (!(i % j))  　　　　　　isPrime[i] = 0;  for (i = 2; i &lt; MAX + 1; i++)   //输出值为1的数组项下标，即为素数 　　 if (isPrime[i] == 1) 　　　　 printf(&quot;%d &quot;, i);  return 0;  &#125;</code></pre><h3 id="优化后（线性筛）："><a href="#优化后（线性筛）：" class="headerlink" title="优化后（线性筛）："></a>优化后（线性筛）：</h3><pre><code>  #include &lt;stdio.h&gt;  #define MAX 100  int main(void)  &#123;    int i, j, count = 0;    int isPrime[MAX + 1], primes[MAX + 1]=&#123;0&#125;;    for (i = 0; i &lt; MAX + 1; i++) //将所有isPrime数组项赋值为1，默认所有数均为素数      isPrime[i] = 1;    for (i = 2; i &lt; MAX + 1;i++)        &#123;         if(isPrime[i])        //将确认的素数存入primes数组           primes[count++] = i;         for (j = 0; j &lt;= count &amp;&amp; primes[j] * i &lt;= MAX;j++)   //用线性筛法筛去合数           &#123;             isPrime[i * primes[j]] = 0;             if(i%primes[j]==0)               break;           &#125;       &#125;       for (i = 0; i &lt;count;i++)             //输出数组primes，即输出所求的所有素数         printf(&quot;%d &quot;, primes[i]);         return 0;  &#125;</code></pre><blockquote><p><a href="https://zhuanlan.zhihu.com/p/124068032" style="font-size: small;text-decoration: none;color: black;">线性（欧拉)筛原理论证参考</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筛法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参数传递</title>
      <link href="/2020/08/05/can-shu-chuan-di/"/>
      <url>/2020/08/05/can-shu-chuan-di/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>参数传递内容分析</title></head><body>    <h3>示例1</h3>    <h4>要点</h4>    <p>        java语言当中方法调用的时候涉及到参数传递的问题,参数传递实际上传递的是变量中保存的具体值。<p><pre><code>    int i=10;    add(i); //等同于: add (10）;</code></pre><h4>示例代码</h4><pre><code>public class Test01 &#123;    public static void main (string [] args) &#123;    int i =10;    add(i); //add方法调用的时候,给add方法传递了一个变量i，到底传的是什么?    System.out.println ( &quot;main --&gt;&quot;+i);//10    &#125;public static void add (int i)&#123;    i++;    System. out.println( &quot;add --&gt;&quot;+i);    &#125;&#125;</code></pre><h4>内存图分析</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.783g7wcho8w0.png" alt=""> <br><h3>示例二</h3><h4>要点</h4><pre><code>方法调用的时候,涉及到参数传递的问题,传递的时候,java只遵循一种语法机制,就是将变量中保存的&quot;值&quot;传递过去了,只不过有的时候这个值是一个字面值10,有的时候这个值是另一个java对象的内存地址0x1234</code></pre><h4>示例代码</h4><pre><code>public class Test02&#123;    public static void main(String[] args) &#123;        User u=new User(20);        //User u=0x1234;        //传递u给add方法的时候,实际上传递的是u变量中保存的值,只不过这个值是一个java对象的内存地址        add(u);//等同于:add (0x1234);        system.out.println ( &quot;main--&gt;&quot; + u.age) ; //21    &#125;    public static void add (User u)&#123;        u.age++;        system.out.println ( &quot;add--&gt;&quot; +u.age) ;//21    &#125;&#125;class User&#123;    //实例变量    int age;    //构造方法    public User (int i)&#123;        age = i;    &#125;&#125;</code></pre><h4>内存图分析</h4>    <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.783g7wcho8w0.png" alt=""></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的创建与使用-内存分析</title>
      <link href="/2020/07/22/dui-xiang-de-chuang-jian-yu-shi-yong-nei-cun-fen-xi/"/>
      <url>/2020/07/22/dui-xiang-de-chuang-jian-yu-shi-yong-nei-cun-fen-xi/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>对象的创建与使用-内存分析</title></head><body><div>    <h3>方法执行内存分析</h3>    注：栈原理图 <br><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.3u6m4bap2ym8.png" alt="栈原理图"><br><br>    <h4>部分源码示例</h4><pre><code>//方法调用的时候，在参数传递的时候，实际上传递的是变量中保存的那个&quot;值&quot;传过去了。public class MethodTest01&#123;    public static void main (String [] args)&#123;            int a=10;            int b=20;            int retvalue = sumInt (a,b);            System.out.println (&quot;retvalue= &quot; + retvalue);    &#125;    public static int sumInt (int i,int j)&#123;            int result = i + j;            int num = 3;            int retvalue = divide (result, num) ;            return retvalue;    &#125;    public static int divide (int x , int y)&#123;            int z = x / y;            return z;    &#125;&#125;</code></pre><h4>内存分析图</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.3dtwc0hfouf4.png" alt="方法执行内存图"><br><strong>处在栈顶的元素具有活跃状态。<strong><h3>递归方法执行内存分析</h3><h4>要点</h4><pre><code>1、什么是递归?   方法自身调用自身。2、递归是很耗费栈内存的,递归算法可以不用的时候尽量别用。I3、程序运行的时候发生以下错误【不是异常，是错误Error】:java.lang.StackOverflowError栈内存溢出错误，错误发生无法挽回,只有一个结果,就是JVM停止工作。4、递归必须有结束条件,没有结束条件一定会发生栈内存溢出错误。5、递归即使有了结束条件，即使结束条件是正确的，也可能会发生栈内存溢出错误，因为递归的太深了</code></pre><h4>示例</h4><pre><code>public class RecursionTest01&#123;    public static void main(String[] args)&#123;        System.out.println( &quot;main begin&quot;);        dosome();        System.out.println( &quot;main over&quot;);    &#125;    //以下的代码片段虽然只有一份，但是可以被重复的调用，并且只要调用doSome方法就会在栈内存中新分配一块所属的内存空间.    public static void dosome&#123;        System.out.println(&quot;doSome begin&quot;);        dosome();//这行代码不结束, 下一行程序不能执行System.out.println(&quot;doSome over&quot;);    &#125;</code></pre><h4>部分源码</h4><pre><code>public class RecursionTest03 &#123;    public static void main(String[] args) &#123;        //1~4的和        int n = 4;        int retvalue = sum(n);        System.out.println(retvalue);    &#125;    public static int sum(int n) &#123;        //4+3+2+1        if (n == 1) &#123;            return 1;        &#125;        return n + sum(n - 1);    &#125;&#125;</code></pre><h4>内存图分析</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.4b3f0x65l400.png" alt="递归方法执行内存分析"><br><h4>递归原理图</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5jss4q3w7nk.png" alt="递归原理图"><br><br></div><div><br><h3>对象的创建与使用-内存分析</h3> <h4><strong>要点<strong></h4><pre><code>    1、变量必须先声明，再赋值才能访问。    注意：对于成员变量来说，没有手动赋值时，系统默认赋值。    类型默认值    -------------------------    byte0    short   0    int  0    long0L    float   0.0F    double   0.0    boolean  false    char   \u0000    引用数据类型    null    null是一个java关键字，全部小写，表示空。是引用类型的默认值。    2、通过一个类可以实例化N个对象    实例化对象的语法:new 类名()    new运算符的作用是创建对象，在JVM堆内存当中开辟新的内存空间    方法区内存:在类加载的时侯，class字节码代码片段被加载到该内存空间当中。    栈内存(局都变量):方法代码片段执行的时候，会给该方法分配内存空间，在栈内存中压栈。    堆内存:new的对象在堆内存中存储    3、对象与引用    new运算符在堆内存中开辟的内存空间称为对象。    引用是一个变量，只不过这个变量中保存了另一个java对象的内存地址。    java语言当中，程序员不能直接操作堆内存，只能通过引用去访问堆内存当中对象内部的实例变量。    java中没有指针，不像c语言。    4、访问实例变量的语法格式    读取数据:引用.变量名； 修改数据:引用.变量名=值</code></pre><h4>部分源码</h4>        <pre><code>public class Student&#123;    // 属性（描述状态），在java程序中以“成员变量”的形式存在。    // 学号    // 一个对象一份。    int no; // 这种成员变量又被称为“实例变量”。    // 姓名    String name;    // 年龄    int age;    // 性别    boolean sex;    // 住址    String addr;&#125;public class OOTest01 &#123;    public static void main(String[] args) &#123;        int i = 10;        Student s = new Student();    &#125;&#125;</code></pre><h4>内存图</h4><img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5mytzd4gxvk0.png" alt="对象的创建内存图"><br><h4>部分源码</h4><pre><code>public class OOTest01 &#123;    public static void main(String[] args) &#123;        int i = 10;        Student s = new Student();        s.no = 10;        s.name =&quot;jack&quot;;        s.age = 20;        s.sex= true;        s.addr = &quot;北京&quot;;        Student stu=new Student();    &#125;&#125;</code></pre><h4>内存图</h4>            <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.5mytzd4gxvk0.png" alt="对象的创建与使用内存图"><br><h4>部分源码</h4><pre><code>public class OOTest02&#123;    public static void main (String[] args)&#123;        //u保存内存地址指向堆内存的User对象User u=new User();        u.name = &quot;jack&quot; ;        //&quot;jack&quot;是一个java对象，属于string对象        u.addr = new Address ();&#125;&#125;public class User&#123;    int no;    //String是一种引用数据类型:代表字符串    //name是一个实例变量,是一个引用    String name;    //Address是一种引用数据类型:代表家庭住址    // addr是一个实例变量,addr是一个引用    Address addr ;&#125;public class Address &#123;    //city是一个引用:保存内存地址的一个变量，该变量保存内存地址指向了堆内存当中的对象。    String city;    String street;    Stringzipcode;&#125;</code></pre> <h4>内存图</h4>        <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.2clwgdk9feww.png" alt=""><br><br>        <h4>部分源码</h4><pre><code>public class OOTest03&#123;    public static void main (String[] args)&#123;        User u=new User();        u.addr = new Address();            Address a = new Address();        u.addr = a ;        System.out.println (u.addr.city); //null        a.city = &quot;天津&quot;;        System.out.println (u.addr.city);//天津    &#125;&#125;</code></pre><h4>内存图</h4>        <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.7373ni23a7pc.png" alt=""><br><br>        <h3>总结</h3>        <img src="https://cdn.staticaly.com/gh/sunburnedxx/BlogImages@main/image.314xd0tbkd1c.png" alt=""> <br><pre><code>    1. JVM ( Java虚拟机）主要包括三块内存空间,分别是:栈内存、堆内存、方法区内存。    2、堆内存和方法区内存各有1个。一个线程一个栈内存。    3、方法调用的时候，该方法所需要的内存空间在栈内存中分配，称为压栈。方法执行结束之后，该方法所属的内存空间释放，称为弹栈。    4、栈中主要存储的是方法体当中的局部变量。    5、方法的代码片段以及整个类的代码片段都被存储到方法区内存当中，在类加载的时候这些代码片段会载入。    6、在程序执行过程中使用new运算符创建的java对象，存储在堆内存当中。对象内部有实例变量，所以实例变量存储在堆内存当中。    7、变量分类:        局部变量【方法体中声明】         成员变量【方法体外声明】        实例变量【前边修饰符没有static]        静交变量【前边修饰符中有static]    8、静态变量存储在方法区内存当中。    9、三块内存当中变化最频繁的是栈内存，最先有数据的是方法区内存，垃圾回收器主要针对的是堆内存。    10、垃圾回收器【自动垃圾回收机制、GC机制】        当堆内存当中的java对象成为垃圾数据,即没有更多的引用指向它的时候,会被垃圾回收器回收。        回收对象无法被访问，因为访问对象只能通过引用的方式访问。</code></pre><br><h3>构造方法</h3><h4>要点</h4><pre><code>关于java类中的构造方法:    1、构造方法又被称为构造的数/构造器/constructor    2、构造方法语法结构:    [修饰符列表]构造方法名(形式参数列表)&#123;        构造方法体;    &#125;    3、回顾普通方法的语法结构:    [修饰符列表]返回值类型方法名(形式参数列表)&#123;        方法体;    &#125;    4、对于构造方法来说,没有返回值，&quot;返回值类型&quot;不需要指定，并且也不能写void,只要写上void,那么这个方法就成为普通方法了。    5、构造方法的方法名必须和类名保持一致。    6、构造方法的作用？        构造方法存在的意义是,通过构造方法的调用,可以创建对象。    7、构造方法应该怎么调用？        ① 普通方法调用:方法修饰符中有static的时候:类名.方法名(实参列表)、方法修饰符列表中没有static的时候:引用.方法名(实参列表)        ② new 构造方法名(实参列表)    8、构造方法调用执行之后,有返回值吗?        每一个构造方法实际上执行结束之后都有返回值,但是这个&quot;return值;&quot;这样的语句不需要写。        构造方法结束的时候java程序自动返回值。并且返回值类型是构造方法所在类的类型。        由于构造方法的返回值类型就是类本身,所以返回值类型不需要编写。    9、注释和取消注释:ctrI +/ ,多行注释:ctrl +shift +/    10、当一个类中没有定义任何构造方法的话，系统默认给该类提供一个无参数的构造方法,这个构造方法被称为缺省构造器    11、当一个类显示的将构造方法定义出来了，那么系较则不再默认为这个类提供缺省构造器。        建议开发中手动的为当前类提供无参数构造方法。因为无参数构造方法太常用了。    12、构造方法支持重载机制。在一个类当中编写多个构造方法,这多个构造方法显然已经构成方法重载机制。构造方法的作用:    1、创建对象    2、给实例变量赋值    成员变量之实例变量,属于对象级别的变量,这种变量必须先有对象才能有实例变量。    实例变量没有手动赋值的时候，系统默认赋值,那么这个系统默认赋值是在什么时候完成的呢? 是在类加载的时候吗?    不是,因为类加载的时候只加载了代码片段，还没来得及创建对象。所以此时实例变量并没有初始化。    实际上,实例变量的内存空间是在构造方法执行过程当中完或开辟的。完成初始化的。    系统在默认赋值的时候,也是在构造方法执行过程当中完成的赋值。实例变量默认值:    byte , short,int, 1ong: 0    float, double: 0.0    bolean: false    引用数据类型: nullget set函数和构造方法编译器都可以自动生成    </code></pre><h4>代码示例</h4><pre><code>pub1ic class ConstructorTest01&#123;    public static void main String[] args) &#123;    //创建User对象    //调用User类的构造方法来完成对象的创建    //以下程序创建了4个对象,只要构造函数调用就会创建对象，并且一定是在&quot;堆内存&quot;中开辟内存空间。User u1 = new User();    User u2 = new User(10);    User u3 = new User(&quot;zhangsan&quot;);    User u4 = new User(10, &quot; zhangsan&quot;);&#125;public class User &#123;    //无参数构造方法    public User()&#123;        System.out.println(&quot;User&#39;s Default Constructor Invoke!&quot;);    &#125;    //有参数的构造方法    public User(int i)&#123;        System.out.println(&quot;带有int类型参数的构造器&quot;);    &#125;    //有参数的构造方法    public User(String nane)&#123;        System.out.println(&quot;带有string类型的构造器&quot;);    &#125;    //有参数的构造方法    public User(int i ,String name)&#123;        System.out.println(&quot;带有int,string类型的构造器&quot;);    &#125;&#125;</code></pre><p>**********<em>本笔记整理于<a href="http://www.bjpowernode.com/javavideo/110.html">动力节点JavaSE基础课程</a><em> **************</p></div></body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装SqlServer并在Ubuntu上创建数据库</title>
      <link href="/2020/07/13/an-zhuang-sqlserver-bing-zai-ubuntu-shang-chuang-jian-shu-ju-ku/"/>
      <url>/2020/07/13/an-zhuang-sqlserver-bing-zai-ubuntu-shang-chuang-jian-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>安装SQLServer并在Ubuntu上创建数据库</title>    <style>        a {text-decoration: none;}    </style></head><body>    <p>首先需要安装一台ubuntu虚拟机，详情请见<a href="https://icecream-tu.cn/2020/09/07/ubuntu18.4.5-de-an-zhuang-ji-jie-mian-diao-zheng/">此篇    </a></p>    <a href="https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-ubuntu?view=sql-server-ver15"><h2>安装SQLServer并在Ubuntu上创建数据库</h2></a></body></html>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SqlServer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html基础</title>
      <link href="/2020/06/16/html-ji-chu-zhi-shi/"/>
      <url>/2020/06/16/html-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p>web学习推荐网站:<br>W3C: <a href="http://www.w3school.com.cn/">http://www.w3school.com.cn/</a><br>MDN: <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><p>网页是由网页元素组成的 ， 这些元素是利用html标签描述出来，然后通过浏览器解析，就可以显示给用户了。</p><ol><li><p>HTML 指的是超文本标记语言，所谓超文本，有2层含义：</p><ol><li>因为它可以加入图片、声音、动画、多媒体等内容（超越文本限制）</li><li>不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（超级链接文本）。</li></ol></li><li><p>web标准：结构（structure html），表现（presentation css），行为（behavior js）<br> Web标准不是某一个标准，而是由W3C组织和其他标准化组织制定的一系列标准的集合。<br> <code>&lt;!DOCTYPE html&gt;</code> 文档类型声明标签，告诉浏览器这个页面采取html5版本来显示页面<br> <code>&lt;html lang=&quot;zh-CN&quot;&gt;</code> 告诉搜索引擎这是一个中文网站，页面采取中文显示<br> <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>必须写，采取UTF-8编码方式来保存文字。UTF-8 万国码 基本包含全世界所有国家需要用到的字符。如果不写可能会出现乱码。</p></li><li><p>HTML骨架：</p><pre><code>     &lt;!DOCTYPE html&gt;     &lt;html lang=&quot;en&quot;&gt;     &lt;head&gt;&lt;!-- 表示头部信息，一般包含三部分内容：title标签、css样式、js代码--&gt;         &lt;meta charset=&quot;UTF-8&quot;&gt;         &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;         &lt;title&gt;Document&lt;/title&gt;          &lt;/head&gt;     &lt;body&gt;&lt;!--body标签是整个html页面显示的主题内容--&gt;         ...         &lt;/body&gt;     &lt;/html&gt;</code></pre></li></ol><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><h4 id="标题标签："><a href="#标题标签：" class="headerlink" title="标题标签："></a>标题标签：</h4><p><code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code>(重要性依数字逐级递减)  h：head<br>标题独占一行且加黑加粗</p><h4 id="段落标签："><a href="#段落标签：" class="headerlink" title="段落标签："></a>段落标签：</h4><p><code>&lt;p&gt;``&lt;/p&gt;</code> p:passage</p><ul><li>文本在一个段落中会根据浏览器窗口的大小自动换行</li><li>段落与段落之间保有空隙</li></ul><h4 id="换行标签："><a href="#换行标签：" class="headerlink" title="换行标签："></a>换行标签：</h4><p><code>&lt;br /&gt;</code>或<code>&lt;br&gt;</code>      br:break</p><ul><li><code>&lt;br /&gt;</code>是个单标签</li><li><code>&lt;br /&gt;</code>标签只是简单的开始新的一行，跟段落不一样，段落之间会插入一些间距</li></ul><h4 id="文本格式化标签："><a href="#文本格式化标签：" class="headerlink" title="文本格式化标签："></a>文本格式化标签：</h4><ul><li>加粗：<code>&lt;strong&gt;&lt;/strong&gt;</code>或<code>&lt;b&gt;&lt;/b&gt;</code></li><li>倾斜：<code>&lt;em&gt;&lt;/em&gt;</code>或<code>&lt;i&gt;&lt;/i&gt;</code></li><li>删除线：<code>&lt;del&gt;&lt;/del&gt;</code>或<code>&lt;s&gt;&lt;/s&gt;</code></li><li>下划线：<code>&lt;ins&gt;&lt;/ins&gt;</code>或<code>&lt;u&gt;&lt;/u&gt;</code><br><em><strong>更推荐使用前一组标签，语义更强烈</strong></em></li></ul><h4 id="lt-div-gt-和-lt-span-gt-标签："><a href="#lt-div-gt-和-lt-span-gt-标签：" class="headerlink" title="&lt;div&gt;和&lt;span&gt;标签："></a><code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>标签：</h4><p><code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>标签没有任何语义，他们就是一个盒子，用来装内容</p><ul><li><code>&lt;div&gt;&lt;/div&gt;</code>用来布局（纵向），一行只能放一个<code>&lt;div&gt;</code>，大盒          div：division</li><li><code>&lt;span&gt;&lt;/span&gt;</code>用来布局（横向），一行可以多个<code>&lt;span&gt;</code>,小盒子</li></ul><h4 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h4><ol><li><code>&lt;img src=&quot;图像URL&quot; /&gt; </code>       img：image      src：source</li></ol><ul><li>src 图片路径 为必须属性<br>  若图像URL为文件名，则该文件必须与html页面在同一个目录<br>  URL也可以是链接</li><li>alt 替换文本 图像不能显示时显示替换文本</li><li>title 提示文本 鼠标放在图像上时显示提示的文字</li><li>width 像素 设置图像的宽度</li><li>height 像素 设置图像的高度       （一般只修改宽度或高度中的某一个属性，另一个会等比例缩放） </li><li>border 像素 设置图像的边框粗细</li></ul><ol start="2"><li>图像标签和路径<br>相对路径：以引用文件所在位置为参考基础 分为三级：<br>同一级路径（url&#x3D;”文件名”） 下一级路径（&#x2F;） 上一级路径（..&#x2F;）</li></ol><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><ol><li><code>&lt;a&gt;&lt;/a&gt;</code>   a:anchor<br>链接的语法格式：<code>&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;</code></li></ol><ul><li><p>herf属性：用于指定链接目标的url地址（必须属性）当标签用了herf属性时他就有了超链接的功能</p></li><li><p>target属性：用于指定链接页面打开的方式，其中_self为默认值是在当前窗口打开，_blank为在新窗口打开          </p><blockquote><p>ifarme标签可以在页面上开辟一个小区域显示一个单独的页面</p></blockquote></li><li><p>iframe和a标签组合使用</p><ol><li><p>在iframe标签中使用name属性定义一个名称</p></li><li><p>在a标签的target属性上设置iframe的name属性值</p><p>eg：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 点击yyy<span class="token punctuation">.</span>html链接，在当前页面开一个宽<span class="token number">500</span>高<span class="token number">400</span>的小窗跳转到页面xxx<span class="token punctuation">.</span>html<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>iframe scr<span class="token operator">=</span><span class="token string">"xxx.html"</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token string">"500"</span> height<span class="token operator">=</span> <span class="token string">"400"</span> name <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>a href <span class="token operator">=</span> <span class="token string">"yyy.html"</span> target<span class="token operator">=</span><span class="token string">"abc"</span><span class="token operator">></span> yyy<span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><ol start="2"><li>链接分类：</li></ol><ul><li>外部链接：外部链接地址一定要写为http：&#x2F;&#x2F;网址 的形式</li><li>内部链接：网站内部页面之间的相互链接，直接链接内部网页名称即可</li><li>空连接：如果当时没有确定链接目标时即可用”#”来定义href属性 eg:<code>&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;</code></li><li>下载链接：如果href里面地址是一个文件或压缩包，那么点击超链接会下载这个文件</li><li>网页元素链接：在网页中的各种网页元素，如文本，图像，表格，音频，视频等都可以添加超链接</li><li>锚点链接：点击链接，可以快速定位到同一页面中的某个位置<br>&lt;1  在链接文本的href属性中，设置属性值为 #名字 的形式，如：<code>&lt;a href=&quot;#two&quot;&gt;第二集&lt;/a&gt;</code><br>&lt;2  找到目标位置标签，里面添加一个id属性&#x3D;刚才的名字，如：<code>&lt;h3 id=&quot;two&quot;&gt;第二集&lt;/h3&gt;</code></li></ul><h5 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h5><p><code>&lt;!--需要注释的语句--&gt;</code>    快捷键：ctrl+&#x2F;</p><h4 id="常用特殊字符："><a href="#常用特殊字符：" class="headerlink" title="常用特殊字符："></a>常用特殊字符：</h4><p>| |空格号 | <code>&amp;nbsp;</code>  |            nbsp：Non-breaking space |<br>|:  |: :|: :|                                            :|<br>|  &lt; | 小于号| <code>&amp;lt;</code>  |                lt:less then  |<br>| &gt; | 大于号 | <code>&amp;gt;</code>   |               gt:greater then  |</p><p>注：html中，如果用空格键产生空格，空格不会累加，只会显示一个空格<br> 在html5中单标签可以不写&#x2F;  eg<code>&lt;br&gt;</code>,<code>&lt;img src=&quot;url&quot;&gt;</code></p><h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><ol><li>基本语法<br> <table><br>     <tr><br>         <td>要填的数据</td><br>         …<br>     </tr><br> </table></li></ol><ul><li><code>&lt;table&gt;&lt;/table&gt;</code>用来定义表格的标签</li><li><code>&lt;tr&gt;&lt;/tr&gt;</code>用来定义表格中的行，必须嵌套在<code>&lt;table&gt;</code>标签中 tr:table row</li><li><code>&lt;td&gt;&lt;/td&gt;</code>用来定义普通单元格，必须嵌套在<code>&lt;tr&gt;</code>标签中  td：table data</li><li><code>&lt;th&gt;&lt;/th&gt;</code>用来定义表头单元格，突出重要性，表头单元格中的文字会加粗居中显示     th：table head</li></ul><ol start="2"><li><p>表格属性（不常用，一般通过css写）</p><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left  center right</td><td>表格在页面中的的位置</td></tr><tr><td>border</td><td>1，0</td><td>表格是否有边框</td></tr><tr><td>cellpadding</td><td></td><td>单元格中数据到单元格边框的距离</td></tr><tr><td>cellspacing</td><td></td><td>表格格边框与表格边框之间的距离</td></tr></tbody></table></li><li><p>表格结构标签<br> 一般表格较长时用表格结构标签使代码结构分明</p></li></ol><ul><li><code>&lt;thead&gt;&lt;/thead&gt;</code>:用于定义表格的头部，<code>&lt;thead&gt;</code>内部必须有<code>&lt;tr&gt;</code>标签，一般是位于第一行</li><li><code>&lt;tbody&gt;&lt;/tbody&gt;</code>:用于定义表格的主体，主要用于放数据本体</li><li>以上标签都是放在<code>&lt;table&gt;&lt;/table&gt;</code>标签中</li></ul><ol start="4"><li>合并单元格方式:</li></ol><ul><li>跨行合并：rowspan&#x3D;”合并单元格的个数” </li><li>跨列合并：colspan&#x3D;”合并单元格的个数”</li></ul><ol start="5"><li>合并单元格三部曲：<br>1&gt; 先确定是跨行还是跨列合并<br>2&gt; 找到目标单元格，在单元格标签中写上合并方式&#x3D;合并的单元格数量  eg：<code>&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</code><br>3&gt; 删除多余的单元格</li></ol><h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><ol><li>无序列表（重点）<br>基本语法格式：<br> <ul><br> <li>列表项1</li><br> <li>列表项2</li><br> <li>列表项3</li><br> …<br> </ul></li></ol><ul><li>无序列表的各个列表项之间没有顺序级别之分，是并列的</li><li><code>&lt;ul&gt;&lt;/ul&gt;</code>中只能嵌套<code>&lt;li&gt;&lt;/li&gt;</code>,直接在<code>&lt;ul&gt;&lt;/ul&gt;</code>标签中输入其他标签或文字的做法是不被允许的</li><li><code>&lt;li&gt;与&lt;/li&gt;</code>之间相当于一个容器，可收纳所有元素</li><li>无序列表会有自己的样式属性，但在实际使用时，我们会用css来设置</li></ul><ol start="2"><li>有序列表<br>基本语法格式：<br> <ol><br> <li>列表项1</li><br> <li>列表项2</li><br> <li>列表项3</li><br> …<br> </ol></li></ol><ul><li>有序列表的各个列表项之间有顺序级别之分</li><li><code>&lt;ol&gt;&lt;/ol&gt;</code>中只能嵌套<code>&lt;li&gt;&lt;/li&gt;</code>,直接在<code>&lt;ol&gt;&lt;/ol&gt;</code>标签中输入其他标签或文字的做法是不被允许的</li><li><code>&lt;li&gt;与&lt;/li&gt;</code>之间相当于一个容器，可收纳所有元素</li><li>有序列表会有自己的样式属性，但在实际使用时，我们会用css来设置</li></ul><ol start="3"><li>自定义列表<br>  <dl><br>        <dt><br>           <dd>列表项1</dd><br>           <dd>列表项2</dd><br>           <dd>列表项3</dd><br>           …<br>        </dt><br>        <dt><br>           <dd>列表项1</dd><br>           <dd>列表项2</dd><br>           <dd>列表项3</dd><br>           …<br>        </dt><br>     …<br>  </dl></li></ol><ul><li><code>&lt;dl&gt;&lt;/dl&gt;</code>中只能嵌套<code>&lt;dt&gt;&lt;/dt&gt;</code>和<code>&lt;dd&gt;&lt;/dd&gt;</code>,直接在<code>&lt;dl&gt;&lt;/dl&gt;</code>标签中输入其他标签或文字的做法是不被允许的    </li><li><code>&lt;dd&gt;</code>标签中包含数据与<code>&lt;dt&gt;</code>标签中包含的数据相关</li></ul><h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h4><ol><li>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成</li></ol><ul><li>表单控件：<br>包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</li><li>提示信息：<br>​一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</li><li>表单域：<br>​他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</li></ul><ol start="2"><li>表单input控件（重点）</li></ol><ul><li><p>语法：<code>&lt;input type=&quot;属性值&quot; value=&quot;&quot;&gt;</code>（input标签为单标签）</p></li><li><p>type属性</p> <img src="media/input.png" /></li><li><p>value 默认的文本值<br>有些表单想刚打开页面就默认显示几个文字，就可以通过这个value 来设置。</p></li><li><p>name属性<br>name表单的名字， 这样，后台可以通过这个name属性找到这个表单。  页面中的表单很多，name主要作用就是用于区别不同的表单。<br>1&gt;name属性后面的值，是我们自己定义的。<br>2&gt;radio中name属性需一致以实现多选一</p></li><li><p>checked属性表示默认选项，打开html页面就选中</p><blockquote><p>一般将表单放在表格标签中使表单格式更工整。</p></blockquote></li></ul><h4 id="lable标签"><a href="#lable标签" class="headerlink" title="lable标签"></a>lable标签</h4><p>作用：当我们鼠标点击 label标签里面的文字时， 光标会定位到指定的表单里面<br>用法：</p><ol><li>第一种用法就是用label直接包括input表单。<br> <label> 用户名：<input type="radio" name="usename" value="请输入用户名">   </label></li></ol><p>适合单个表单选择<br>2. 第二种用法 for 属性规定 label 与哪个表单元素绑定。</p><pre><code>    &lt;label for=&quot;sex&quot;&gt;男&lt;/label&gt;    &lt;input type=&quot;radio&quot; name=&quot;sex&quot;  id=&quot;sex&quot;&gt;           </code></pre><h4 id="textarea控件-文本域"><a href="#textarea控件-文本域" class="headerlink" title="textarea控件(文本域)"></a>textarea控件(文本域)</h4><ol><li><p>语法：</p><pre><code> &lt;textarea cols=&quot;&quot; rows=&quot;&quot;&gt;     文本内容 &lt;/textarea&gt;</code></pre></li><li><p>作用：<br>通过textarea控件可以轻松地创建多行文本输入框.<br>cols&#x3D;”每行中的字符数” rows&#x3D;”显示的行数”  我们实际开发不用</p></li></ol><h4 id="select下拉列表"><a href="#select下拉列表" class="headerlink" title="select下拉列表"></a>select下拉列表</h4><p>目的:<br>如果有多个选项让用户选择，为了节约空间，我们可以使用select控件定义下拉列表.</p><p>语法:</p><pre><code>    &lt;select&gt;    &lt;option&gt;选项1&lt;/option&gt;    &lt;option&gt;选项2&lt;/option&gt;    &lt;option&gt;选项3&lt;/option&gt;    ...    &lt;/select&gt;</code></pre><p><strong>注意：</strong></p><ul><li><code>&lt;select&gt;...&lt;/select&gt;</code>  中至少包含一对 option </li><li>在option 中定义selected &#x3D;”selected”时，当前项即为默认选中项。</li></ul><h4 id="form表单域"><a href="#form表单域" class="headerlink" title="form表单域"></a>form表单域</h4><ol><li>目的：<br>在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。</li><li>语法:<br> <code>&lt;form action=&quot;url地址&quot; method=&quot;提交方式&quot; name=&quot;表单名称&quot;&gt;&lt;/form&gt;</code></li><li>各种表单控件<br>常用属性:<table><thead><tr><th align="center">属性</th><th align="left">属性值</th><th align="right">作用</th></tr></thead><tbody><tr><td align="center">action</td><td align="left">url地址</td><td align="right">用于指定接收并处理表单数据的服务器程序的url地址。</td></tr><tr><td align="center">method</td><td align="left">get&#x2F;post</td><td align="right">用于设置表单数据的提交方式，其取值为get或post。</td></tr><tr><td align="center">name</td><td align="left">名称</td><td align="right">用于指定表单的名称，以区分同一个页面中的多个表单。</td></tr></tbody></table></li></ol><ul><li>GET请求特点：<ul><li>浏览器地址栏的地址是：action属性[+?+请求参数]<ul><li>请求参数的个数是：name&#x3D;value&amp;name&#x3D;value</li></ul></li><li>不安全</li><li>有数据长度限制</li></ul></li><li>POST请求特点:<ul><li>浏览器地址栏中只有action属性值（服务器地址）</li><li>相对于GET请求较安全</li><li>理论上没有数据长度限制</li></ul></li></ul><blockquote><p>建议将单选、多选（下拉列表中的option标签）标签中的value属性以及表单项的name属性都赋值，表单项包含在提交的form标签中，以便将数据都发送给服务器。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA加载与执行</title>
      <link href="/2020/05/15/java-de-jia-zai-yu-zhi-xing/"/>
      <url>/2020/05/15/java-de-jia-zai-yu-zhi-xing/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>JAVA加载与执行</title></head><body><h3>java的语言特性</h3><ul>    <li>        简单性：<br>    <p>        相对而言，例如java不再支持多继承，c++是支持多继承的，c++中有指针，java中屏蔽了指针的概念。    </p>    </li>    <li>        面向对象：<br>        <p>            java是纯面向对象的，更符合人的思维模式。        </p>    </li>    <li>        可移植性（跨平台）：<br>        <p>            java程序可以做到一次编译到处运行，java程序在windows操作系统上运行，同样的程序，不做任何修改也可以在linux操作系统上运行。            而windows操作系统内核和linux操作系统的内核不同，它们执行指令的方式也不同。            显然java程序不能直接和操纵系统打交道，因为java程序只有一分，而操作系统执行的原理不同。            SUM公司让java程序运行在一台虚拟的计算机当中，这个虚拟的计算机叫做java虚拟机，简称JVM。JVM再和底层操作系统打交道，JVM屏蔽了操作系统之间的差异。不同操作系统需要的JVM不同（JVM不能直接安装，需要安装相应版本的JDK）。        </p>    </li>    <li>        多线程    </li>    <li>        健壮性：<br>        <p>            和自动垃圾回收机制有关，java语言运行过程中产生的垃圾可以被自动回收，自动垃圾回收机制简称GC机制。        </p>    </li>    <li>        安全性    </li></ul><h3>java的加载与执行（使用DOS命令）</h3><p>&nbsp&nbsp&nbsp&nbsp&nbsp java程序的执行包括两个阶段：编译阶段和运行阶段。</p><h4>编译阶段</h4><p>    &nbsp&nbsp&nbsp&nbsp&nbsp编译阶段主要任务是检查Java源程序（xxx.java）是否符合Java语法，符合Java语法则能生成正常的字节码文件（xxx.class），    不符合Java语法规则则无法生成字节码文件。字节码文件中不是纯粹的二进制，该文件无法在操作系统中直接执行。<br><br>    <strong>编译阶段过程：</strong><br>    1. 程序员需要在硬盘的某个位置（位置随意）新建一个.java扩展名的文件（Java源文件），源文件中编写的是Java源代码/源程序，该源程序必须符合Java语法规则。<br>    2. Java程序员需要使用JDK种自带的javac.exe命令进行Java程序的编译（不使用idea等其他编译器的情况下）。<br>     javac是一个java编译器的工具，在DOS命令窗口中使用，javac的使用规则：javac java源文件的路径<br><br>     &nbsp&nbsp&nbsp&nbsp&nbsp一个java源文件可以编译生成多个.class文件，字节码文件/class文件是最终要执行的文件，当class文件生成后，java源文件删除并不会影响java程序的执行。但是一般java源程序不要删除，因为class文件最终执行效果可能不是我们想要的，那么这个时候需要回头重新修改java源程序，然后将修改后的源程序重新编译生成新的class文件，再运行这个class程序生成新的效果。<br>     &nbsp&nbsp&nbsp&nbsp&nbsp编译结束后可以将class文件拷贝到其他操作系统中运行（跨平台）。</p><h4>运行阶段</h4>&nbsp&nbsp&nbsp&nbsp&nbspJDK安装后，除了自带一个javac.exe来编译之外，还有一个java.exe命令来运行class文件。java.exe在DOS窗口使用，使用规则：java 类名，eg：运行A.class文件用命令 :java A。<br><br><strong>运行阶段过程：</strong><br>1. 打开DOS命令窗口<br>2. 输入:java A <br>3. java.exe命令会启动JVM，JVM启动类加载器ClassLoader <br>4. ClassLoader会到硬盘上搜索A.class文件，找到该文件则将该字节码文件装载到JVM中 <br>5. JVM将A.class字节码文件解释成二进制文件<br>6. 操作系统执行二进制和底层硬件平台进行交互。<br><h3>JDK、JRE、JVM关系</h3>JDK:Java开发工具包<br>JRE:Java的运行环境，java程序开发完成后只需要java运行环境就可以运行java程序<br>JVM:java虚拟机，java程序最终运行在JVM上的。<br><strong>JDK包含JRE，JRE包含JVM。</strong> JDK和JRE可以单独安装，JVM不可以单独安装。<h3>JDK目录的介绍<h3>JDK/bin:该目录下存放了很多命令，例如javac.exe、java.exe和javadoc.exe(javac.exe负责编译，java.exe负责运行,javadoc将代码中文档注释信息自动生成到帮助文档中。)</body></html>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python绘图turtle库命令合集</title>
      <link href="/2020/03/13/python-hui-tu-turtle-ku-ming-ling-he-ji/"/>
      <url>/2020/03/13/python-hui-tu-turtle-ku-ming-ling-he-ji/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Python绘图turtle库命令合集</title></head><body>    <strong>turtle库是python中用来绘制图像的函数库，turtle：乌龟，小乌龟从坐标原点（默认值）开始，服从我们输入的指令在画布（有一个以画布中心为坐标原点的坐标轴）中移动，形成我们绘制的图形<strong>            <div>                <h1>turtle绘图的基础认识</h1>                <h3>1.画布（canvas）</h3>                <p>                    画布是我们绘图所在的区域，我们可以改变他的初始位置和大小 <br>                <h4>1.设置画布的大小</h4>                turtle.screensize(canvwidth= , canvheight= , bg='' ) <br>                参数分别为画布的宽(默认值400px), 高(默认值300px), 背景颜色（颜色的英文单词 eg:'red'）。                <h4>2.设置画布的位置</h4>                turtle.setup(width=0.5, height=0.75, startx= , starty= ) <br>                参数分别为画布的宽，高（输入值为整数时表示具体像素，输入值为小数时表示画布窗口占电脑屏幕的比例），                (startx,starty)表示窗口左上顶点的坐标（默认值时，画布窗口在屏幕中心）                <h3>2.画笔</h3>                画笔呢就是小乌龟，它一开始默认是在坐标原点的，朝向x轴正方向                <h5>画笔的属性设置</h5>                <p>                <ul>                    <li>turtle.pensize():设置画笔的宽度也就是画线的粗细，单位为px</li>                    <li>turtle.pencolor():设置画笔的颜色，传入参数可以是代表颜色的字符串也可以是rgb值，如果没有参数传入则返回当前画笔颜色</li>                    <li>turtle.speed():设置画笔移动的速度，范围为[0,10]整数，数字越大移动越快</li>                </ul>                </p>                <h4>绘图命令</h4>                <p>                    turtle绘图命令分为三种：运动命令，画笔控制命令和全局控制命令。                <h5 textalign='center'>1.画笔运动命令</h5>                <table cellpadding='0' ,cellspacing='0'>                    <tr>                        <td>命令</td>                        <td>说明</td>                    </tr>                    <tr>                        <td>turtle.forward(distance)</td>                        <td>向当前画笔方向移动distance像素长度</td>                    </tr>                    <tr>                        <td>turtle.backward(distance)</td>                        <td>向当前画笔相反方向移动distance像素长度</td>                    </tr>                    <tr>                        <td>turtle.right(degree)</td>                        <td>顺时针移动degree°</td>                    </tr>                    <tr>                        <td>turtle.left(degree)</td>                        <td>逆时针移动degree°</td>                    </tr>                    <tr>                        <td>turtle.pendown()</td>                        <td>落笔，绘制图形</td>                    </tr>                    <tr>                        <td>turtle.penup()</td>                        <td>提笔，不绘制图型，一般用于转到另一个地方绘制</td>                    </tr>                    <tr>                        <td>                            turtle.goto(x,y)                        </td>                        <td>将画笔移动到位置（x,y）</td>                    </tr>                    <tr>                        <td>turtle.circle(radius, extent=None, steps=None)</td>                        <td>                            <ul>                                <li> radius(半径)：半径为正(负)，表示圆心在画笔的左边(右边)画圆</li>                                <li> extent(弧度) (optional)                                </li>                                <li>steps (optional) :做半径为radius的圆的内切正多边形，多边形边数为steps</li>                            </ul>                        </td>                    </tr>                    <tr>                        <td>setx()</td>                        <td>将当前x轴移动到指定位置</td>                    </tr>                    <tr>                        <td>sety()</td>                        <td>将当前y轴移动到指定位置</td>                    </tr>                    <tr>                        <ta>setheading(angle)</ta>                        <ta>设置当前朝向为angle度</ta>                    </tr>                    <tr>                        <td>home()</td>                        <td>设置当前画笔位置为原点，朝向x轴正方向</td>                    </tr>                    <tr>                        <td>dot(r)</td>                        <td>绘制一个指定直径和颜色的圆点</td>                    </tr>                </table>                </p>                <h5>2.画笔控制命令</h5>                <table cellpadding='0' ,cellspacing='0'>                    <tr>                        <td>命令</td>                        <td>说明</td>                    </tr>                    <tr>                        <td>turtle.fillcolor(colorstring)</td>                        <td>填充图形的颜色</td>                    </tr>                    <tr>                        <td>turtle.color(color1, color2)</td>                        <td>同时设置pencolor=color1, fillcolor=color2</td>                    </tr>                    <tr>                        <td> turtle.filling()</td>                        <td>返回当前是否在填充状态</td>                    </tr>                    <tr>                        <td>turtle.begin_fill()</td>                        <td>开始填充</td>                    </tr>                    <tr>                        <td>turtle.end_fill()</td>                        <td>结束填充</td>                    </tr>                    <tr>                        <td>turtle.hideturtle()</td>                        <td>隐藏画笔</td>                    </tr>                    <tr>                        <td>turtle.showturtle()</td>                        <td>显示画笔</td>                    </tr>                </table>                <h5>3.全局控制命令</h5>                <table>                    <tr>                        <td>turtle.clear()</td>                        <td>清空turtle窗口，turtle的位置和状态不变</td>                    </tr>                    <tr>                        <td>turtle.reset()</td>                        <td>                            清空窗口，重置turtle状态为起始状态</td>                    </tr>                    <tr>                        <td>turtle.undo()</td>                        <td>撤销上一条命令</td>                    </tr>                    <tr>                        <td>turtle.isvisible()</td>                        <td>返回当前turtle是否可见</td>                    </tr>                    <tr>                        <td>stamp()</td>                        <td>复制当前图形</td>                    </tr>                    <tr>                        <td>turtle.write(s [,font=("font-name",font_size,"font_type")])</td>                        <td>turtle写文本，s为文本内容，font是字体的参数，分别为字体名称，大小和类型；font为可选项，font参数也是可选项</td>                    </tr>                </table>                <h5>4.其他命令</h5>                <table cellpadding='0' ,cellspacing='0'>                    <tr>                        <td>命令</td>                        <td>说明</td>                    </tr>                    <tr>                        <td>turtle.mainloop()或turtle.done()</td>                        <td>启动事件循环 -调用Tkinter的mainloop函数。                            必须是乌龟图形程序中的最后一个语句。</td>                    </tr>                    <tr>                        <td>turtle.mode(mode=None)</td>                        <td>                            设置乌龟模式（“standard”，“logo”或“world”）并执行重置。如果没有给出模式，则返回当前模式。                            <table cellspacing='0'>                                <tr>                                    <td>模式</td>                                    <td>初始龟标题</td>                                    <td>正角度</td>                                </tr>                                <tr>                                    <td>standard</td>                                    <td>向右</td>                                    <td>逆时针</td>                                </tr>                                <tr>                                    <td>logo</td>                                    <td>向上</td>                                    <td>顺时针</td>                                </tr>                            </table>                        </td>                    </tr>                    <tr>                        <td>turtle.delay(delay= )</td>                        <td>                            设置以毫秒为单位的绘图延迟</td>                    </tr>                    <tr>                        <td>turtle.begin_poly()</td>                        <td>开始记录多边形的顶点。当前的乌龟位置是多边形的第一个顶点</td>                    </tr>                    <tr>                        <td>                            turtle.end_poly()</td>                        <td>停止记录多边形的顶点。当前的乌龟位置是多边形的最后一个顶点,与第一个顶点相连。</td>                    </tr>                    <tr>                        <td>turtle.get_poly()</td>                        <td>返回最后记录的多边形</td>                    </tr>                </table>                <h5>eg:</h5>                <h5>turtle画国旗</h5>     <pre><code>    #画国旗红色方形背景    import turtle    turtle.goto(-120,120)    turtle.color(&quot;red&quot;,&quot;red&quot;)    turtle.begin_fill()    turtle.forward(480)    turtle.right(90)    turtle.forward(320)    turtle.right(90)    turtle.forward(480)    turtle.right(90)    turtle.forward(320)    turtle.end_fill()    #画大五角星    turtle.right(90)    turtle.goto(-72,24)    turtle.color(&quot;yellow&quot;,&quot;yellow&quot;)    turtle.begin_fill()    for _ in range(5):        turtle.forward(84)        turtle.right(144)    turtle.end_fill()    #画五个小五角星    turtle.penup()    turtle.goto(20,90)    turtle.pendown()    turtle.begin_fill()    for _ in range(5):        turtle.forward(35)        turtle.right(144)    turtle.end_fill()    turtle.penup()    turtle.goto(70,56)    turtle.pendown()    turtle.begin_fill()    for _ in range(5):        turtle.forward(35)        turtle.right(144)    turtle.end_fill()    turtle.penup()    turtle.goto(70,-8)    turtle.pendown()    turtle.begin_fill()    for _ in range(5):        turtle.forward(35)        turtle.right(144)    turtle.end_fill()    turtle.penup()    turtle.goto(20,-40)    turtle.pendown()    turtle.begin_fill()    for _ in range(5):        turtle.forward(35)        turtle.right(144)    turtle.end_fill()  </code></pre><p>运行结果:<br><img src="../images/flag.jpg" alt="国旗"></p></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> turtle </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
